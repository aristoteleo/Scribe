#           text(xcircle[j], ycircle[j], signif(i,
#                                               2), cex = 0.5, col = "darkgreen")
#       }
#     }
#   }
#   seq.sd <- seq.int(0, maxray, length.out = 5)
#   for (i in seq.sd) {
#     xcircle <- (cos(discrete * pi/180) * i)
#     ycircle <- sin(discrete * pi/180) * i
#     if (i)
#       lines(xcircle, ycircle, lty = 3, col = "blue")
#     text(min(xcircle), -0.03 * maxray, signif(i,
#                                               2), cex = 0.5, col = "blue")
#     text(max(xcircle), -0.03 * maxray, signif(i,
#                                               2), cex = 0.5, col = "blue")
#   }
#   text(0, -0.08 * maxray, "Standard Deviation",
#        cex = 0.7, col = "blue")
#   text(0, -0.12 * maxray, "Centered RMS Difference",
#        cex = 0.7, col = "darkgreen")
#   points(sd.r, 0, pch = 22, bg = "darkgreen", cex = 1.1)
#   text(0, 1.1 * maxray, "Correlation Coefficient",
#        cex = 0.7)
# }
# S <- (2 * (1 + R))/(sd.f + (1/sd.f))^2
}
}
points(sd.f * R, sd.f * sin(acos(R)), pch = pch, col = col,
cex = pcex)
if(! is.null(text)) {
text(sd.f * R, sd.f * sin(acos(R)),  #the line to add
labels=text, cex = pcex, pos=3) #You can change the pos argument to your liking
}
invisible(oldpar)
}
plot_taylor_diagram(cds_exprs[1, ], seq(0, 1, length.out = 100), MI = seq(2, 3, length.out = 100), Entropy = seq(4, 5, length.out = 1))
# development version
library(devtools)
# install 'arcdiagram'
install_github('arcdiagram',  username='gastonstat')
library(arcdiagram)
# create a star graph with 10 nodes
star_graph = graph.star(10, mode="out")
# extract edgelist
star_edges = get.edgelist(star_graph)
# inspect star_edges
star_edges
# plot 1: default arc diagram
arcplot(star_edges)
# plot 2: show nodes as circles, in decreasing order
arcplot(star_edges, show.nodes=TRUE, sorted=TRUE, decreasing=TRUE, las=1)
# plot 3: different ordering, arc widths, arc colors, and node sizes
set.seed(120)
arcplot(star_edges, ordering=sample(1:10), labels=paste("node",1:10,sep="-"),
lwd.arcs=4*runif(10,.5,2), col.arcs=hsv(runif(9,0.6,0.8),alpha=0.4),
show.nodes=TRUE, pch.nodes=21, cex.nodes=runif(10,1,3),
col.nodes="gray80", bg.nodes="gray90", lwd.nodes=2)
# plot 4: same as plot 3 but vertically oriented
set.seed(120)
op = par(mar = c(0.5, 5, 0.5, 3))
arcplot(star_edges, ordering=sample(1:10), horizontal=FALSE,
labels=paste("node",1:10,sep="-"),
lwd.arcs=4*runif(10,.5,2), col.arcs=hsv(runif(9,0.6,0.8),alpha=0.4),
show.nodes=TRUE, pch.nodes=21, cex.nodes=runif(10,1,3),
col.nodes="gray80", bg.nodes="gray90", lwd.nodes=2)
par(op)
start_edges
star_edges
arcplot(star_edges)
arcplot(star_edges, show.nodes=TRUE, sorted=TRUE, decreasing=TRUE, las=1)
?arcplot
un_graphe <- rbind(
c("fromage", "pain"),
c("pain", "vin"),
c("vin", "biere"),
c("cidre", "biere"),
c("foie", "fromage"),
c("pain", "foie"))
arcplot(un_graphe)
arcplot(un_graphe, horizontal=FALSE)
arcplot(un_graphe, above = c(1, 3, 5))
arcplot(un_graphe, sorted=TRUE)
new_order = c("vin", "biere", "cidre", "fromage", "foie", "pain")
arcplot(un_graphe, ordering = new_order)
ring_graph = graph.ring(10)
ring_graph
plot(ring_graph)
graph.star
star_graph = graph.star(10, mode="out")
tree_graph = graph.tree(10, 2)
plot(star_graph)
plot(tree_graph)
V(ring_graph)$name = letters[1:vcount(ring_graph)]
V(star_graph)$name = paste("Node", 1:vcount(star_graph))
V(tree_graph)$name = paste("V", 1:vcount(tree_graph), sep='')
ring_edges = get.edgelist(ring_graph)
star_edges = get.edgelist(star_graph)
tree_edges = get.edgelist(tree_graph)
arcplot(ring_edges, labels=V(ring_graph)$name, las=1)
arcplot(star_edges, labels=V(star_graph)$name, las=2)
arcplot(tree_edges, labels=V(tree_graph)$name, las=2)
install.packages('HiveR')
library(HiveR)
example(HiveR::plotHive)
example(HiveR::plot3dHive())
?HiveR::plot3dHive()
source('~/Dropbox (Personal)/Projects/Causal_network/causal_network/Scripts/analysis_hive_or_other_plots.R', echo=TRUE)
getwd()
source('~/Dropbox (Personal)/Projects/Causal_network/causal_network/Scripts/analysis_hive_or_other_plots.R', echo=TRUE)
mod.edge2HPD
source('~/Dropbox (Personal)/Projects/Causal_network/causal_network/Scripts/analysis_hive_or_other_plots.R', echo=TRUE)
source('~/Dropbox (Personal)/Projects/Causal_network/causal_network/Scripts/analysis_hive_or_other_plots.R', echo=TRUE)
source('~/Dropbox (Personal)/Projects/Causal_network/causal_network/Scripts/analysis_hive_or_other_plots.R', echo=TRUE)
#source('~/Dropbox (Personal)/Projects/Causal_network/causal_network/Scripts/analysis_hive_or_other_plots.R', echo=TRUE)
hive1
plotHive(hive2, method = "abs", bkgnd = "white",  axLab.pos = 1)
plotHive(hive1, method = "abs", bkgnd = "white",  axLab.pos = 1)
########################################
# Based on hierarchical cluestering
d <- dist(dsAll)
hc <- hclust(d)
#plot(hc)
nodeAxis <- cutree(hc, k = 6)
node.list <- cbind(node.list, axisCl = nodeAxis)
rm(nodeAxis)
hive1 <- mod.edge2HPD(edge_df = dataSet.ext[, 1:2], edge.weight = dataSet.ext[, 3], edge.color = dataSet.ext[, 5], node.color = node.list[,c("name", "color")], node.size = node.list[,c("name", "size")], node.radius = node.list[,c("name", "degree")], node.axis = node.list[,c("name", "axisCl")])
#sumHPD(hive1)
hive2 <- mineHPD(hive1, option = "remove zero edge")
plotHive(hive2, method = "abs", bkgnd = "white",  axLab.pos = 1)
########################################
# Based on hierarchical cluestering
d <- dist(dsAll)
hc <- hclust(d)
#plot(hc)
nodeAxis <- cutree(hc, k = 6)
node.list <- cbind(node.list, axisCl = nodeAxis)
rm(nodeAxis)
hive1 <- mod.edge2HPD(edge_df = dataSet.ext[, 1:2], edge.weight = dataSet.ext[, 3], edge.color = dataSet.ext[, 5], node.color = node.list[,c("name", "color")], node.size = node.list[,c("name", "size")], node.radius = node.list[,c("name", "degree")], node.axis = node.list[,c("name", "axisCl")])
#sumHPD(hive1)
hive2 <- mineHPD(hive1, option = "remove zero edge")
plotHive(hive1, method = "abs", bkgnd = "white",  axLab.pos = 1)
source('~/Dropbox (Personal)/Projects/Causal_network/causal_network/Scripts/analysis_hive_or_other_plots.R', echo=TRUE)
source('~/Dropbox (Personal)/Projects/Causal_network/causal_network/Scripts/plotNetworkUsingHiveR.R', echo=TRUE)
source('~/Dropbox (Personal)/Projects/Causal_network/causal_network/Scripts/plotNetworkUsingHiveR.R', echo=TRUE)
source('~/Dropbox (Personal)/Projects/Causal_network/causal_network/Scripts/exampleForModEdge2HPD_HiveR.R', echo=TRUE)
source('~/Dropbox (Personal)/Projects/Causal_network/causal_network/Scripts/exampleForModEdge2HPD_HiveR.R', echo=TRUE)
source('~/Dropbox (Personal)/Projects/Causal_network/causal_network/Scripts/exampleForModEdge2HPD_HiveR.R', echo=TRUE)
#dataSet <- read.table("~/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/lesmis.txt", header = FALSE, sep = "\t")
library(HiveR)
data("Safari")
#exampleForModEdge2HPD_HiveR.R
plotHive(Safari)
data("Arroyo")
plotHive(Arroyo)
plotHive(Safari)
EC1 <- dot2HPD(file = "network_tf_gene.parsed.dot",
node.inst = NULL,
edge.inst = "EdgeInst.csv",
desc = "E coli gene regulatory network (RegulonDB)",
axis.cols = rep("grey", 3))
EC1 <- dot2HPD(file = "~/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/network_tf_gene.parsed.dot",
node.inst = NULL,
edge.inst = "~/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/EdgeInst.csv",
desc = "E coli gene regulatory network (RegulonDB)",
axis.cols = rep("grey", 3))
source('~/Dropbox (Personal)/Projects/Causal_network/causal_network/Scripts/analysis_hive_or_other_plots.R', echo=TRUE)
plotHive(EC4, dr.nodes = FALSE, method = "norm", ch = 0.1, axLabs = c("source", "sink", "manager"),
axLab.pos = c(0.1, 0.2, 0.2), axLab.gpar = gpar(fontsize = 6, col = "white"), np = FALSE)
grid.text("normed units", x = 0.5, y = 0.05, default.units = "npc", gp = gpar(fontsize = 8, col = "white"))
suppressMessages(library("HiveR"))
suppressMessages(library("grid"))
suppressMessages(library("FuncMap"))
suppressMessages(library("sna"))
suppressMessages(library("xtable"))
suppressMessages(library("knitr"))
suppressMessages(library("bipartite"))
install.packages(c('FuncMap', 'bipartite'))
plotHive(EC4, dr.nodes = FALSE, method = "norm", ch = 0.1, axLabs = c("source", "sink", "manager"),
axLab.pos = c(0.1, 0.2, 0.2), axLab.gpar = gpar(fontsize = 6, col = "white"), np = FALSE)
grid.text("normed units", x = 0.5, y = 0.05, default.units = "npc", gp = gpar(fontsize = 8, col = "white"))
source('~/Dropbox (Personal)/Projects/Causal_network/causal_network/Scripts/analysis_hive_or_other_plots.R', echo=TRUE)
load("~/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/HIVhuH3.RData")
plotHive(HIVhuH3)
plot3dHive(HIVhuH3)
load('/Users/xqiu/Dropbox (Personal)/Projects/Monocle2_revision/Jupyter_notebook/network_res')
g
res
dataSet.ext <- get.edgelist(res$g)
hive1 <- edge2HPD(edge_df = dataSet.ext)
dataSet.ext
hive1 <- edge2HPD(edge_df = dataSet.ext)
class(dataSet.ext)
colnames(dataSet.ext) <- c('Source', 'Target')
hive1 <- edge2HPD(edge_df = dataSet.ext)
dataSet.ext <- as.data.frame(get.edgelist(res$g))
colnames(dataSet.ext) <- c('Source', 'Target')
# Create a hive plot from the data frame
hive1 <- edge2HPD(edge_df = dataSet.ext)
?edge2HPD
data.frame(lab1 = LETTERS[c(1:8, 7)],
lab2 = LETTERS[c(2:4, 1:3, 4, 2, 2)],
weight = c(1, 1, 2, 2, 3, 1, 2, 3, 1))
edge2HPD(edge_df = edges[, 1:2], desc = "Test of edge2HPD")
dataSet.ext$weight <- 1
hive1 <- edge2HPD(edge_df = dataSet.ext)
hive2 <- mineHPD(hive1, option = "rad <- tot.edge.count")
hive3 <- mineHPD(hive2, option = "axis <- source.man.sink")
hive4 <- mineHPD(hive3, option = "remove zero edge")
plotHive(hive4, method = "abs", bkgnd = "white", axLabs = c("source", "hub", "sink"), axLab.pos = 1)
hive4
plotHive(hive4, method = "abs", bkgnd = "white", axLabs = c("source", "hub", "sink"), axLab.pos = 1)
plotHive(hive4)
dataSet.ext
dataSet.ext <- as.data.frame(get.edgelist(res$g))
colnames(dataSet.ext) <- c('Source', 'Target')
dataSet.ext$weight <- 1
hive1 <- edge2HPD(edge_df = dataSet.ext)
hive2 <- mineHPD(hive1, option = "rad <- tot.edge.count")
sumHPD(hive1)
sumHPD(hive2)
sumHPD(hive3)
plotHive(hive3)
plotHive(hive3)
mineHPD(hive3, option = "remove zero edge")
require(HiveR)
require(plyr)
require(colorspace)
require(classInt)
require(feather)
require(dplyr)
require(grid)
require(igraph)
require(Matrix)
df = feather::read_feather('resources/example.feather')
# Take just the chromosome numbers
chroms = data.frame(df$chrom1, df$chrom2)
chroms = data.matrix(chroms)
chroms = matrix(chroms, ncol=2)
View(chroms)
View(df)
## build an adjacency matrix
edgelist = graph.edgelist(chroms, directed = TRUE)
adj = get.adjacency(edgelist)
dimnames(adj)[[1]] = "foo"
adj2HPD(c(adj), axis.col=c("black", "red", "grey"), desc="Intra-Chrom")
plotHive(hplot, axLabs = hpd$axLabs, ch = 0.1)
library("devtools")
install_github(repo = "bryanhanson/HiveR@master")
library("HiveR")
browseVignette("HiveR")
?browseVignette
??
browseVignette
library(utils)
browseVignette("HiveR")
utils::browseVignettes
utils::browseVignettes("HiveR")
mineHPD(hive3, option = "remove zero edge")
plotHive(hive1, method = "abs", bkgnd = "white", axLabs = c("source", "hub", "sink"), axLab.pos = 1)
plotHive(hive2, method = "abs", bkgnd = "white", axLabs = c("source", "hub", "sink"), axLab.pos = 1)
plotHive(hive3, method = "abs", bkgnd = "white", axLabs = c("source", "hub", "sink"), axLab.pos = 1)
require(HiveR)
require(plyr)
require(colorspace)
require(classInt)
d = ggplot2::diamonds
d = d[,c(1:4,7)]
head(d); dim(d)
# separate carat-size data into equal interval groups
brks = classIntervals(d$carat, n=11, style="quantile")$brks[1:11] # also try 'equal' style
d$carat = findInterval(d$carat, brks)
## NODES DATA
nodegroups = list()
for(i in 1:4){
vals = as.numeric(unique(d[[i]]))
nodegroup = data.frame(id = 1:length(vals), lab = unique(d[[i]]), vals = vals,
radius = 100 * vals/max(vals), axis = i)
sizes = table(d[[i]])
nodegroup$size = as.numeric(sizes[ match(nodegroup$lab, names(sizes)) ])
nodegroup$size = 2 * nodegroup$size / max(nodegroup$size)
if(i>1) nodegroup$id = nodegroup$id + max(nodegroups[[i-1]]$id)
nodegroups[[ names(d)[i] ]] = nodegroup
}
nodegroups
nodes = rbind(nodegroups[[1]], nodegroups[[2]], nodegroups[[3]], nodegroups[[4]])
nodes$lab = as.character(nodes$lab)
nodes$axis = as.integer(nodes$axis)
nodes$radius = as.numeric(nodes$radius)
nodes$color = "#ffffff"
head(nodes)
## EDGES DATA
# first update edge data with new node IDs
head(d)
for(i in 1:4) {
header = paste0(names(nodegroups)[i], 'id')
d[[header]] = nodegroups[[i]]$id[ match(as.numeric(d[[i]]), nodegroups[[i]]$vals) ]
}
head(d)
# edges between the 4 axes in terms of node IDs
for(i in 6:8){
edgegroup = data.frame(id1 = d[[i]], id2 = d[[i+1]], price = d[[5]])
if(i==6) all_edges = edgegroup else all_edges = rbind(all_edges, edgegroup)
}
head(all_edges); dim(all_edges)
# summarise edge data
edges = aggregate(all_edges$price, by=list(all_edges$id1, all_edges$id2), FUN='mean')
names(edges) = c('id1','id2','price')
edges = edges[with(edges, order(id1,id2)),]             # reorder
# set edge weights (stroke thickness)
weights = count(all_edges, vars = c('id1', 'id2'))      # summary data
weights = weights[with(weights, order(id1,id2)),]       # reorder to match egdes
all(weights$id1 == edges$id1, weights$id2 == edges$id2) # check all IDs match up
edges$weight = weights$freq * 0.004
edges$weight = pmax(edges$weight, 0.2)  # set min edge weight to still visible
range(weights$freq)
range(edges$weight)
# normalise prices for each group of edges (to utilise full colour range)
p = edges$price
edges$colorvals = 0
for(i in nodegroups[1:3]){
sel = edges$id1 %in% range(i$id)[1] : range(i$id)[2]
edges$colorvals[sel] = (p[sel] - min(p[sel])) / (max(p[sel]) - min(p[sel]))
}
edges$color = paste0(hex(HSV(edges$colorvals * 300, 1, 1)), '60')  # set alpha
edges = edges[order(edges$weight, decreasing=T),]   # draw thin edges last
head(edges)
hpd = list()
hpd$nodes = nodes
hpd$edges = edges
hpd$type = "2D"
hpd$desc = "Diamonds"
hpd$axis.cols = rep('#00000000', 4) # make invisible
hpd$axLabs = c("carats","cut","colour","clarity")
class(hpd) = "HivePlotData"
# Check data correctly formatted
chkHPD(hpd, confirm = TRUE)
# plot hive!
pdf('hive.pdf', width=8, height=8)
plotHive(hpd, axLabs = hpd$axLabs, ch = 0.1)
dev.off()
browseURL('hive.pdf')
require(HiveR)
require(plyr)
require(colorspace)
require(classInt)
d = ggplot2::diamonds
d = d[,c(1:4,7)]
head(d); dim(d)
# separate carat-size data into equal interval groups
brks = classIntervals(d$carat, n=11, style="quantile")$brks[1:11] # also try 'equal' style
d$carat = findInterval(d$carat, brks)
install.packages()
install.packages('classInt')
require(HiveR)
require(plyr)
require(colorspace)
require(classInt)
d = ggplot2::diamonds
d = d[,c(1:4,7)]
head(d); dim(d)
# separate carat-size data into equal interval groups
brks = classIntervals(d$carat, n=11, style="quantile")$brks[1:11] # also try 'equal' style
d$carat = findInterval(d$carat, brks)
nodegroups = list()
for(i in 1:4){
vals = as.numeric(unique(d[[i]]))
nodegroup = data.frame(id = 1:length(vals), lab = unique(d[[i]]), vals = vals,
radius = 100 * vals/max(vals), axis = i)
sizes = table(d[[i]])
nodegroup$size = as.numeric(sizes[ match(nodegroup$lab, names(sizes)) ])
nodegroup$size = 2 * nodegroup$size / max(nodegroup$size)
if(i>1) nodegroup$id = nodegroup$id + max(nodegroups[[i-1]]$id)
nodegroups[[ names(d)[i] ]] = nodegroup
}
nodegroups
nodes = rbind(nodegroups[[1]], nodegroups[[2]], nodegroups[[3]], nodegroups[[4]])
nodes$lab = as.character(nodes$lab)
nodes$axis = as.integer(nodes$axis)
nodes$radius = as.numeric(nodes$radius)
nodes$color = "#ffffff"
head(nodes)
## EDGES DATA
# first update edge data with new node IDs
head(d)
for(i in 1:4) {
header = paste0(names(nodegroups)[i], 'id')
d[[header]] = nodegroups[[i]]$id[ match(as.numeric(d[[i]]), nodegroups[[i]]$vals) ]
}
head(d)
for(i in 6:8){
edgegroup = data.frame(id1 = d[[i]], id2 = d[[i+1]], price = d[[5]])
if(i==6) all_edges = edgegroup else all_edges = rbind(all_edges, edgegroup)
}
head(all_edges); dim(all_edges)
# summarise edge data
edges = aggregate(all_edges$price, by=list(all_edges$id1, all_edges$id2), FUN='mean')
names(edges) = c('id1','id2','price')
edges = edges[with(edges, order(id1,id2)),]             # reorder
# set edge weights (stroke thickness)
weights = count(all_edges, vars = c('id1', 'id2'))      # summary data
weights = weights[with(weights, order(id1,id2)),]       # reorder to match egdes
all(weights$id1 == edges$id1, weights$id2 == edges$id2) # check all IDs match up
edges$weight = weights$freq * 0.004
edges$weight = pmax(edges$weight, 0.2)  # set min edge weight to still visible
range(weights$freq)
range(edges$weight)
# normalise prices for each group of edges (to utilise full colour range)
p = edges$price
edges$colorvals = 0
for(i in nodegroups[1:3]){
sel = edges$id1 %in% range(i$id)[1] : range(i$id)[2]
edges$colorvals[sel] = (p[sel] - min(p[sel])) / (max(p[sel]) - min(p[sel]))
}
edges$color = paste0(hex(HSV(edges$colorvals * 300, 1, 1)), '60')  # set alpha
edges = edges[order(edges$weight, decreasing=T),]   # draw thin edges last
head(edges)
hpd = list()
hpd$nodes = nodes
hpd$edges = edges
hpd$type = "2D"
hpd$desc = "Diamonds"
hpd$axis.cols = rep('#00000000', 4) # make invisible
hpd$axLabs = c("carats","cut","colour","clarity")
class(hpd) = "HivePlotData"
# Check data correctly formatted
chkHPD(hpd, confirm = TRUE)
# plot hive!
pdf('hive.pdf', width=8, height=8)
plotHive(hpd, axLabs = hpd$axLabs, ch = 0.1)
dev.off()
browseURL('hive.pdf')
count(all_edges, vars = c('id1', 'id2'))
all_edges
dim(all_edges)
test2 <- ranHiveData(nx = 2)
test3 <- ranHiveData(nx = 3)
test4 <- ranHiveData(nx = 4)
#
# plot one with defaults:
plotHive(test3)
#
# Add axis labels & options to nx = 3 example.  Note that rot is not part of gpar
require("grid")
plotHive(test3, ch = 5, labs = c("axis 1", "axis 2", "axis 3"),
lab.pos = c(10, 15, 15), lab.gpar = gpar(col = "orange", fontsize = 14),
rot = c(0, 30, -30))
#
# Now the nx = 2 case.
# Note that gpar contains parameters that apply to both the
# axis labels and arrow. A 6th value in arrow offsets the arrow vertically:
plotHive(test2, ch = 5, labs = c("axis 1", "axis 2"), rot = c(-90, 90),
lab.pos = c(20, 20), lab.gpar = gpar(col = "pink", fontsize = 14, lwd = 2),
arrow = c("radius units", 0, 20, 60, 25, 40))
# The following must be run interactively:
## Not run:
plot3dHive(test4)
test2
plotHive(hive3)
plotHive(hive3)
library("HiveR")
plotHive(hive3)
library(Scribe)
library(Scribe)
440.85 - 276.66
library(Scribe)
library(rEDM)
?rEDM
library(lmtest)
?lmtest
lmtest
lrtest()
lrtest
?lrtest
library(Scribe)
library(parallel)
library(reshape2)
?VAR
??VAR
library(VariantAnnotation)
library(Var)
#library(V)
library(vars)
VAR
?VAR
causality
library(infotheo)
infotheo::condinformation
?infotheo::condinformation
parmigene::knnmi.all
devtools::use_vignette("Scribe-vignette")
library(Scribe)
tools::showNonASCII(readLines("./vignettes/Scribe-vignette.Rmd"))
tools::showNonASCII(readLines("./vignettes/Scribe-vignette.Rmd"))
q()
library(monocle)
rm(list = ls())
Molly <- readRDS('https://files.slack.com/files-pri/T087RFGR1-F71FY1J8M/download/andrew_test.rds')
Molly <- readRDS('/Users/xqiu/Downloads/andrew_test.rds')
DE_results <- differentialGeneTest(Molly, fullModelFormulaStr = "~gRNA_detected", verbose = T)
pData(Molly)$gRNA_detected
pData(Molly)$gRNA_detected[is.na(pData(Molly)$gRNA_detected)] <- T
DE_results <- differentialGeneTest(Molly, fullModelFormulaStr = "~gRNA_detected", verbose = T)
DE_results
Molly <- readRDS('/Users/xqiu/Downloads/andrew_test.rds')
table(pData(Molly)$gRNA_detected)
is.na(pData(Molly)$gRNA_detected)
sum(is.na(pData(Molly)$gRNA_detected))
#is.na(pData(Molly)$gRNA_detected))
Molly <- Molly[, !is.na(pData(Molly)$gRNA_detected)]
DE_results <- differentialGeneTest(Molly, fullModelFormulaStr = "~gRNA_detected", verbose = T)
DE_results
Molly

informative_genes <- setdiff(fData(lung)$gene_short_name, TF)
informative_genes
wired(lung, TF, informative_genes)
gene_name_ids
informative_genes
TF
unique(TF, informative_genes)
library(devtools)
library(Scribe)
wired(lung, TF, informative_genes)
cds <- lung
TF
informative_genes
TF_vec_names <- intersect(TF, informative_genes)
target_vec_names <- setdiff(informative_genes, TF)
unique_gene <- unique(c(TF, informative_genes))
gene_name_ids <- row.names(subset(fData(cds), gene_short_name %in% unique_gene))
unique_gene
gene_name_ids
length(unique_gene)
length(gene_name_ids)
fData(cds)$gene_short_name
duplicated(fData(cds)$gene_short_name)
fData(cds)$gene_short_name[duplicated(fData(cds)$gene_short_name)]
fData(cds)$gene_short_name
which(duplicated(fData(cds)$gene_short_name))
which(fData(cds)$gene_short_name == 'Qk')
exprs(cds)[c(158, 189), 1:10]
exprs(cds)[c(158, 189), ]
library(devtools)
load_all()
debounce
?debounce
debug(wired)
wired(lung, TF, informative_genes)
TF_vec_names
#wired(lung, TF, informative_genes)
TF
informative_genes
wired(lung, TF, informative_genes)
intersect(TF, informative_genes)
TF
informative_genes
informative_genes <- fData(lung)$gene_short_name
wired(lung, TF, informative_genes)
TF_vec_names
target_vec_names
unique_gene
TF
informative_genes
informative_genes <- as.character(fData(lung)$gene_short_name)
wired(lung, TF, informative_genes)
target_vec_names
unique_gene
informative_genes <- setdiff(informative_genes, "Qk")
informative_genes
setdiff(informative_genes, "Qk")
length(setdiff(informative_genes, "Qk"))
informative_genes
lung
informative_genes <- setdiff(informative_genes, "Qk")
wired(lung, TF, informative_genes)
wired(lung, TF, informative_genes)
TF_pair
tmp
colnames(exprs_data)
exprs_data <- t(exprs_data)
colnames(exprs_data)
load_all()
#wired(lung, TF, informative_genes)
debug(wired)
wired(lung, TF, informative_genes)
TF <- c('H19', 'Ccnd2', 'Ccnd2', 'Scnn1g'); TF_id <- row.names(subset(fData(lung), gene_short_name %in% TF))
informative_genes_id <- row.names(lung)
wired(lung, TF_id, informative_genes_id)
dim(exprs_data)
exprs_data <- t(exprs_data)
tmp
tmp <- rbind(TF_pair, TF_target_pair)
tmp[, 1] <- match(tmp[, 1], colnames(exprs_data))
tmp[, 2] <- match(tmp[, 2], colnames(exprs_data))
load_all()
debug(wired)
wired(lung, TF_id, informative_genes_id)
tmp
tmp
delays
tmp
dim(exprs_data)
delays <- 1
calculate_rdi
load_all()
debug(wired)
wired(lung, TF_id, informative_genes_id)
wired(lung, TF_id, informative_genes_id)
tmp
cds_subset
max(tmp)
calculate_rdi
tmp <- all_pairwise_gene
wired(lung, TF_id, informative_genes_id)
load_all()
debug(wired)
wired(lung, TF_id, informative_genes_id)
wired(lung, TF_id, informative_genes_id)
range(all_pairwise_gene)
debug(calculate_rdi)
genes_data
load_all()
debug(wired)
wired(lung, TF_id, informative_genes_id)
calculate_rdi(cds_subset, delays = delays, super_graph = all_pairwise_gene, ...) # run RDI
debug(calculate_rdi)
calculate_rdi(cds_subset, delays = delays, super_graph = all_pairwise_gene, ...) # run RDI
n_genes
n_samples
max(super_graph)
min(super_graph)
max(super_graph) >  n_samples - 1 | min(super_graph) < 0
n_samples
n_genes <- 218
load_all()
debug(wired)
wired(lung, TF_id, informative_genes_id)
calculate_rdi(cds_subset, delays = delays, super_graph = all_pairwise_gene, ...)
calculate_conditioned_rdi
load_all()
debug(wired)
wired(lung, TF_id, informative_genes_id)
cor(exprs(lung))
cor(t(exprs(lung)))
load_all()
debug(wired)
wired(lung, TF_id, informative_genes_id, cluster_num_method = 'mcclust', smoothing = T, include_conditioning = T, cluster_targets = T, cluster_TFs = T)
wired(lung, TF_id, informative_genes_id, cluster_num_method = 'mcclust', smoothing = T, include_conditioning = T, cluster_targets = T, cluster_TFs = T)
nrow(exprs_data)
for(i in 1:ncol(exprs_data)) {
df <- data.frame(Pseudotime = 1:ncol(exprs_data), Expression = exprs_data[i, ])
test <- loess(Expression ~ Pseudotime, df)
exprs_data[i, ] <-  predict(test)
}
load_all()
debug(wired)
wired(lung, TF_id, informative_genes_id, cluster_num_method = 'mcclust', smoothing = T, include_conditioning = T, cluster_targets = T, cluster_TFs = T)
scale
scale <- T
m
load_all()
debug(wired)
wired(lung, TF_id, informative_genes_id, cluster_num_method = 'mcclust', smoothing = T, include_conditioning = T, cluster_targets = T, cluster_TFs = T)
??Mclust
mclust::mcclust
mclust::Mclust
?pamk
??pamk
debug(wired)
load_all()
debug(wired)
wired(lung, TF_id, informative_genes_id, cluster_num_method = 'mcclust', smoothing = T, include_conditioning = T, cluster_targets = T, cluster_TFs = T)
scale <- T
library(mclust)
library(fpac)
library(fpc)
wired(lung, TF_id, informative_genes_id, cluster_num_method = 'mcclust', smoothing = T, include_conditioning = T, cluster_targets = T, cluster_TFs = T)
wired(lung, TF_id, informative_genes_id, cluster_num_method = 'mcclust', smoothing = T, include_conditioning = T, cluster_targets = T, cluster_TFs = T)
cluster_TFs_num
cluster_targets_num
dissimilarity_mat_tfs <- 1 - cor(t(m_tfs));
dissimilarity_mat_targets <- 1 - cor(t(m_targets));
clust_num_check_tfs <- fpc::pamk(dissimilarity_mat_tfs, diss = T)
clust_num_check_targets <- fpc::pamk(dissimilarity_mat_targets, diss = T)
cluster_TFs_num <- clust_num_check_tfs$nc
cluster_targets_num <- clust_num_check_targets$nc
row_dist <- as.dist((1 - cor(Matrix::t(m_tfs)))/2)
row_dist[is.na(row_dist)] <- 1
m_hclust <- hclust(row_dist, method = hclust_method) # $order, ]
?Mclust
debug(wired)
wired(lung, TF_id, informative_genes_id, cluster_num_method = 'mcclust', smoothing = T, include_conditioning = T, cluster_targets = T, cluster_TFs = T)
load_all()
wired(lung, TF_id, informative_genes_id, cluster_num_method = 'mcclust', smoothing = T, include_conditioning = T, cluster_targets = T, cluster_TFs = T)
load_all()
debug(wired)
wired(lung, TF_id, informative_genes_id, cluster_num_method = 'mcclust', smoothing = T, include_conditioning = T, cluster_targets = T, cluster_TFs = T)
dim(m_targets)
dissimilarity_mat_tfs <- 1 - cor(t(m_tfs));
dissimilarity_mat_targets <- 1 - cor(t(m_targets));
clust_num_check_tfs <- fpc::pamk(dissimilarity_mat_tfs, diss = T)
clust_num_check_targets <- fpc::pamk(dissimilarity_mat_targets, diss = T)
hclust_method
clust_num_check_tfs <- fpc::pamk(dissimilarity_mat_tfs, diss = T)
?pamk
row_dist
dissimilarity_mat_tfs
clust_num_check_targets
dissimilarity_mat_targets
fpc::pamk(dissimilarity_mat_targets, diss = T)
fpc::pamk(dissimilarity_mat_tfs, diss = T)
fpc::pamk(dissimilarity_mat_tfs, diss = T, krange  = 2)
fpc::pamk(dissimilarity_mat_tfs, diss = T, krange  = 2:3)
m_hclust
cluster_TFs_num
Cluster=factor(cutree(m_hclust, cluster_TFs_num))
factor(cutree(m_hclust, cluster_TFs_num))
annotation_TF_cluster
for(cluster_ind in 1:cluster_TFs_num) {
cell_inds <- annotation_TF_cluster$Cluster == cluster_ind
m_TFs_clusters[, cluster_ind] <- rowMeans(m_tfs[cell_inds, ])
}
load_all()
debug(wired)
wired(lung, TF_id, informative_genes_id, cluster_num_method = 'mcclust', smoothing = T, include_conditioning = T, cluster_targets = T, cluster_TFs = T)
wired(lung, TF_id, informative_genes_id, cluster_num_method = 'mcclust', smoothing = T, include_conditioning = T, cluster_targets = T, cluster_TFs = T)
m_TFs_clusters[, cluster_ind] <- rowMeans(m_tfs[cell_inds, ])
cell_inds
m_tfs
annotation_TF_cluster$Cluster
cluster_TFs_num
rowMeans(m_tfs[cell_inds, ])
m_TFs_clusters
rowMeans(m_tfs[, cell_inds])
m_tfs
colMeans(m_tfs[cell_inds, ])
m_TFs_clusters[, cluster_ind] <- colMeans(m_tfs[cell_inds, ])
load_all()
debug(wired)
wired(lung, TF_id, informative_genes_id, cluster_num_method = 'mcclust', smoothing = T, include_conditioning = T, cluster_targets = T, cluster_TFs = T)
load_all()
load_all()
debug(wired)
wired(lung, TF_id, informative_genes_id, cluster_num_method = 'mcclust', smoothing = T, include_conditioning = T, cluster_targets = T, cluster_TFs = T)
cluster_targets_num
colnames(m_TFs_clusters)
target_vec_names
TF_pair
all_pairwise_gene
TF_pair
tmp <- rbind(TF_pair, TF_target_pair)
exprs_data
exprs_data[1:5, 1:5]
tmp[, 1]
match(tmp[, 1], colnames(exprs_data))
tmp
TF_vec_names
target_vec_names
target_vec_names <- colnames(m_targets_clusters)
target_vec_names
exprs_data <- cbind(m_TFs_clusters, m_targets_clusters)
exprs_data[1:5, ]
qplot(1:nrow(exprs_data), exprs_data[, 1])
qplot(1:nrow(exprs_data), exprs_data[, 2])
qplot(1:nrow(exprs_data), exprs_data[, 3])
qplot(1:nrow(exprs_data), exprs_data[, 4])
qplot(1:nrow(exprs_data), exprs_data[, 5])
qplot(1:nrow(exprs_data), exprs_data[, 6])
qplot(1:nrow(exprs_data), exprs_data[, 7])
qplot(1:nrow(exprs_data), exprs_data[, 8])
qplot(1:nrow(exprs_data), exprs_data[, 9])
qplot(1:nrow(exprs_data), exprs_data[, 10])
exprs_data <- cbind(m_TFs_clusters, m_targets_clusters)
TF_pair <- expand.grid(TF_vec_names, TF_vec_names, stringsAsFactors = F) # between TFs
TF_target_pair <- expand.grid(TF_vec_names, target_vec_names, stringsAsFactors = F)
TF_pair
TF_target_pair
tmp <- rbind(TF_pair, TF_target_pair)
tmp[, 1] <- match(tmp[, 1], colnames(exprs_data))
tmp[, 2] <- match(tmp[, 2], colnames(exprs_data))
tmp
calculate_conditioned_rdi_cpp_wrap
load_all()
debug(wired)
wired(lung, TF_id, informative_genes_id, cluster_num_method = 'mcclust', smoothing = T, include_conditioning = T, cluster_targets = T, cluster_TFs = T)
load_all()
debug(wired)
wired(lung, TF_id, informative_genes_id, cluster_num_method = 'mcclust', smoothing = T, include_conditioning = T, cluster_targets = T, cluster_TFs = T)
calculate_rdi_cpp_wrap(as.matrix(exprs_data), delays = delays, super_graph = as.matrix(all_pairwise_gene), turning_points = 0, method = 1, uniformalize = F)
calculate_conditioned_rdi_cpp_wrap(as.matrix(exprs_data), super_graph = as.matrix(all_pairwise_gene),
max_rdi_value = RDI_res$max_rdi_value, max_rdi_delays = RDI_res$max_rdi_delays, k = 1, uniformalize = FALSE)
load_all()
library(Scribe)
getwd()
library(Scribe)
umi(x, y)
umi(x, y, k = 5)
umi(x, y, k = 5, method = 1, k_density = 5, bw = 0.01)
x
y
umi(matrix(x, ncol = 1), matrix(y, ncol = 1), k = 5, method = 1, k_density = 5, bw = 0.01)
library(Scribe)
x5 <- read.csv('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Python_code/x10_ucmi.txt', header = F)
y5 <- read.csv('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Python_code/y10_ucmi.txt', header = F)
z5 <- read.csv('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Python_code/z10_ucmi.txt', header = F)
weight <- read.csv('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Python_code/weight.txt', header = F)
ucmi_res <-ucmi(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), as.matrix(z5, ncol = 1), k = 5, method = 1, k_density = 0, bw = 0, weight = weight$V1)
ucmi_res <-ucmi(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), as.matrix(z5, ncol = 1), k = 5, method = 1, k_density = 0, bw = 0)
as.matrix(x5$V1, ncol = 1)
as.matrix(x5, ncol = 1)
matrix(x5, ncol = 1)
#matrix(x5, ncol = 1)
umi(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), k = 5, method = 1, k_density = 5, bw = 0.01)
x5$V1
#umi(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), k = 5, method = 1, k_density = 5, bw = 0.01)
as.matrix(x5, ncol = 1)
#umi(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), k = 5, method = 1, k_density = 5, bw = 0.01)
as.matrix(y5, ncol = 1)
#umi(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), k = 5, method = 1, k_density = 5, bw = 0.01)
x5 <- read.csv('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Python_code/x10_ucmi.txt', header = F)
y5 <- read.csv('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Python_code/y10_ucmi.txt', header = F)
z5 <- read.csv('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Python_code/z10_ucmi.txt', header = F)
weight <- read.csv('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Python_code/weight.txt', header = F)
library(Scribe)
umi(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), k = 5, method = 1, k_density = 5, bw = 0.01)
library(Scribe)
umi(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), k = 5, method = 1, k_density = 5, bw = 0.01)
mi(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), k = 5)
mi(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), k = 5, normalize = F)
kde_cpp
x5 <- read.csv('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Python_code/x10_ucmi.txt', header = F)
y5 <- read.csv('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Python_code/y10_ucmi.txt', header = F)
z5 <- read.csv('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Python_code/z10_ucmi.txt', header = F)
weight <- read.csv('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Python_code/weight.txt', header = F)
mi(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), k = 5, normalize = F)
umi(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), k = 5, method = 1, k_density = 5, bw = 0.01)
umi(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), k = 5, method = 1, k_density = 5, bw = 0.01)
library(Scribe)
weight_umi <- read.csv('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Python_code/weight_umi.txt', header = F)
x5$V1
kde_cpp_res <- kde_cpp(as.matrix(x5)) # this is very slow
#kde_cpp_res <- kde_cpp(as.matrix(x5)) # this is very slow
kde_cpp_res
kde_cpp_res$
;
qplot(t((1 / kde_cpp_res) / mean(1 / kde_cpp_res)), weight_umi)
weight_umi$V1
qplot(t((1 / kde_cpp_res) / mean(1 / kde_cpp_res)), weight_umi$V1)
t((1 / kde_cpp_res) / mean(1 / kde_cpp_res))
((1 / kde_cpp_res) / mean(1 / kde_cpp_res))
qplot(as.vector((1 / kde_cpp_res) / mean(1 / kde_cpp_res)), weight_umi$V1)
load_all()
load_all()
library(Scribe)
umi(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), k = 5, method = 1, k_density = 5, bw = 0.01, weight = weight_umi)
umi_cpp(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), k = 5, method = 1, k_density = 5, bw = 0.01, weight = weight_umi)
umi_cpp(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), k = 5, method = 1, k_density = 5, bw = 0.01, weight = weight_umi$V1)
#qplot(as.vector((1 / kde_cpp_res) / mean(1 / kde_cpp_res)), weight_umi$V1)
as.vector((1 / kde_cpp_res) / mean(1 / kde_cpp_res))[1:10]
library(Scribe)
umi_cpp(as.matrix(x5, ncol = 1), as.matrix(y5, ncol = 1), k = 5, method = 1, k_density = 5, bw = 0.01)
library(Scribe)
#qplot(as.vector((1 / kde_cpp_res) / mean(1 / kde_cpp_res)), weight_umi$V1)
qplot(x5)
qplot(x5, weight_umi$V1)
qplot(x5, as.vector((1 / kde_cpp_res) / mean(1 / kde_cpp_res)))
qplot(x5, geom = 'density')
?kde2d
# Simulate some data and put in data frame DF
n <- 100
x <- rnorm(n)
y <- 3 + 2* x * rexp(n) + rnorm(n)
# add some outliers
y[sample(1:n,20)] <- rnorm(20,20,20)
DF <- data.frame(x,y)
# Calculate 2d density over a grid
library(MASS)
dens <- kde2d(x,y)
# create a new data frame of that 2d density grid
# (needs checking that I haven't stuffed up the order here of z?)
gr <- data.frame(with(dens, expand.grid(x,y)), as.vector(dens$z))
names(gr) <- c("xgr", "ygr", "zgr")
# Fit a model
mod <- loess(zgr~xgr*ygr, data=gr)
# Apply the model to the original data to estimate density at that point
DF$pointdens <- predict(mod, newdata=data.frame(xgr=x, ygr=y))
# Draw plot
library(ggplot2)
ggplot(DF, aes(x=x,y=y, color=pointdens)) + geom_point()
DF
with(dens, expand.grid(x,y))
#with(dens, expand.grid(x,y))
x
y
expand.grid(x, y)[1:5, ]
dim(expand.grid(x, y))
getwd()
getwd()
library(Scribe)
library(Scribe)
library(Scribe)
dim(expand.grid(x, y))
getwd()
library(Scribe)
library(Scribe)
library(Scribe)
?plot_hive_network
umi
umi_cpp
?umi
library(Scribe)
calculate_umi_cpp_wrap
library(Scribe)
calculate_umi(AT1_lung, delays = 10, method = 1)
lung <- load_lung()
AT1_lung <- lung[, pData(lung)$State %in% c(2, 3)]
calculate_umi(AT1_lung, delays = 10, method = 1)
scale_color_viridis
q()
library(Scribe)
library(Scribe)
library(Scribe)
dcast
?dcast
library(Scribe)
plot_hive_network
library(Scribe)
library(Scribe)
getwd()
q()
q()
library(Scribe)
plot_comb_logic
plot_lagged_drevi
getwd()
calculate_rdi
hc = hclust(dist(mtcars))
# very simple dendrogram
plot(hc)
hc$merge
hclust()
hc$height
hc$order
hc$labels
hc$method
hc$dist.method
names(hc)
dendro_data(hc, type = "rectangle")
library(ggdendro)
dhc <- as.dendrogram(model)
# Rectangular lines
ddata <- dendro_data(dhc, type = "rectangle")
p <- ggplot(segment(ddata)) +
;
ddata
model <- hclust(dist(USArrests), "ave")
dhc <- as.dendrogram(model)
# Rectangular lines
ddata <- dendro_data(dhc, type = "rectangle")
ddata
dendro_data
estimateDispersions
lung
lung <- load_lung()
library(monocle)
lung <- load_lung()
lung@dispFitInfo$blind
lung@dispFitInfo$blind$disp_func()
lung@dispFitInfo$blind$disp_func(0.1)
library(monocle)
lung <- load_lung()
class(exprs(lung))
class(exprs(lung)) <- 'data.frame'
c(1:4)
class(c(1:4)) <- "character"
a <- 1:4
class(a) <- "character"
a
exportCDS(lung)
test <- exportCDS(lung)
class(test@raw.data)
class(test@raw.data) <- "data.frame"
sparseMatrix
?sparseMatrix
i <- c(1,3:8); j <- c(2,9,6:10); x <- 7 * (1:7)
(A <- sparseMatrix(i, j, x = x))                    ##  8 x 10 "dgCMatrix"
class(A)
class(test@raw.data) <- ""dgCMatrix""
class(test@raw.data) <- "dgCMatrix"
test@raw.data
class(A)
A
class(A) <- "matrix"
A
A <- as.matrix(A)
class(A)
class(A) <- "data.frame"
A
A
getwd()
devtools::install_github("JinmiaoChenLab/Rphenograph")
iris_unique <- unique(iris) # Remove duplicates
data <- as.matrix(iris_unique[,1:4])
Rphenograph_out <- Rphenograph(data, k = 45)
modularity(Rphenograph_out[[2]])
library(Rphenograph)
iris_unique <- unique(iris) # Remove duplicates
data <- as.matrix(iris_unique[,1:4])
Rphenograph_out <- Rphenograph(data, k = 45)
modularity(Rphenograph_out[[2]])
ggplot(iris_unique, aes(x=Sepal.Length, y=Sepal.Width, col=Species, shape=phenograph_cluster)) + geom_point(size = 3)+theme_bw()
getwd()
library(devtools)
install_github("velocyto-team/velocyto.R")
#install.packages(install.packages(c('rsvd', 'FastKNN','smacof')))
install.packages(c('rsvd', 'FastKNN','smacof'))
load('/Users/xqiu/Dropbox (Personal)/Projects/DDRTree_fstree/DDRTree_fstree/RData/all_wt_GSE72857_cds')
erythroid_network <- read.table('./csv_data/erythroid_network.txt', sep = '\t', header = T)
erythroid_network <- read.table(''/Users/xqiu/Dropbox (Personal)/Projects/DDRTree_fstree/DDRTree_fstree/csv_data/erythroid_network.txt', sep = '\t', header = T)
erythroid_network <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/DDRTree_fstree/DDRTree_fstree/csv_data/erythroid_network.txt', sep = '\t', header = T)
erythroid_network <- read.table("/Users/xqiu/Dropbox (Personal)/Projects/DDRTree_fstree/DDRTree_fstree/csv_data/erythroid_network.txt", sep = '\t', header = T)
erythroid_network <- read.table("/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network//csv_data/erythroid_network.txt", sep = '\t', header = T)
erythroid_network
1347 + 337 + 268 + 341 + 473 + 489
q()

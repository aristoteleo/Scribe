tmp <- sum(w * subset_dat)
flat_res[f_ini_ind + index, ] <- c(xy_query[index, ], tmp, gene_pair_name)
}
# row-scale the data
vals <- as.numeric(flat_res[c(f_ini_ind + 1):c(f_ini_ind + nrow(dist_mat)), 3])
max_val <- max(vals, na.rm = T)
if(!is.finite(max_val))
max_val <- 1e10
print(max_val)
for(index in 1:nrow(dist_mat)) {
flat_res[f_ini_ind + index, 3] <- as.numeric(flat_res[f_ini_ind + index, 3])  / max_val
}
id <- id + 1
}
flat_res[, 1:3] <- as.matrix(flat_res[, 1:3])
flat_res[, 4] <- factor(flat_res[, 4], levels = unique(flat_res[, 4]))
ggplot(aes(as.numeric(x), as.numeric(z)), data = flat_res) +  geom_raster(aes(fill = as.numeric(expected_y))) +
scale_fill_gradientn(expression(paste("Expection (", "z", phantom()[{
paste("t")
}], ")", "")), colours = terrain.colors(10)) +
# geom_rug(aes(as.numeric(x), as.numeric(y)), data = xy, col="darkred",alpha=.1) +
# geom_path(aes(as.numeric(x), as.numeric(y)), data  = ridge_curve, color = 'red') +
facet_wrap(~pair, scales = scales, nrow = n_row, ncol = n_col) +
xlab( expression(paste("Source (", "x", phantom()[{
paste("t", phantom() - phantom(), d)
}], ")", ""))) +
ylab(expression(paste("Source (", "y", phantom()[{
paste("t", phantom() - phantom(), "1")
}], ")", ""))) + monocle:::monocle_theme_opts()
}
fData(neuron_sim_cds)$gene_short_name <- fData(neuron_sim_cds)$gene_short_names
plot_comb_logic_heatmap(neuron_sim_cds, combinatorial_logic_net, n_col = 3, n_row = 3)
plot_comb_logic_heatmap <- function(cds_subset, gene_pairs_target_mat,
log = FALSE,
d = 1,
grid_num = 25,
n_row = NULL,
n_col = 1,
scales = "free",
verbose = FALSE) {
gene_pairs_target_mat <- as.matrix(gene_pairs_target_mat)
all_genes_in_pair <- as.vector(gene_pairs_target_mat)
if(! all(all_genes_in_pair %in% fData(cds_subset)$gene_short_name)) {
stop("cds_subset doesn't include all genes in gene_pairs_target_mat Make sure all genes are included in gene_short_name column of the cds")
}
cds_subset <- cds_subset[row.names(subset(fData(cds_subset), gene_short_name %in% all_genes_in_pair)), ]
flat_res <- as.data.frame(matrix(0, nrow = grid_num^2  * nrow(gene_pairs_target_mat), ncol = 4))
colnames(flat_res) <- c("x", "z", "expected_y", "pair")
# xy <- data.frame()
id <- 0
for(gene_pairs_ind in 1:nrow(gene_pairs_target_mat))  {
# gene_pairs_ind <- 1
if(verbose)
message("current gene pair is ",  paste0(gene_pairs[1], " : ", gene_pairs[2], " -> ", gene_pairs[3]))
gene_pairs <- gene_pairs_target_mat[gene_pairs_ind, ]
f_ini_ind <- grid_num^2 * id #flat_res (normalized density results)
gene_pair_name <- paste0(gene_pairs[1], " : ", gene_pairs[2], " -> ", gene_pairs[3])
x <- matrix(exprs(cds_subset)[row.names(subset(fData(cds_subset), gene_short_name %in% gene_pairs[1])), ], ncol = 1)
y <- matrix(exprs(cds_subset)[row.names(subset(fData(cds_subset), gene_short_name %in% gene_pairs[2])), ], ncol = 1)
z <- matrix(exprs(cds_subset)[row.names(subset(fData(cds_subset), gene_short_name %in% gene_pairs[3])), ], ncol = 1)
if(log) {
x <- log(x + 1)
y <- log(y + 1)
z <- log(z + 1)
}
data <- data.frame(x = x, y = y, z = z)
rng_x <- range(x)
rng_y <- range(y)
x_meshgrid <- seq(rng_x[1], rng_x[2], length.out = grid_num)
y_meshgrid <- seq(rng_y[1], rng_y[2], length.out = grid_num)
xy_meshgrid <- meshgrid(x_meshgrid, y_meshgrid)
xy_query <- matrix(c(as.vector(xy_meshgrid$X), as.vector(xy_meshgrid$Y)), ncol = 2)
knn_res <- RANN::nn2(data[, 1:2], query = xy_query, k = k + 1)
dist_mat <- apply(knn_res$nn.idx, 1, function(x) {
abs(data[x[-1], 3] - data[x[1], 3])
})
dist_mat <- knn_res$nn.dists
for(index in 1:nrow(dist_mat)) {
u <- exp(-dist_mat[index, -1]/ min(dist_mat[index, -1]))
w <- u / sum(u)
subset_dat <- data[knn_res$nn.idx[index, -1], 3]
tmp <- sum(w * subset_dat)
flat_res[f_ini_ind + index, ] <- c(xy_query[index, ], tmp, gene_pair_name)
}
# # row-scale the data
# vals <- as.numeric(flat_res[c(f_ini_ind + 1):c(f_ini_ind + nrow(dist_mat)), 3])
# max_val <- max(vals, na.rm = T)
# if(!is.finite(max_val))
#     max_val <- 1e10
# print(max_val)
# for(index in 1:nrow(dist_mat)) {
#   flat_res[f_ini_ind + index, 3] <- as.numeric(flat_res[f_ini_ind + index, 3])  / max_val
# }
id <- id + 1
}
flat_res[, 1:3] <- as.matrix(flat_res[, 1:3])
flat_res[, 4] <- factor(flat_res[, 4], levels = unique(flat_res[, 4]))
ggplot(aes(as.numeric(x), as.numeric(z)), data = flat_res) +  geom_raster(aes(fill = as.numeric(expected_y))) +
scale_fill_gradientn(expression(paste("Expection (", "z", phantom()[{
paste("t")
}], ")", "")), colours = terrain.colors(10)) +
# geom_rug(aes(as.numeric(x), as.numeric(y)), data = xy, col="darkred",alpha=.1) +
# geom_path(aes(as.numeric(x), as.numeric(y)), data  = ridge_curve, color = 'red') +
facet_wrap(~pair, scales = scales, nrow = n_row, ncol = n_col) +
xlab( expression(paste("Source (", "x", phantom()[{
paste("t", phantom() - phantom(), d)
}], ")", ""))) +
ylab(expression(paste("Source (", "y", phantom()[{
paste("t", phantom() - phantom(), "1")
}], ")", ""))) + monocle:::monocle_theme_opts()
}
fData(neuron_sim_cds)$gene_short_name <- fData(neuron_sim_cds)$gene_short_names
plot_comb_logic_heatmap(neuron_sim_cds, combinatorial_logic_net, n_col = 3, n_row = 3)
plot_comb_logic_heatmap <- function(cds_subset, gene_pairs_target_mat,
log = FALSE,
d = 1,
grid_num = 25,
n_row = NULL,
n_col = 1,
scales = "free",
verbose = FALSE) {
gene_pairs_target_mat <- as.matrix(gene_pairs_target_mat)
all_genes_in_pair <- as.vector(gene_pairs_target_mat)
if(! all(all_genes_in_pair %in% fData(cds_subset)$gene_short_name)) {
stop("cds_subset doesn't include all genes in gene_pairs_target_mat Make sure all genes are included in gene_short_name column of the cds")
}
cds_subset <- cds_subset[row.names(subset(fData(cds_subset), gene_short_name %in% all_genes_in_pair)), ]
flat_res <- as.data.frame(matrix(0, nrow = grid_num^2  * nrow(gene_pairs_target_mat), ncol = 4))
colnames(flat_res) <- c("x", "z", "expected_y", "pair")
# xy <- data.frame()
id <- 0
for(gene_pairs_ind in 1:nrow(gene_pairs_target_mat))  {
# gene_pairs_ind <- 1
if(verbose)
message("current gene pair is ",  paste0(gene_pairs[1], " : ", gene_pairs[2], " -> ", gene_pairs[3]))
gene_pairs <- gene_pairs_target_mat[gene_pairs_ind, ]
f_ini_ind <- grid_num^2 * id #flat_res (normalized density results)
gene_pair_name <- paste0(gene_pairs[1], " : ", gene_pairs[2], " -> ", gene_pairs[3])
x <- matrix(exprs(cds_subset)[row.names(subset(fData(cds_subset), gene_short_name %in% gene_pairs[1])), ], ncol = 1)
y <- matrix(exprs(cds_subset)[row.names(subset(fData(cds_subset), gene_short_name %in% gene_pairs[2])), ], ncol = 1)
z <- matrix(exprs(cds_subset)[row.names(subset(fData(cds_subset), gene_short_name %in% gene_pairs[3])), ], ncol = 1)
if(log) {
x <- log(x + 1)
y <- log(y + 1)
z <- log(z + 1)
}
data <- data.frame(x = x, y = y, z = z)
rng_x <- range(x)
rng_y <- range(y)
x_meshgrid <- seq(rng_x[1], rng_x[2], length.out = grid_num)
y_meshgrid <- seq(rng_y[1], rng_y[2], length.out = grid_num)
xy_meshgrid <- meshgrid(x_meshgrid, y_meshgrid)
xy_query <- matrix(c(as.vector(xy_meshgrid$X), as.vector(xy_meshgrid$Y)), ncol = 2)
knn_res <- RANN::nn2(data[, 1:2], query = xy_query, k = k + 1)
dist_mat <- apply(knn_res$nn.idx, 1, function(x) {
abs(data[x[-1], 3] - data[x[1], 3])
})
dist_mat <- knn_res$nn.dists
for(index in 1:nrow(dist_mat)) {
u <- exp(-dist_mat[index, -1]/ min(dist_mat[index, -1]))
w <- u / sum(u)
subset_dat <- data[knn_res$nn.idx[index, -1], 3]
tmp <- sum(w * subset_dat)
flat_res[f_ini_ind + index, ] <- c(xy_query[index, ], tmp, gene_pair_name)
}
# # row-scale the data
# vals <- as.numeric(flat_res[c(f_ini_ind + 1):c(f_ini_ind + nrow(dist_mat)), 3])
# max_val <- max(vals, na.rm = T)
# if(!is.finite(max_val))
#     max_val <- 1e10
# print(max_val)
# for(index in 1:nrow(dist_mat)) {
#   flat_res[f_ini_ind + index, 3] <- as.numeric(flat_res[f_ini_ind + index, 3])  / max_val
# }
id <- id + 1
}
flat_res[, 1:3] <- as.matrix(flat_res[, 1:3])
flat_res[, 4] <- factor(flat_res[, 4], levels = unique(flat_res[, 4]))
ggplot(aes(as.numeric(x), as.numeric(z)), data = flat_res) +  geom_raster(aes(fill = as.numeric(expected_y))) +
scale_fill_gradientn(expression(paste("Expection (", "z", phantom()[{
paste("t")
}], ")", "")), colours = terrain.colors(10)) +
# geom_rug(aes(as.numeric(x), as.numeric(y)), data = xy, col="darkred",alpha=.1) +
# geom_path(aes(as.numeric(x), as.numeric(y)), data  = ridge_curve, color = 'red') +
facet_wrap(~pair, scales = scales, nrow = n_row, ncol = n_col) +
xlab( expression(paste("Source (", "x", ")", ""))) +
ylab(expression(paste("Source (", "y", ")", ""))) + monocle:::monocle_theme_opts()
}
fData(neuron_sim_cds)$gene_short_name <- fData(neuron_sim_cds)$gene_short_names
plot_comb_logic_heatmap(neuron_sim_cds, combinatorial_logic_net, n_col = 3, n_row = 3)
plot_comb_logic_heatmap <- function(cds_subset, gene_pairs_target_mat,
log = FALSE,
d = 1,
grid_num = 25,
n_row = NULL,
n_col = 1,
scales = "free",
verbose = FALSE) {
gene_pairs_target_mat <- as.matrix(gene_pairs_target_mat)
all_genes_in_pair <- as.vector(gene_pairs_target_mat)
if(! all(all_genes_in_pair %in% fData(cds_subset)$gene_short_name)) {
stop("cds_subset doesn't include all genes in gene_pairs_target_mat Make sure all genes are included in gene_short_name column of the cds")
}
cds_subset <- cds_subset[row.names(subset(fData(cds_subset), gene_short_name %in% all_genes_in_pair)), ]
flat_res <- as.data.frame(matrix(0, nrow = grid_num^2  * nrow(gene_pairs_target_mat), ncol = 4))
colnames(flat_res) <- c("x", "y", "expected_z", "pair")
# xy <- data.frame()
id <- 0
for(gene_pairs_ind in 1:nrow(gene_pairs_target_mat))  {
# gene_pairs_ind <- 1
if(verbose)
message("current gene pair is ",  paste0(gene_pairs[1], " : ", gene_pairs[2], " -> ", gene_pairs[3]))
gene_pairs <- gene_pairs_target_mat[gene_pairs_ind, ]
f_ini_ind <- grid_num^2 * id #flat_res (normalized density results)
gene_pair_name <- paste0(gene_pairs[1], " : ", gene_pairs[2], " -> ", gene_pairs[3])
x <- matrix(exprs(cds_subset)[row.names(subset(fData(cds_subset), gene_short_name %in% gene_pairs[1])), ], ncol = 1)
y <- matrix(exprs(cds_subset)[row.names(subset(fData(cds_subset), gene_short_name %in% gene_pairs[2])), ], ncol = 1)
z <- matrix(exprs(cds_subset)[row.names(subset(fData(cds_subset), gene_short_name %in% gene_pairs[3])), ], ncol = 1)
if(log) {
x <- log(x + 1)
y <- log(y + 1)
z <- log(z + 1)
}
data <- data.frame(x = x, y = y, z = z)
rng_x <- range(x)
rng_y <- range(y)
x_meshgrid <- seq(rng_x[1], rng_x[2], length.out = grid_num)
y_meshgrid <- seq(rng_y[1], rng_y[2], length.out = grid_num)
xy_meshgrid <- meshgrid(x_meshgrid, y_meshgrid)
xy_query <- matrix(c(as.vector(xy_meshgrid$X), as.vector(xy_meshgrid$Y)), ncol = 2)
knn_res <- RANN::nn2(data[, 1:2], query = xy_query, k = k + 1)
dist_mat <- apply(knn_res$nn.idx, 1, function(x) {
abs(data[x[-1], 3] - data[x[1], 3])
})
dist_mat <- knn_res$nn.dists
for(index in 1:nrow(dist_mat)) {
u <- exp(-dist_mat[index, -1]/ min(dist_mat[index, -1]))
w <- u / sum(u)
subset_dat <- data[knn_res$nn.idx[index, -1], 3]
tmp <- sum(w * subset_dat)
flat_res[f_ini_ind + index, ] <- c(xy_query[index, ], tmp, gene_pair_name)
}
# row-scale the data
vals <- as.numeric(flat_res[c(f_ini_ind + 1):c(f_ini_ind + nrow(dist_mat)), 3])
max_val <- max(vals, na.rm = T)
if(!is.finite(max_val))
max_val <- 1e10
print(max_val)
for(index in 1:nrow(dist_mat)) {
flat_res[f_ini_ind + index, 3] <- as.numeric(flat_res[f_ini_ind + index, 3])  / max_val
}
id <- id + 1
}
flat_res[, 1:3] <- as.matrix(flat_res[, 1:3])
flat_res[, 4] <- factor(flat_res[, 4], levels = unique(flat_res[, 4]))
ggplot(aes(as.numeric(x), as.numeric(y)), data = flat_res) +  geom_raster(aes(fill = as.numeric(expected_z))) +
scale_fill_gradientn(expression(paste("Expection (", "z", phantom()[{
paste("t")
}], ")", "")), colours = terrain.colors(10)) +
# geom_rug(aes(as.numeric(x), as.numeric(y)), data = xy, col="darkred",alpha=.1) +
# geom_path(aes(as.numeric(x), as.numeric(y)), data  = ridge_curve, color = 'red') +
facet_wrap(~pair, scales = scales, nrow = n_row, ncol = n_col) +
xlab( expression(paste("Source (", "x", ")", ""))) +
ylab(expression(paste("Source (", "y", ")", ""))) + monocle:::monocle_theme_opts()
}
fData(neuron_sim_cds)$gene_short_name <- fData(neuron_sim_cds)$gene_short_names
plot_comb_logic_heatmap(neuron_sim_cds, combinatorial_logic_net, n_col = 3, n_row = 3)
fData(neuron_sim_cds)$gene_short_name <- fData(neuron_sim_cds)$gene_short_names
plot_comb_logic_heatmap(nao_sim_cds, combinatorial_logic_net, n_col = 3, n_row = 3)
fData(nao_sim_cds)$gene_short_name <- fData(neuron_sim_cds)$gene_short_names
fData(neuron_sim_cds)$gene_short_name <- fData(neuron_sim_cds)$gene_short_names
plot_comb_logic_heatmap(nao_sim_cds, combinatorial_logic_net, n_col = 3, n_row = 3)
dim(all_cell_simulation)
sample(1:200, 50)
all_exprs_mat <- as.matrix(all_cell_simulation[, , sample(1:200, 50)])
dim(all_exprs_mat) <- c(13, 400 * 50)
all_sim_cds <- make_cds(all_exprs_mat, pd3, fd, expressionFamily = negbinomial())
50 * 400
PD3 <- data.frame(Time = rep(1:400, 50), row.names = paste('Cell_', 1:20000, sep = ''))
all_sim_cds <- make_cds(all_exprs_mat, PD3, fd, expressionFamily = negbinomial())
PD3 <- data.frame(Time = rep(1:400, 50), row.names = paste('Cell_', 1:20000, sep = ''))
pd3 <- new("AnnotatedDataFrame",data=PD3)
all_sim_cds <- make_cds(all_exprs_mat, PD3, fd, expressionFamily = negbinomial())
PD3 <- data.frame(Time = rep(1:400, 50), row.names = paste('Cell_', 1:20000, sep = ''))
pd3 <- new("AnnotatedDataFrame",data=PD3)
all_sim_cds <- make_cds(all_exprs_mat, pd3, fd, expressionFamily = negbinomial())
fData(all_sim_cds)$gene_short_name <- fData(all_sim_cds)$gene_short_names
plot_comb_logic_heatmap(all_sim_cds, combinatorial_logic_net)
plot_comb_logic_heatmap(all_sim_cds, combinatorial_logic_net, n_row = 3, n_col = 3)
all_exprs_mat <- as.matrix(all_cell_simulation[, , sample(1:200, 200)])
dim(all_exprs_mat) <- c(13, 400 * 200)
PD3 <- data.frame(Time = rep(1:400, 200), row.names = paste('Cell_', 1:(400 * 200), sep = ''))
pd3 <- new("AnnotatedDataFrame",data=PD3)
all_sim_cds <- make_cds(all_exprs_mat, pd3, fd, expressionFamily = negbinomial())
fData(all_sim_cds)$gene_short_name <- fData(all_sim_cds)$gene_short_names
plot_comb_logic_heatmap(all_sim_cds, combinatorial_logic_net, n_row = 3, n_col = 3)
all_sim_cds
plot_comb_logic_heatmap <- function(cds_subset, gene_pairs_target_mat,
log = FALSE,
d = 1,
grid_num = 25,
n_row = NULL,
n_col = 1,
normalized = TRUE,
scales = "free",
verbose = FALSE) {
gene_pairs_target_mat <- as.matrix(gene_pairs_target_mat)
all_genes_in_pair <- as.vector(gene_pairs_target_mat)
if(! all(all_genes_in_pair %in% fData(cds_subset)$gene_short_name)) {
stop("cds_subset doesn't include all genes in gene_pairs_target_mat Make sure all genes are included in gene_short_name column of the cds")
}
cds_subset <- cds_subset[row.names(subset(fData(cds_subset), gene_short_name %in% all_genes_in_pair)), ]
flat_res <- as.data.frame(matrix(0, nrow = grid_num^2  * nrow(gene_pairs_target_mat), ncol = 4))
colnames(flat_res) <- c("x", "y", "expected_z", "pair")
# xy <- data.frame()
id <- 0
for(gene_pairs_ind in 1:nrow(gene_pairs_target_mat))  {
# gene_pairs_ind <- 1
if(verbose)
message("current gene pair is ",  paste0(gene_pairs[1], " : ", gene_pairs[2], " -> ", gene_pairs[3]))
gene_pairs <- gene_pairs_target_mat[gene_pairs_ind, ]
f_ini_ind <- grid_num^2 * id #flat_res (normalized density results)
gene_pair_name <- paste0(gene_pairs[1], " : ", gene_pairs[2], " -> ", gene_pairs[3])
x <- matrix(exprs(cds_subset)[row.names(subset(fData(cds_subset), gene_short_name %in% gene_pairs[1])), ], ncol = 1)
y <- matrix(exprs(cds_subset)[row.names(subset(fData(cds_subset), gene_short_name %in% gene_pairs[2])), ], ncol = 1)
z <- matrix(exprs(cds_subset)[row.names(subset(fData(cds_subset), gene_short_name %in% gene_pairs[3])), ], ncol = 1)
if(log) {
x <- log(x + 1)
y <- log(y + 1)
z <- log(z + 1)
}
data <- data.frame(x = x, y = y, z = z)
rng_x <- range(x)
rng_y <- range(y)
x_meshgrid <- seq(rng_x[1], rng_x[2], length.out = grid_num)
y_meshgrid <- seq(rng_y[1], rng_y[2], length.out = grid_num)
xy_meshgrid <- meshgrid(x_meshgrid, y_meshgrid)
xy_query <- matrix(c(as.vector(xy_meshgrid$X), as.vector(xy_meshgrid$Y)), ncol = 2)
knn_res <- RANN::nn2(data[, 1:2], query = xy_query, k = k + 1)
dist_mat <- apply(knn_res$nn.idx, 1, function(x) {
abs(data[x[-1], 3] - data[x[1], 3])
})
dist_mat <- knn_res$nn.dists
for(index in 1:nrow(dist_mat)) {
u <- exp(-dist_mat[index, -1]/ min(dist_mat[index, -1]))
w <- u / sum(u)
subset_dat <- data[knn_res$nn.idx[index, -1], 3]
tmp <- sum(w * subset_dat)
flat_res[f_ini_ind + index, ] <- c(xy_query[index, ], tmp, gene_pair_name)
}
# row-scale the data
if(normalized) {
vals <- as.numeric(flat_res[c(f_ini_ind + 1):c(f_ini_ind + nrow(dist_mat)), 3])
max_val <- max(vals, na.rm = T)
if(!is.finite(max_val))
max_val <- 1e10
print(max_val)
for(index in 1:nrow(dist_mat)) {
flat_res[f_ini_ind + index, 3] <- as.numeric(flat_res[f_ini_ind + index, 3])  / max_val
}
}
id <- id + 1
}
flat_res[, 1:3] <- as.matrix(flat_res[, 1:3])
flat_res[, 4] <- factor(flat_res[, 4], levels = unique(flat_res[, 4]))
ggplot(aes(as.numeric(x), as.numeric(y)), data = flat_res) +  geom_raster(aes(fill = as.numeric(expected_z))) +
scale_fill_gradientn(expression(paste("Expection (", "z", phantom()[{
paste("t")
}], ")", "")), colours = terrain.colors(10)) +
# geom_rug(aes(as.numeric(x), as.numeric(y)), data = xy, col="darkred",alpha=.1) +
# geom_path(aes(as.numeric(x), as.numeric(y)), data  = ridge_curve, color = 'red') +
facet_wrap(~pair, scales = scales, nrow = n_row, ncol = n_col) +
xlab( expression(paste("Source (", "x", ")", ""))) +
ylab(expression(paste("Source (", "y", ")", ""))) + monocle:::monocle_theme_opts()
}
all_exprs_mat <- as.matrix(all_cell_simulation[, , sample(1:200, 200)])
dim(all_exprs_mat) <- c(13, 400 * 200)
PD3 <- data.frame(Time = rep(1:400, 200), row.names = paste('Cell_', 1:(400 * 200), sep = ''))
pd3 <- new("AnnotatedDataFrame",data=PD3)
all_sim_cds <- make_cds(all_exprs_mat, pd3, fd, expressionFamily = negbinomial())
fData(all_sim_cds)$gene_short_name <- fData(all_sim_cds)$gene_short_names
plot_comb_logic_heatmap(all_sim_cds, combinatorial_logic_net, n_row = 3, n_col = 3)
plot_comb_logic_heatmap(all_sim_cds, combinatorial_logic_net, n_row = 3, n_col = 3, normalized = F)
all_exprs_mat <- as.matrix(all_cell_simulation[, , sample(1:200, 200)])
dim(all_exprs_mat) <- c(13, 400 * 200)
PD3 <- data.frame(Time = rep(1:400, 200), row.names = paste('Cell_', 1:(400 * 200), sep = ''))
pd3 <- new("AnnotatedDataFrame",data=PD3)
all_sim_cds <- make_cds(all_exprs_mat, pd3, fd, expressionFamily = negbinomial())
fData(all_sim_cds)$gene_short_name <- fData(all_sim_cds)$gene_short_names
plot_comb_logic_heatmap(all_sim_cds, combinatorial_logic_net, n_row = 3, n_col = 3)
x
y
z
qplot(y, z)
qplot(y, z) +
ylab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom() - phantom(), "1")
}], ")", ""))) +
ylab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom())
}], ")", "")))
qplot(y, z) +
xlab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom() - phantom(), "1")
}], ")", ""))) +
ylab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom())
}], ")", "")))
qplot(y, z) +
xlab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom() - phantom(), "1")
}], ")", ""))) +
ylab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom())
}], ")", ""))) + monocle:::monocle_theme_opts()
qplot(x, z) +
xlab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom() - phantom(), "1")
}], ")", ""))) +
ylab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom())
}], ")", ""))) + monocle:::monocle_theme_opts()
x <- exprs(neuron_sim_cds)['Hes5', 1:199]
y <- exprs(neuron_sim_cds)['Mash1', 2:200]
z <- exprs(neuron_sim_cds)['Mash1', 1:199]
qplot(x, z) +
xlab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom() - phantom(), "1")
}], ")", ""))) +
ylab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom())
}], ")", ""))) + monocle:::monocle_theme_opts()
qplot(x, z) +
xlab(expression(paste("Target (", "x", phantom()[{
paste("t", phantom() - phantom(), "1")
}], ")", ""))) +
ylab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom())
}], ")", ""))) + monocle:::monocle_theme_opts()
x <- exprs(neuron_sim_cds)['Brn2', 1:199]
y <- exprs(neuron_sim_cds)['Tuj1', 2:200]
z <- exprs(neuron_sim_cds)['Tuj1', 1:199]
qplot(x, z) +
xlab(expression(paste("Target (", "x", phantom()[{
paste("t", phantom() - phantom(), "1")
}], ")", ""))) +
ylab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom())
}], ")", ""))) + monocle:::monocle_theme_opts()
#plot_rdi_pairs_heatmap(lung_AT1, lung_exam_net[1:5, c(1, 2)], n_col = 5, n_row = 5, grid_num = 25)
plot_rdi_pairs_heatmap
#plot_rdi_pairs_heatmap(neuron_sim_cds, neuron_network, n_col = 5, n_row = 5, grid_num = 25)
neuron_network
plot_rdi_pairs_heatmap(neuron_sim_cds, matrix(c("Mash1", "Hes5"), ncol = 2), n_col = 5, n_row = 5, grid_num = 25)
plot_rdi_pairs_heatmap(neuron_sim_cds, matrix(c("Brn2", "Tuj1"), ncol = 2), n_col = 5, n_row = 5, grid_num = 25)
plot_rdi_pairs_heatmap
qplot(x, z, color = x) +
xlab(expression(paste("Target (", "x", phantom()[{
paste("t", phantom() - phantom(), "1")
}], ")", ""))) +
ylab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom())
}], ")", ""))) + monocle:::monocle_theme_opts() + scale_color_gradientn(colours = terrain.colors(10))
qplot(x, y, color = x) +
xlab(expression(paste("Target (", "x", phantom()[{
paste("t", phantom() - phantom(), "1")
}], ")", ""))) +
ylab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom())
}], ")", ""))) + monocle:::monocle_theme_opts() + scale_color_gradientn(colours = terrain.colors(10))
qplot(y, z, color = x) +
xlab(expression(paste("Target (", "x", phantom()[{
paste("t", phantom() - phantom(), "1")
}], ")", ""))) +
ylab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom())
}], ")", ""))) + monocle:::monocle_theme_opts() + scale_color_gradientn(colours = terrain.colors(10))
qplot(y, z, color = x, size = 3) +
xlab(expression(paste("Target (", "x", phantom()[{
paste("t", phantom() - phantom(), "1")
}], ")", ""))) +
ylab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom())
}], ")", ""))) + monocle:::monocle_theme_opts() + scale_color_gradientn(colours = terrain.colors(10))
x <- exprs(neuron_sim_cds)['Hes5', 1:199]
y <- exprs(neuron_sim_cds)['Mash1', 2:200]
z <- exprs(neuron_sim_cds)['Mash1', 1:199]
qplot(y, z, color = x) +
xlab(expression(paste("Target (", "x", phantom()[{
paste("t", phantom() - phantom(), "1")
}], ")", ""))) +
ylab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom())
}], ")", ""))) + monocle:::monocle_theme_opts() + scale_color_gradientn(colours = terrain.colors(10))
qplot(x, z, color = x) +
xlab(expression(paste("Target (", "x", phantom()[{
paste("t", phantom() - phantom(), "1")
}], ")", ""))) +
ylab(expression(paste("Target (", "y", phantom()[{
paste("t", phantom())
}], ")", ""))) + monocle:::monocle_theme_opts() + scale_color_gradientn(colours = terrain.colors(10))
lung
row.names(subset(fData(lung), gene_short_name %in% c("A", "B")))
?plot_ly
?facet_wrap
fData(lung)
colnames(fData(lung))
"turning_point" %in% colnames(fData(lung))
?ccm
k
clusterCells
24 * 7

// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// di_single_run
double di_single_run(SEXP x, SEXP y, SEXP n);
RcppExport SEXP _Scribe_di_single_run(SEXP xSEXP, SEXP ySEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(di_single_run(x, y, n));
    return rcpp_result_gen;
END_RCPP
}
// di_single_run_conditioned
double di_single_run_conditioned(SEXP x, SEXP y, SEXP z, SEXP n);
RcppExport SEXP _Scribe_di_single_run_conditioned(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type z(zSEXP);
    Rcpp::traits::input_parameter< SEXP >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(di_single_run_conditioned(x, y, z, n));
    return rcpp_result_gen;
END_RCPP
}
// rdi_many_runs
double rdi_many_runs(SEXP x, SEXP y);
RcppExport SEXP _Scribe_rdi_many_runs(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(rdi_many_runs(x, y));
    return rcpp_result_gen;
END_RCPP
}
// rdi_single_run
double rdi_single_run(SEXP x, SEXP y, SEXP d);
RcppExport SEXP _Scribe_rdi_single_run(SEXP xSEXP, SEXP ySEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(rdi_single_run(x, y, d));
    return rcpp_result_gen;
END_RCPP
}
// lmi_single_run
double lmi_single_run(SEXP x, SEXP y, SEXP delay);
RcppExport SEXP _Scribe_lmi_single_run(SEXP xSEXP, SEXP ySEXP, SEXP delaySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type delay(delaySEXP);
    rcpp_result_gen = Rcpp::wrap(lmi_single_run(x, y, delay));
    return rcpp_result_gen;
END_RCPP
}
// lmi_multiple_run_cpp
double lmi_multiple_run_cpp(NumericMatrix& x, NumericMatrix& y, int d, IntegerVector run_vec);
RcppExport SEXP _Scribe_lmi_multiple_run_cpp(SEXP xSEXP, SEXP ySEXP, SEXP dSEXP, SEXP run_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type run_vec(run_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(lmi_multiple_run_cpp(x, y, d, run_vec));
    return rcpp_result_gen;
END_RCPP
}
// lmi_multiple_run
double lmi_multiple_run(SEXP x, SEXP y, SEXP d, IntegerVector run_vec);
RcppExport SEXP _Scribe_lmi_multiple_run(SEXP xSEXP, SEXP ySEXP, SEXP dSEXP, SEXP run_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type d(dSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type run_vec(run_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(lmi_multiple_run(x, y, d, run_vec));
    return rcpp_result_gen;
END_RCPP
}
// rdi_single_run_conditioned
double rdi_single_run_conditioned(SEXP x, SEXP y, SEXP z, SEXP z_delays, SEXP d);
RcppExport SEXP _Scribe_rdi_single_run_conditioned(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP z_delaysSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type z(zSEXP);
    Rcpp::traits::input_parameter< SEXP >::type z_delays(z_delaysSEXP);
    Rcpp::traits::input_parameter< SEXP >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(rdi_single_run_conditioned(x, y, z, z_delays, d));
    return rcpp_result_gen;
END_RCPP
}
// extract_max_rdi_value_delay
List extract_max_rdi_value_delay(NumericMatrix rdi_result, IntegerVector delays);
RcppExport SEXP _Scribe_extract_max_rdi_value_delay(SEXP rdi_resultSEXP, SEXP delaysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type rdi_result(rdi_resultSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type delays(delaysSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_max_rdi_value_delay(rdi_result, delays));
    return rcpp_result_gen;
END_RCPP
}
// calculate_rdi_cpp
List calculate_rdi_cpp(NumericMatrix& expr_data, IntegerVector delays, IntegerMatrix& super_graph, IntegerVector& turning_points, int method);
RcppExport SEXP _Scribe_calculate_rdi_cpp(SEXP expr_dataSEXP, SEXP delaysSEXP, SEXP super_graphSEXP, SEXP turning_pointsSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type expr_data(expr_dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type delays(delaysSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type super_graph(super_graphSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type turning_points(turning_pointsSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_rdi_cpp(expr_data, delays, super_graph, turning_points, method));
    return rcpp_result_gen;
END_RCPP
}
// calculate_rdi_cpp_wrap
List calculate_rdi_cpp_wrap(SEXP expr_data, SEXP delays, SEXP super_graph, SEXP turning_points, SEXP method);
RcppExport SEXP _Scribe_calculate_rdi_cpp_wrap(SEXP expr_dataSEXP, SEXP delaysSEXP, SEXP super_graphSEXP, SEXP turning_pointsSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type expr_data(expr_dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type delays(delaysSEXP);
    Rcpp::traits::input_parameter< SEXP >::type super_graph(super_graphSEXP);
    Rcpp::traits::input_parameter< SEXP >::type turning_points(turning_pointsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_rdi_cpp_wrap(expr_data, delays, super_graph, turning_points, method));
    return rcpp_result_gen;
END_RCPP
}
// extract_top_incoming_nodes_delays
List extract_top_incoming_nodes_delays(NumericMatrix max_rdi_value, IntegerMatrix max_rdi_delays, int k);
RcppExport SEXP _Scribe_extract_top_incoming_nodes_delays(SEXP max_rdi_valueSEXP, SEXP max_rdi_delaysSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type max_rdi_value(max_rdi_valueSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type max_rdi_delays(max_rdi_delaysSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_top_incoming_nodes_delays(max_rdi_value, max_rdi_delays, k));
    return rcpp_result_gen;
END_RCPP
}
// calculate_conditioned_rdi_cpp_wrap
NumericMatrix calculate_conditioned_rdi_cpp_wrap(SEXP expr_data, SEXP super_graph, SEXP max_rdi_value, SEXP max_rdi_delays, SEXP k);
RcppExport SEXP _Scribe_calculate_conditioned_rdi_cpp_wrap(SEXP expr_dataSEXP, SEXP super_graphSEXP, SEXP max_rdi_valueSEXP, SEXP max_rdi_delaysSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type expr_data(expr_dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type super_graph(super_graphSEXP);
    Rcpp::traits::input_parameter< SEXP >::type max_rdi_value(max_rdi_valueSEXP);
    Rcpp::traits::input_parameter< SEXP >::type max_rdi_delays(max_rdi_delaysSEXP);
    Rcpp::traits::input_parameter< SEXP >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_conditioned_rdi_cpp_wrap(expr_data, super_graph, max_rdi_value, max_rdi_delays, k));
    return rcpp_result_gen;
END_RCPP
}
// smooth_gene
NumericMatrix smooth_gene(NumericMatrix& expr_data, const int window_size);
RcppExport SEXP _Scribe_smooth_gene(SEXP expr_dataSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type expr_data(expr_dataSEXP);
    Rcpp::traits::input_parameter< const int >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(smooth_gene(expr_data, window_size));
    return rcpp_result_gen;
END_RCPP
}
// rdi_single_run_multiple_run_cpp
double rdi_single_run_multiple_run_cpp(NumericMatrix& x, NumericMatrix& y, int d, IntegerVector run_vec);
RcppExport SEXP _Scribe_rdi_single_run_multiple_run_cpp(SEXP xSEXP, SEXP ySEXP, SEXP dSEXP, SEXP run_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type run_vec(run_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(rdi_single_run_multiple_run_cpp(x, y, d, run_vec));
    return rcpp_result_gen;
END_RCPP
}
// calculate_rdi_multiple_run_cpp
List calculate_rdi_multiple_run_cpp(NumericMatrix& expr_data, IntegerVector delays, IntegerVector run_vec, IntegerMatrix& super_graph, IntegerVector turning_points, int method);
RcppExport SEXP _Scribe_calculate_rdi_multiple_run_cpp(SEXP expr_dataSEXP, SEXP delaysSEXP, SEXP run_vecSEXP, SEXP super_graphSEXP, SEXP turning_pointsSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type expr_data(expr_dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type delays(delaysSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type run_vec(run_vecSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type super_graph(super_graphSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type turning_points(turning_pointsSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_rdi_multiple_run_cpp(expr_data, delays, run_vec, super_graph, turning_points, method));
    return rcpp_result_gen;
END_RCPP
}
// calculate_rdi_multiple_run_cpp_wrap
List calculate_rdi_multiple_run_cpp_wrap(SEXP expr_data, SEXP delays, SEXP run_vec, SEXP super_graph, SEXP turning_points, SEXP method);
RcppExport SEXP _Scribe_calculate_rdi_multiple_run_cpp_wrap(SEXP expr_dataSEXP, SEXP delaysSEXP, SEXP run_vecSEXP, SEXP super_graphSEXP, SEXP turning_pointsSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type expr_data(expr_dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type delays(delaysSEXP);
    Rcpp::traits::input_parameter< SEXP >::type run_vec(run_vecSEXP);
    Rcpp::traits::input_parameter< SEXP >::type super_graph(super_graphSEXP);
    Rcpp::traits::input_parameter< SEXP >::type turning_points(turning_pointsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_rdi_multiple_run_cpp_wrap(expr_data, delays, run_vec, super_graph, turning_points, method));
    return rcpp_result_gen;
END_RCPP
}
// rdi_multiple_runs_conditioned_cpp
double rdi_multiple_runs_conditioned_cpp(NumericMatrix& x, NumericMatrix& y, NumericMatrix& z, IntegerVector& z_delays, int d, IntegerVector run_vec);
RcppExport SEXP _Scribe_rdi_multiple_runs_conditioned_cpp(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP z_delaysSEXP, SEXP dSEXP, SEXP run_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type z(zSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type z_delays(z_delaysSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type run_vec(run_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(rdi_multiple_runs_conditioned_cpp(x, y, z, z_delays, d, run_vec));
    return rcpp_result_gen;
END_RCPP
}
// rdi_multiple_runs_conditioned
double rdi_multiple_runs_conditioned(SEXP x, SEXP y, SEXP z, SEXP z_delays, SEXP d, SEXP run_vec);
RcppExport SEXP _Scribe_rdi_multiple_runs_conditioned(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP z_delaysSEXP, SEXP dSEXP, SEXP run_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type z(zSEXP);
    Rcpp::traits::input_parameter< SEXP >::type z_delays(z_delaysSEXP);
    Rcpp::traits::input_parameter< SEXP >::type d(dSEXP);
    Rcpp::traits::input_parameter< SEXP >::type run_vec(run_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(rdi_multiple_runs_conditioned(x, y, z, z_delays, d, run_vec));
    return rcpp_result_gen;
END_RCPP
}
// calculate_multiple_run_conditioned_rdi_cpp
NumericMatrix calculate_multiple_run_conditioned_rdi_cpp(NumericMatrix& expr_data, IntegerMatrix& super_graph, NumericMatrix& max_rdi_value, IntegerMatrix& max_rdi_delays, IntegerVector run_vec, int k);
RcppExport SEXP _Scribe_calculate_multiple_run_conditioned_rdi_cpp(SEXP expr_dataSEXP, SEXP super_graphSEXP, SEXP max_rdi_valueSEXP, SEXP max_rdi_delaysSEXP, SEXP run_vecSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type expr_data(expr_dataSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type super_graph(super_graphSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type max_rdi_value(max_rdi_valueSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type max_rdi_delays(max_rdi_delaysSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type run_vec(run_vecSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_multiple_run_conditioned_rdi_cpp(expr_data, super_graph, max_rdi_value, max_rdi_delays, run_vec, k));
    return rcpp_result_gen;
END_RCPP
}
// calculate_multiple_run_conditioned_rdi_wrap
NumericMatrix calculate_multiple_run_conditioned_rdi_wrap(SEXP expr_data, SEXP super_graph, SEXP max_rdi_value, SEXP max_rdi_delays, SEXP run_vec, SEXP k);
RcppExport SEXP _Scribe_calculate_multiple_run_conditioned_rdi_wrap(SEXP expr_dataSEXP, SEXP super_graphSEXP, SEXP max_rdi_valueSEXP, SEXP max_rdi_delaysSEXP, SEXP run_vecSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type expr_data(expr_dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type super_graph(super_graphSEXP);
    Rcpp::traits::input_parameter< SEXP >::type max_rdi_value(max_rdi_valueSEXP);
    Rcpp::traits::input_parameter< SEXP >::type max_rdi_delays(max_rdi_delaysSEXP);
    Rcpp::traits::input_parameter< SEXP >::type run_vec(run_vecSEXP);
    Rcpp::traits::input_parameter< SEXP >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_multiple_run_conditioned_rdi_wrap(expr_data, super_graph, max_rdi_value, max_rdi_delays, run_vec, k));
    return rcpp_result_gen;
END_RCPP
}
// clr
NumericMatrix clr(NumericMatrix x);
RcppExport SEXP _Scribe_clr(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(clr(x));
    return rcpp_result_gen;
END_RCPP
}
// knn_density
NumericVector knn_density(NumericMatrix x, NumericMatrix y, int k);
RcppExport SEXP _Scribe_knn_density(SEXP xSEXP, SEXP ySEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(knn_density(x, y, k));
    return rcpp_result_gen;
END_RCPP
}
// knn_density_2d
NumericMatrix knn_density_2d(NumericVector x, NumericVector y, IntegerVector nGrid, int k);
RcppExport SEXP _Scribe_knn_density_2d(SEXP xSEXP, SEXP ySEXP, SEXP nGridSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nGrid(nGridSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(knn_density_2d(x, y, nGrid, k));
    return rcpp_result_gen;
END_RCPP
}
// digamma_0
double digamma_0(double x);
RcppExport SEXP _Scribe_digamma_0(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(digamma_0(x));
    return rcpp_result_gen;
END_RCPP
}
// vd
double vd(SEXP d);
RcppExport SEXP _Scribe_vd(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(vd(d));
    return rcpp_result_gen;
END_RCPP
}
// entropy
double entropy(SEXP x, SEXP k);
RcppExport SEXP _Scribe_entropy(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(entropy(x, k));
    return rcpp_result_gen;
END_RCPP
}
// mi
double mi(SEXP x, SEXP y, SEXP k);
RcppExport SEXP _Scribe_mi(SEXP xSEXP, SEXP ySEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(mi(x, y, k));
    return rcpp_result_gen;
END_RCPP
}
// cmi
List cmi(SEXP x, SEXP y, SEXP z, SEXP k);
RcppExport SEXP _Scribe_cmi(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type z(zSEXP);
    Rcpp::traits::input_parameter< SEXP >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(cmi(x, y, z, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Scribe_di_single_run", (DL_FUNC) &_Scribe_di_single_run, 3},
    {"_Scribe_di_single_run_conditioned", (DL_FUNC) &_Scribe_di_single_run_conditioned, 4},
    {"_Scribe_rdi_many_runs", (DL_FUNC) &_Scribe_rdi_many_runs, 2},
    {"_Scribe_rdi_single_run", (DL_FUNC) &_Scribe_rdi_single_run, 3},
    {"_Scribe_lmi_single_run", (DL_FUNC) &_Scribe_lmi_single_run, 3},
    {"_Scribe_lmi_multiple_run_cpp", (DL_FUNC) &_Scribe_lmi_multiple_run_cpp, 4},
    {"_Scribe_lmi_multiple_run", (DL_FUNC) &_Scribe_lmi_multiple_run, 4},
    {"_Scribe_rdi_single_run_conditioned", (DL_FUNC) &_Scribe_rdi_single_run_conditioned, 5},
    {"_Scribe_extract_max_rdi_value_delay", (DL_FUNC) &_Scribe_extract_max_rdi_value_delay, 2},
    {"_Scribe_calculate_rdi_cpp", (DL_FUNC) &_Scribe_calculate_rdi_cpp, 5},
    {"_Scribe_calculate_rdi_cpp_wrap", (DL_FUNC) &_Scribe_calculate_rdi_cpp_wrap, 5},
    {"_Scribe_extract_top_incoming_nodes_delays", (DL_FUNC) &_Scribe_extract_top_incoming_nodes_delays, 3},
    {"_Scribe_calculate_conditioned_rdi_cpp_wrap", (DL_FUNC) &_Scribe_calculate_conditioned_rdi_cpp_wrap, 5},
    {"_Scribe_smooth_gene", (DL_FUNC) &_Scribe_smooth_gene, 2},
    {"_Scribe_rdi_single_run_multiple_run_cpp", (DL_FUNC) &_Scribe_rdi_single_run_multiple_run_cpp, 4},
    {"_Scribe_calculate_rdi_multiple_run_cpp", (DL_FUNC) &_Scribe_calculate_rdi_multiple_run_cpp, 6},
    {"_Scribe_calculate_rdi_multiple_run_cpp_wrap", (DL_FUNC) &_Scribe_calculate_rdi_multiple_run_cpp_wrap, 6},
    {"_Scribe_rdi_multiple_runs_conditioned_cpp", (DL_FUNC) &_Scribe_rdi_multiple_runs_conditioned_cpp, 6},
    {"_Scribe_rdi_multiple_runs_conditioned", (DL_FUNC) &_Scribe_rdi_multiple_runs_conditioned, 6},
    {"_Scribe_calculate_multiple_run_conditioned_rdi_cpp", (DL_FUNC) &_Scribe_calculate_multiple_run_conditioned_rdi_cpp, 6},
    {"_Scribe_calculate_multiple_run_conditioned_rdi_wrap", (DL_FUNC) &_Scribe_calculate_multiple_run_conditioned_rdi_wrap, 6},
    {"_Scribe_clr", (DL_FUNC) &_Scribe_clr, 1},
    {"_Scribe_knn_density", (DL_FUNC) &_Scribe_knn_density, 3},
    {"_Scribe_knn_density_2d", (DL_FUNC) &_Scribe_knn_density_2d, 4},
    {"_Scribe_digamma_0", (DL_FUNC) &_Scribe_digamma_0, 1},
    {"_Scribe_vd", (DL_FUNC) &_Scribe_vd, 1},
    {"_Scribe_entropy", (DL_FUNC) &_Scribe_entropy, 2},
    {"_Scribe_mi", (DL_FUNC) &_Scribe_mi, 3},
    {"_Scribe_cmi", (DL_FUNC) &_Scribe_cmi, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_Scribe(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

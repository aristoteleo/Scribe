{
    "collab_server" : "",
    "contents" : "% \\VignetteIndexEntry{Monocle: Cell counting, differential expression, and trajectory analysis for single-cell RNA-Seq experiments} \n% \\VignetteEngine{knitr::knitr}\n% \\VignetteDepends{} \n% \\VignettePackage{monocle}\n\n\\documentclass[10pt,oneside]{article}\n\n\\newcommand{\\thetitle}{Scribe: Gene regulation visualization, causal network inference for single-cell RNA-Seq experiments}\n\n%\\usepackage[pdftitle={\\thetitle},pdfauthor={Wolfgang Huber}]{whbiocvignette}\n\\usepackage{whbiocvignette}\n% \\usepackage{times}\n%\\usepackage{hyperref}\n%\\usepackage{verbatim}\n%\\usepackage{graphicx}\n%\\usepackage{fancybox}\n%\\usepackage{color}\n\n\\title{\\textsf{\\textbf{\\thetitle}}}\n\\author{Xiaojie Qiu\\\\[1em]University of Washington,\\\\ Seattle, Washington, USA\\\\\n\\texttt{xqiu@uw.edu} \\and\nArman Rahimzamani\\\\[1em]University of Washington,\\\\ Seattle, Washington, USA\\\\\n\\texttt{armanrz@uw.edu}\n}\n\\begin{document}\n% \\SweaveOpts{concordance=TRUE}\n\n<<include=FALSE>>=\nlibrary(knitr)\nopts_chunk$set(\n#concordance=TRUE\n)\n@\n\n\n\n\n<<package_loads, include=FALSE, eval=TRUE>>=\nlibrary(Biobase)\nlibrary(knitr)\nlibrary(reshape2)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(autodep=TRUE, cache=FALSE, warning=FALSE, dev='png', dpi=600)\nset.seed(0)\n@ %def\n\n\\maketitle\n\\begin{abstract}\nCellular fate commitment is governed by hierarchical gene regulatory networks. Previous network inference approaches are inherently incapable of resolving complex causal relationships since they are designed for small-scale and static bulk measurements. Here we propose \\Rpackage{Scribe}, a toolkit that employs \\emph{Direct Information} to reconstruct causal regulatory networks using single-cell RNA-seq data. \\Rpackage{Scribe} detects pairs of genes that interact and determines \\emph{causality} through strength of \\emph{information transfer} from one to the other. Our technique exploits the fact that an upstream regulatory gene's expression changes before its downstream targets undergo coherent changes. To calibrate the expected time lag between upstream and downstream genes, Scribe analyzes single-cell expression kinetics as the cells progress through pseudotime along a cellular trajectory.\n\n\\emph{Scribe} outperforms alternative approaches, including \\emph{Granger causality} and \\emph{cross-convergence mapping} (CCM), across systematic synthetic simulation datasets. Applying \\emph{Scribe} to several single-cell RNA-seq datasets spanning diverse biological processes including dendritic cells' response to LPS stimulation and cellular reprogramming, we find that \\emph{Scribe} reconstructs networks which are supported by either literature or ChIP-Seq/ATAC-seq datasets. Finally, we use \\emph{Scribe} to yield novel insights into the gene regulatory hierarchy of hematopoiesis. We anticipate that \\emph{Scribe} will enable single-cell biologists to reconstruct regulatory networks governing cell lineage differentiation for each of the many cell types in the human body. \n% \n%  For more information on the algorithm at the core of \\Rpackage{Scribe}. \n\\end{abstract}\n\n\\tableofcontents\n\n<<init_Scribe, include=FALSE, eval=TRUE>>=\nlibrary(Scribe)\nlibrary(plyr)\n@ %def \n\n\\section{Introduction}\n\n The \\Rpackage{Scirbe} package provides a toolkit for visualizing and reconstructing complex gene regulation for single cell genomics data. This vignette provides an overview of causal regulatory network reconstruction with single cell genomics data by \\Rpackage{Scirbe} (In this initial vignettee, we mainly rely on simulation data to demonstrate \\Rpackage{Scribe}'s power). \\Rpackage{Scirbe} is a collaboration between \\emph{Trapnell lab} at UW Genome Sciences department and \\emph{Kannan lab} at UW Electrical Engineering department. At the core of \\Rpackage{Scribe}, we used \\emph{restricted direct information}, which has been shown to out-performan than \"symmetric\" mutual information, \"linear\" Granger causality and the newly proposed \"deterministic\" CCM method. The users of \\Rpackage{Scribe} are expected to have already correctly reconstructed the developmental trajectory for their single-cell genomics dataset with \\Rpackage{Monocle 2} because it relies on the pseudotime resolved data to infer the network causality. \n\nThe restricted direct information is an extension of mutual information which takes into account the direction of information flow, under the assumption that the underlying processes can be described by a first order Markov model. Mutual information is estimated using the Kraskov method (KSG method), which builds on a nearest-neighbor framework.\n\n \\Rpackage{Scribe} can help you perform three main types of analysis:\n \\begin{enumerate}\n \\item \\textbf{Estimating and visualzing pairwise gene regulation.} Understanding how one gene activates or inhibits another gene in development, disease and through life is important. Scribe provides various function to estimate the newly developed restricted direct information (RDI) and conditional RDI (cRDI) to reveal the strenght of gene regulation. Those gene regulations can be also intuitively visualized through improved advanced visualization approach(based on the DREVI). Additionally, Scribe also supports other popular regulation inference methods, including correlation, mutual information, Granger causality and CCM. \n \\item \\textbf{Inferring spatial/temporal gene regulation.} Gene regulation is dynamic and spatial-specific. Scribe helps to identify the period of active gene regulation which may correspond to critical time point for gene intervention for genetic or immunotherapy, etc. In theory, \\Rpackage{Scribe} can be also applied to spatially resolved data to reveal spatial-specific gene regulation. \n \\item \\textbf{Reconstructing large-scale sparse causal regulatory network.} Knowing the gene regulation at systems level is important for us to better understand the mechanisms of cell differentiation and carcinogenesis, etc. The regulatory hierarchy, network motifs / hubs are also of great clinic interests. Scribe provides a newly invented method for recovering a sparse direct network capturing the network regulation from the data but also satisfying well-studied large-scale network topologies.   \n \n \\end{enumerate}\n \n\\section{Reconstructing causal network with Scribe for scRNA-seq experiment}\n\\Rpackage{Scribe} relies on \\Rpackage{Monocle 2} for reconstructing the single-cell trajectory before inferring causal network. We extended \\Rpackage{Monocle 2} in a few aspects to account for the specific requirement for \\Rpackage{Scribe}. For example, in order to avoid the over-crowded nature of the cells at the terminal regions of the trajectory, we applied a simple strategy to first run Monocle 2 using DDRTree to get the trajectory with complex branches and then reorder the trajectory for each branch (from the source state to the terminal state) using \\Rpackage{principal curve} (or \\Rpackage{simplePPT}) with the low dimension space obtained from the diffusion map dimension reduction technique. \\Rpackage{Scribe} provides various methods for infering the regulatory relationship, mutual information, Granger causality and CCM. We used the implementation from \\Rpackage{parmigene}, \\Rpackage{vars} and \\Rpackage{rEDM} respectively. To intuitively visualize the casual regulation between pairs of genes, we generalized the \\Rpackage{DREVI} approach (\\cite{}). The network visualization relies on the \\Rpackage{igraph}, \\Rpackage{netbiov}, \\Rpackage{arcdiagram} as well as the \\Rpackage{HiveR} packages. \n\nBefore we can apply \\Rpackage{Scribe} for causal network inference, we need to first run Monocle 2 for trajectory reconstruction. In the following expression we will use the pre-prepared dataset from the neuron simulation introduced in the Monocle 2 paper. For analyzing on a real dataset, we need to consider the over-crowded nature of the cells at the terminal regions of the Monocle 2 trajectory. For resolving this issue, we will apply a simple strategy by first running \\Rpackage{Monocle 2} using \\Rpackage{DDRTree} to get the trajectory with complex branches and then reorder the trajectory for each branch (from the source state to the terminal state) using \\Rpackage{principal curve} (\\Rpackage{simplePPT}) with the low dimension space obtained from the \\Rpackage{diffusion map} dimension reduction technique. See a demo for the lung dataset below. Note that \\Rpackage{Scribe} doesn't consider the relative value of the pseudotime and only use the order of cell in pseudotime for causal network inference. The non-uniform distribution of cells across pseudotime is partially adjusted when we calculate the RDI (See details in the method section).   \n\n\\subsection{Prepare the data for Scribe analysis}\n\n<<load_the_neuron_simulation_data, eval = TRUE>>=\nrm(list = ls())\n\ndata(\"neuron_network\") # network data\ndata(\"neuron_sim_cds\") # network data\ndata(\"na_sim_cds\") # network data\ndata(\"example_graph\") # network data\n\n# neuron_network not exist\nneuron_network$Type <- c('Neuron', 'Oligo', 'Astro', 'Neuron', 'AO', \n                         'Neuron', 'Neuron', 'Neuron', 'Neuron', \"Neuron\", \n                         'AO', 'AO', 'Astro', 'Oligo', 'Olig', 'Astro', \n                         'Astro', 'Astro', 'Olig', 'Astro', 'Oligo')\n\n# \nfData(neuron_sim_cds)$gene_short_name <- fData(neuron_sim_cds)$gene_short_names\nfData(na_sim_cds)$gene_short_name <- fData(na_sim_cds)$gene_short_names\n\n@ %def\n\nAdd the demo for the lung dataset here: \n<<load_the_lung_data, eval = F>>=\n# add code here for demo of the lung dataset \n\n@ %def\n\n\\subsection{Visualize pairwise gene interaction}\n\nThe easiest way to visualize the pairwise causal gene interaction is to use \\textbf{plot\\_gene\\_pairs\\_in\\_pseudotime} to plot the expression dynamics of the gene pair along the pseudotime. For a branched trajectory, we can also use \\textbf{plot\\_gene\\_pairs\\_branched\\_pseudotime} to plot the expression dynamics of the gene pair along the pseudotime in two separate lineages. Note that \\textbf{neuron\\_sim\\_cds} is the cds describing the commitment of neuron lineage while the \\textbf{na\\_sim\\_cds} for both of the neuron and the astrocyte lineages. \n<<gene_pairwise_kinetic_plot, eval = TRUE, fig.width = 4, fig.height = 2.5, fig.align=\"center\">>=\n# show the pair-wise gene plot (neuron_sim_cds is not a branch trajectory)\nneuron_sim_cds@lowerDetectionLimit <- 0.01\nplot_gene_pairs_in_pseudotime(cds_subset = neuron_sim_cds[, ], gene_pairs_mat =  as.matrix(neuron_network[c(12, 8), 1:2]), n_row = 1, n_col = 2, \n                              log = F, fitting_type = 'spline') +  monocle:::monocle_theme_opts() + xacHelper::nm_theme()\nplot_gene_pairs_branched_pseudotime(cds_subset = na_sim_cds, gene_pairs_mat = as.matrix(neuron_network[c(12, 8), 1:2]), n_row = 2, n_col = 2, \n                                    log = F, fitting_type = 'spline') + monocle:::monocle_theme_opts() + xacHelper::nm_theme() \n\n@ %def\n\n\\Rpackage{Scribe} also supports plotting the scatter plot for the gene pair. \\textbf{plot\\_gene\\_pairs} does exactly that but also reveal more abundantly distributed regions with a contour plot. In order to calculate the RDI values, Scribe computes the conditional mutual information of the state for $X_{t - \\sigma}$, $Y_t$ and $Y_{t - 1}$ (see methods). We can use \\textbf{plot\\_rdi\\_gene\\_pairs} to visualize this state space. An interesting finding from the CCM is that time-lagged data for a single-variable is able to recover a shadow manifold corresponding to the original manifold. Here I will show the 3D space for the variable $Pax6, Mash1, Hes5$ and the shadow manifold for $Y_t, Y_{t - 1}, Y_{t - 2}$ ($Y$ corresponds to $Mash1$). You can immediately identify that the time-lagged shadow manifold captures the topography of the original manifold.\n\n<<gene_pairwise_plot, eval = TRUE, fig.width = 2, fig.height = 3, fig.align=\"center\">>=\n# we skip some functions below because they uses plotly package whose figures can be rendered in a pdf file \nplot_lagged_drevi(cds_subset = neuron_sim_cds, gene_pairs_mat = matrix(c('Zic1', 'Sox8', 'Brn2', 'Myt1L', 'Tuj1', 'Stat3'), ncol = 2, byrow = T)) + \n  monocle:::monocle_theme_opts() + xacHelper::nm_theme()\n\nx <- exprs(neuron_sim_cds)['Pax6', ]\ny <- exprs(neuron_sim_cds)['Mash1', ]\nz <- exprs(neuron_sim_cds)['Hes5', ]\n\n# plot_rdi_gene_pairs(x, y)\n\n# plot_ly(type = 'scatter3d', x = log10(x), y = log10(y), z = log10(z), mode = 'markers') # show the original space\n# \n# # plot CCM state space and the the scatter plot in three dimension\n# plot_ccm(x) # Pax lagged state space looks pretty random\n# \n# plot_ccm(log10(y)) #Pax lagged state space looks pretty random\n# \n# plot_ccm(z) #Pax lagged state space looks pretty random\n\n@ %def\n\nIn order to intuitively visualize the relationship between two genes, we extend the DREVI approach, originally proposed by Smita Krishnaswamy, et. al. In the original approach, DREVI doesn't consider time delay, the \\textbf{plot\\_rdi\\_pairs} function in \\Rpackage{Scribe} can be used to visualize both the original \\Rpackage{DREVI} method as well as time-delayed \\Rpackage{DREVI} results. From the positive and negative gene pairs, we can see the response curve for the interacting gene pairs are pretty smooth while the non-interacting genes looks pretty noisy and less smooth. Moreover, from the \\Rpackage{DREVI} plot for the non-interacting gene pair, a give target value can have many more corresponding source values and that the response curve is pretty much flat.\n\nMoreover, in order to better represent the RDI values, we also implemented a generalized approach to consider the effect of $Y$ at earlier time point. We achieve this first by fitting a curve between  and then obtain the residual for this fitting. We then plot these residual and $X_{t - \\sigma}$ time-delayed DREVI to visualize the gene regulation.\n\n<<plot_drevi, eval = TRUE, fig.width = 4, fig.height = 2, fig.align=\"center\">>=\n# show the drevi plot result for all existing edges:\nplot_lagged_drevi(cds_subset = neuron_sim_cds[, 1:200], gene_pairs_mat = as.matrix(neuron_network[c(1, 3), 1:2]), d = 1, n_row = 1, n_col = 2) +\n  monocle:::monocle_theme_opts() + xacHelper::nm_theme()\nplot_lagged_drevi(cds_subset = neuron_sim_cds[, 1:200], gene_pairs_mat = matrix(c('Zic1', 'Sox8', 'Brn2', 'Myt1L'), byrow = T, nrow = 2), n_row = 1, n_col = 2, scales = 'free') + \n  monocle:::monocle_theme_opts() + xacHelper::nm_theme()\n@ %def\n\nAlthough lagged DREVI plot can visualize the relationship between two genes with a time delay, it doesn't reflect the effects of a gene's previous state to the current state. In order to also capture this information and thus intuitively visualize the RDI values, we proposed a new plot to visualize the expected gene expression ($\\hat{Y}_t$) given a hypothetical regulator's expression with a time delay ($X_{t - d}$) and the target gene's previous state ($\\hat{Y}_{t - 1}$). X-axis corresponds to the regulator's lagged expression with a forward time lag $d$ ($d$ is 1 here) while y-axis corresponds to the target gene's previous state's expression. The heatmap corresponds to the expected value of the target gene's expression at current state given the previous target gene expression and regulator gene expression with a time lag $d$. For each column, it represents the relationship for the target gene's expression at previous time point to the current relationship given a particular value for the regulator where for each row, it represents the relationship from the regulator to its targets given the previous stage of itself. This expected value is calculated through a local average with a Gaussian kernel. \n  \nIn the following, using this causality plot, we can see the positive regulation from Brn2 to Tuj1 and a threshold repression regulation from Mash1 to Hes5. \n\n<<plot_gene_pairs_causality, eval = TRUE, fig.width = 4, fig.height = 2, fig.align=\"center\">>=\n# show the drevi plot result for all existing edges:\nplot_gene_pairs_causality(cds_subset = neuron_sim_cds[, 1:200], gene_pairs_mat = as.matrix(neuron_network[c(8, 12), 1:2]), d = 1, n_row = 1, n_col = 2) +\n  monocle:::monocle_theme_opts() + xacHelper::nm_theme()\n@ %def\n\n\\subsection{Visualize combinatorial gene regulation}\nIt is not only important to understand the pairwise gene regulation, but also to understand the complicate gene regulation. In order to visualize the combinatorial regulation from two genes to a third gene, we proposed a plot similar to casuality plot, the combinatorial regulation plot. A combinatorial regulation plot reveals the combinatorial gene regulation from two regulators to a target gene. X-axis corresponds to the one regulator's lagged expression with a forward time lag $d$ ($d$ is 1 here) while y-axis corresponds to another regulator's gene expression with a forward time lag $d$ ($d$  is also 1 here).  The heatmap corresponds to the expected value of the target gene's expression at current state given knowing both of the regulators' expression with the forward lags. Similar to the causality plot, this expected value is also calculated through a local average with a Gaussian kernel. \n\nFor example, in the following, with the combinatorial plot we can see that the combinatorial logic from Pax6, Mash1 to Hes5 is $Pax6\\ and\\ not\\ Hes5$. Similarly, we can see the $Zic1 and Brn2$'s combinatorial regulation logic for the expression for $Tuj1$. \n<<plot_comb_logic, eval = TRUE, fig.width = 4, fig.height = 2, fig.align=\"center\">>=\nsubset_combinatorial_net <- cbind(V0 = c('Pax6', 'Zic1'), neuron_network[c(12, 8), 1:2])\nplot_comb_logic(cds_subset = neuron_sim_cds[, ], gene_pairs_target_mat =  subset_combinatorial_net, d = 1, n_row = 1, n_col = 2) +\n  monocle:::monocle_theme_opts() + xacHelper::nm_theme()\n@ %def\n\n\\subsection{Assess temporal causal gene regulation}\n\nGene regulation is dynamic and the timing of regulation varies from gene-pair to gene-pair. We developed a strategy (implemented through the \\textbf{rdi\\_crdi\\_pseudotime} function) to estimate the temporal causal regulation in \\Rpackage{Scribe} to helps to identify the period of strong gene regulation.\n<<plot_temporal_rdi, eval = TRUE, fig.width = 4, fig.height = 4, fig.align=\"center\">>=\n# test temporal RDI, etc.\ngene_name_vec <- c('Pax6', 'Mash1', 'Brn2', 'Zic1', 'Tuj1', 'Hes5', 'Scl', 'Olig2', 'Stat3', 'Myt1L', 'Aldh1L', 'Sox8', 'Mature')\n\nrdi_crdi_pseudotime_res_list <- calculate_temporal_causality(cds_subset = na_sim_cds[1:12, 1:200], window_size = 50) #13 mature gives Na values\n\nrdi_res <- rdi_crdi_pseudotime_res_list$rdi_res\ncrdi_res <- rdi_crdi_pseudotime_res_list$crdi_res\n\ndim(rdi_res) <- c(dim(rdi_res)[1], dim(rdi_res)[2] * dim(rdi_res)[2])\n\nall_cmbns <- expand.grid(gene_name_vec[1:12], gene_name_vec[1:12])\nvalid_all_cmbns_df <- data.frame(pair = paste((all_cmbns$Var1), (all_cmbns$Var2), sep = ' -> '), pval = 0)\n\nrow.names(valid_all_cmbns_df) <- valid_all_cmbns_df$pair\nrdi_res <- as.data.frame(rdi_res)\ncolnames(rdi_res) <- valid_all_cmbns_df$pair\n\nvalid_all_cmbns_df <- data.frame(pair = paste((as.character(neuron_network[, 1])), (as.character(neuron_network[, 2])), sep = ' -> '), pval = 0)\nvalid_rdi_res <- rdi_res[, as.character(valid_all_cmbns_df$pair)]\nnorm_valid_rdi_res <- apply(valid_rdi_res, 2, function(x) (x - min(x)) / (max(x) - min(x)))\npheatmap::pheatmap(t(norm_valid_rdi_res[, ]), cluster_rows = F, cluster_cols = F, annotation_names_row = T, border_color = NA)\n\nvalid_all_cmbns_df_back <- data.frame(pair = paste((as.character(neuron_network[, 1])), (as.character(neuron_network[, 2])), sep = ' -> '), pval = 0)\nvalid_rdi_res_back <- rdi_res[, as.character(valid_all_cmbns_df_back$pair)]\nnorm_valid_rdi_res_back <- apply(valid_rdi_res_back, 2, function(x) (x - min(x)) / (max(x) - min(x)))\npheatmap::pheatmap(t(norm_valid_rdi_res_back[, ]), cluster_rows = F, cluster_cols = F, annotation_names_row = T, border_color = NA)\n\n# plot crdi_res\ndim(crdi_res) <- c(dim(crdi_res)[1], dim(crdi_res)[2] * dim(crdi_res)[2])\n\nvalid_all_cmbns_df <- data.frame(pair = paste((all_cmbns$Var1), (all_cmbns$Var2), sep = ' -> '), pval = 0)\ncolnames(crdi_res) <- valid_all_cmbns_df$pair\n\nvalid_all_cmbns_df <- data.frame(pair = paste((as.character(neuron_network[, 1])), (as.character(neuron_network[, 2])), sep = ' -> '), pval = 0)\nvalid_crdi_res <- crdi_res[, as.character(valid_all_cmbns_df$pair)]\nnorm_valid_crdi_res <- apply(valid_crdi_res, 2, function(x) (x - min(x)) / (max(x) - min(x)))\n# norm_valid_crdi_res_ordered <- norm_valid_crdi_res[, order(unlist(apply(norm_valid_crdi_res, 2, which.max)))]\npheatmap::pheatmap(t(norm_valid_crdi_res[, ]), cluster_rows = F, cluster_cols = F, annotation_names_row = T, border_color = NA)\n\npheatmap::pheatmap(t(norm_valid_crdi_res[, ]), cluster_rows = F, cluster_cols = F, annotation_names_row = T, border_color = NA)\n\nneuron_net <- graph_from_edgelist(as.matrix(neuron_network[, 1:2]), directed = T)\n\nlayout_coord <- layout_as_tree(neuron_net)\nrow.names(layout_coord) <- V(neuron_net)$name\nlayout_coord[\"Tuj1\", ] <- c(-1.25,  0)\n\nlayout_coord[\"Scl\", ] <- layout_coord[\"Olig2\", ]\nlayout_coord[\"Olig2\", ] <- c(1.25, 1.00)\nlayout_coord[\"Stat3\", ] <- c(0.4, 0.5)\nlayout_coord[\"Aldh1L\", ] <- c(-0.75, -1)\nlayout_coord[\"Myt1L\", ] <- layout_coord[\"Sox8\", ]\nlayout_coord[\"Sox8\", ] <- c(1.95, 0)\n\ncolor = rep('blue', 21)\ncolor[c(5, 12, 14, 16)] <- 'red'\n\nres <- apply(norm_valid_crdi_res, 2, function(x) c(mean(x[1:37]), mean(x[38:64]), mean(x[65:111]), mean(x[112:150])))\nplot(neuron_net, layout = layout_coord, edge.width=res[1, ] * 5, edge.color = color)\nplot(neuron_net, layout = layout_coord, edge.width=res[2, ] * 5, edge.color = color)\nplot(neuron_net, layout = layout_coord, edge.width=res[3, ] * 5, edge.color = color)\nplot(neuron_net, layout = layout_coord, edge.width=res[4, ] * 5, edge.color = color)\n\n@ %def\n\n\\subsection{Estimate time delay for gene pairs}\n\nAn important parameter required for causal network inference in Scribe is the proper time-delay between two genes. \\Rpackage{Scribe} provides two empirical approaches to estimate this parameter: for the linear trajectory, \\Rpackage{Scribe} identifies the inflection point for each gene and the difference between this two genes is used as the time delay; for a branch trajectory, \\Rpackage{Scribe} identifies the branch time point for each gene and the difference between this two genes is used as the time delay. \\textbf{estimate\\_turning\\_point} is the function to estimate the time delay between genes while the \\textbf{plot\\_time\\_delay\\_heatmap} can be used to visualize the time delay between any pairs of genes from the cds.\n\n<<plot_time_delay_heatmap, eval = TRUE, fig.width = 4, fig.height = 4, fig.align=\"center\">>=\nna_sim_cds <- estimate_turning_point(na_sim_cds)\nplot_time_delay(na_sim_cds, use_gene_short_name = F)\n@ %def\n\n\\subsection{Infer and visualize gene regulatory network}\n\nWe can infer the gene regulatory network through \\textbf{calculate\\_rdi\\_multiple\\_run\\_cpp} function. This function will return a list with the following elements:\na. \\textbf{RDI} (dimension is number of genes X length of delays times number of genes), vector of \\textbf{delays}, \\textbf{max\\_rdi\\_value} and \\textbf{max\\_rdi\\_delays} (the matrices for the all possible pairs of gene regulation). After we run \\textbf{calculate\\_rdi\\_multiple\\_run\\_cpp}, we can further calculate the conditional RDI values between all possible pair of genes by conditioning the top highest incoming node(s) based on the RDI results. \\Rpackage{Scribe} can concatenate multiple directly related trajectory (for example different lineage commitment from the same developmental trajectory) for RDI calculation (that is why the term \"multiple\\_run\" appears in the function). \\Rpackage{Scribe} will also provide a procedure to sparsify the RDI/cRDI matrix to ensure  the distribution of indegree of the network follows the exponential distribution while the distribution of outdegree follows the power-law distribution (this part is still under development).\n\nIn \\Rpackage{Scribe}, we provided a variety of approaches to visualize the RDI network we retrieved in the end. This can be done either by using the \\Rpackage{heatmap}, \\Rpackage{igraph} plotting function, the \\Rpackage{hiearical} plot (based on \\textbf{level.plot} in \\Rpackage{netbiov} package), the arc diagram plot as well as the \\Rpackage{Hive} plot.\n\n<<plot_network, eval = TRUE, fig.width = 4, fig.height = 4, fig.align=\"center\">>=\n\ndata <- t(exprs(neuron_sim_cds)[, 1:200]) # prepare the data (row is sample, column is gene)\nnoise = matrix(rnorm(mean = 0, sd = 1e-10, nrow(data) * ncol(data)), nrow = nrow(data))\n\nrun_vec <- rep(1, nrow(data)) # run information for each cell\n\n# create the network graph we want to estimate RDI (here we calculate all possible pair of gene regulation)\ntmp <- expand.grid(1:ncol(data), 1:ncol(data), stringsAsFactors = F)\nsuper_graph <- tmp[tmp[, 1] != tmp[, 2], ] - 1 #\nsuper_graph <- super_graph[, c(2, 1)]\nsave.image()\nrdi_list <- calculate_rdi_multiple_run(neuron_sim_cds[, 1:200], run_vec = NULL, delay = c(1), super_graph = as.matrix(super_graph), method = 1) #* 100 + noise\n\ndimnames(rdi_list$max_rdi_value) <- list(gene_name_vec, gene_name_vec)\ncon_rdi_res_test <- calculate_conditioned_rdi_multiple_run(neuron_sim_cds[, 1:200], run_vec = NULL, super_graph = as.matrix(super_graph), rdi_list = rdi_list, top_incoming_k = 1)\ndimnames(con_rdi_res_test) <- list(gene_name_vec, gene_name_vec)\n\n# visualize the network by heatmap\npheatmap::pheatmap(rdi_list$max_rdi_value, cluster_rows = F, cluster_cols = F, annotation_names_col = T, border_color = NA)\npheatmap::pheatmap(con_rdi_res_test, cluster_rows = F, cluster_cols = F, annotation_names_col = T, border_color = NA)\n\n# in the following, I will show how to visualize a large scale network\n# load the network:\ndata(\"example_graph\") #load the example_graph (we need to mannually set the initial_nodes 1:2 in .process_graph1 function)\n\nplot_causal_network(example_graph$g, type = 'igraph', layout = layout_in_circle)\n# plot_network(example_graph$g, type = 'hiearchy')\nplot.netbiov(example_graph)\nplot_causal_network(example_graph$g, type = 'arcdiagram')\n\n@ %def\n\n% This quick start will outline the default functions to execute in order to to analyze your data.\n% If you are interested in how Monocle works and functions other than the default ones mentioned here, move onto section 3 \"Getting Started with Monocle\".\n%\n% \\begin{enumerate}\n% \\item Store Data in a CellDataSet Object\n%\n% Three files are required in order to create a CellDataSet object:\n%\n% exprs: rows are genes and columns are cells (type = matrix)\n% phenoData: rows are cells and columns are cell attributes (type = AnnotatedDataFrame)\n% featureData: rows are features and columns are gene attributes (type = AnnotatedDataFrame)\n%\n% exprs number of columns must equal phenoData number of rows\n% exprs number of rows must equal featureData number of rows\n% featureData must have column named \"gene\\_short\\_name\" for certain functions\n%\n% Use the newCellDataSet function, as shown below, to create a new CellDataSet object with expression values measured in FPKM.  By default, Monocle assumes your data is log-normally distributed and uses a Tobit model to test for differential expression\n% in downstream steps. If you are not using TPM or FPKM data go to section 2.2 on how to model it for further steps.\n%\n% <<quick_start_create_cds, eval=FALSE>>=\n% pd <- new(\"AnnotatedDataFrame\", data = HSMM_sample_sheet)\n% fd <- new(\"AnnotatedDataFrame\", data = HSMM_gene_annotation)\n% HSMM <- newCellDataSet(as.matrix(HSMM_expr_matrix), phenoData = pd, featureData = fd)\n%  @ %def\n%\n% \\item Filter Low-quality Cells\n%\n%  The following lines are an example of how to display a table that reports how many cells express certain genes. detectGenes() takes a CellDataSet object and minimum threshold and will return the same CellDataSet object with all the genes that surpass the minimum threshold.\n% <<quick_start_report_genes_detected, eval=FALSE>>=\n% HSMM <- detectGenes(HSMM, min_expr = 0.1)\n% print(head(fData(HSMM)))\n% @ %def\n%\n% The expressed\\_genes vector will hold the identifiers for genes expressed in at least 50 cells of the\n% CellDataSet. This will be used later when we place cells in order of biological process.\n% <<quick_start_store_expressed_genes, eval=FALSE>>=\n% expressed_genes <- row.names(subset(fData(HSMM), num_cells_expressed >= 50))\n% @ %def\n%\n% The following lines will remove cells with very low mRNA recovery or far more recovery than that of the typical cell.\n% <<quick_start_filter_cells, eval=FALSE>>=\n% HSMM <- HSMM[,pData(HSMM)$Total_mRNAs < 1e6]\n% upper_bound <- 10^(mean(log10(pData(HSMM)$Total_mRNAs)) + 2*sd(log10(pData(HSMM)$Total_mRNAs)))\n% lower_bound <- 10^(mean(log10(pData(HSMM)$Total_mRNAs)) - 2*sd(log10(pData(HSMM)$Total_mRNAs)))\n% HSMM <- HSMM[,pData(HSMM)$Total_mRNAs > lower_bound & pData(HSMM)$Total_mRNAs < upper_bound]\n% @ %def\n%\n% \\item Classify Cells with CellTypeHierarchy\n%\n% Monocle allows you to tag different cells based on the expression of marker genes of your choosing through CellTypeHierarchies. First, create a new CellTypeHierarchy with the newCellTypeHierarchy() function. Then you can add new cell types to the CellTypeHierarchy by using the addCellType() function as shown below. The addCellType() function takes the CellTypeHierarchy you are adding the cell type to, the name of the new cell type as a string, and a classifaction function, called classify\\_func, that accept expression data of each cell as input and return a boolean indicating whether or not the inputted cell is of that type.\n%\n% <<quick_start_set_up_cth, eval=FALSE>>=\n% cth <- newCellTypeHierarchy()\n%\n% MYF5_id <- row.names(subset(fData(HSMM), gene_short_name == \"MYF5\"))\n% ANPEP_id <- row.names(subset(fData(HSMM), gene_short_name == \"ANPEP\"))\n%\n% cth <- addCellType(cth, \"Myoblast\", classify_func = function(x) {x[MYF5_id,] >= 1})\n% cth <- addCellType(cth, \"Fibroblast\",\n%                    classify_func = function(x) {x[MYF5_id,] < 1 & x[ANPEP_id,] > 1} )\n%\n% HSMM <- classifyCells(HSMM, cth, 0.1)\n% @ %def\n%\n% \\item Cluster Cells with Known Marker Genes\n%\n% For this quick start we will be clustering cells using predetermined markers, however Monocle is capable of unsupervised cell clustering, but that is beyond the default settings that are displayed in this quick start.\n%\n% The markerDiffTable function accepts a CellDataSet and a CellTypeHierarchy as input and classifies all the cells in the CellDataSet into types in the CellTypeHierarchy.\n% <<quick_start_cell_clustering, eval = FALSE>>=\n% marker_diff <- markerDiffTable(HSMM[expressed_genes,],\n%                                cth,\n%                                residualModelFormulaStr = \"~Media\",\n%                                cores = detectCores())\n% @ %def\n%\n% <<include=FALSE, eval=TRUE>>=\n% set.seed(0)\n% @ %def\n%\n% We then assign all the genes with a q-value below 0.05 to a variable and calculate the \"specifity\" of those\n% genes to cell type listed in the CellTypeHierarchy. The \"specificity\" can range from 0 to 1, the closer it is to 1 the more restricted it is to the type in question. Afterwards, selectTopMarkers will return a data table\n% of the genes with the highest specificity which you can then use to determine which genes you will use for clustering. It's often best to choose the top 10 to 20 genes that are the most specific for each cell type for clustering.\n% <<quick_start_cell_clustering_candidate, eval = FALSE>>=\n% candidate_clustering_genes <- row.names(subset(marker_diff, qval < 0.05))\n% marker_spec <- calculateMarkerSpecificity(HSMM[candidate_clustering_genes,], cth)\n% head(selectTopMarkers(marker_spec, 10))\n% @ %def\n%\n% To cluster the cells we'll choose the top ten markers for each of the cell types. An example of the procedure of clusteringCells is shown below. The parameter of clusterCells(), residualModelFormulaStr, is a model formula that identifies the effects to subtract from the   data before clustering.\n% <<quick_start_cluster_cells, eval = FALSE>>=\n% semisup_clustering_genes <- unique(selectTopMarkers(marker_spec, 20)$gene_id)\n% HSMM <- setOrderingFilter(HSMM, semisup_clustering_genes)\n% HSMM <- clusterCells(HSMM,\n%                      num_clusters = 2,\n%                      clustering_genes = semisup_clustering_genes,\n%                      residualModelFormulaStr = \"~Media + num_genes_expressed\")\n% @ %def\n% \\item Semi-Supervised Ordering with Known Marker Genes\n%\n% To order cells in a semi-supervised manner, first, define genes that mark progress using a new\n% CellTypeHierarchy, much like we did for cell classifacation.\n% <<quick_start_cell_ordering_def_genes, eval = FALSE>>=\n% HSMM_myo <- HSMM[,pData(HSMM)$CellType == \"Myoblast\"]\n%\n% CCNB2_id <- row.names(subset(fData(HSMM_myo), gene_short_name == \"CCNB2\"))\n% MYH3_id <- row.names(subset(fData(HSMM_myo), gene_short_name == \"MYH3\"))\n%\n% @ %def\n%\n% Then select ordering genes that co-vary with these markers.\n% <<quick_start_cell_ordering_select_ordering_genes, eval = FALSE>>=\n%\n% cth <- newCellTypeHierarchy()\n% cth <- addCellType(cth, \"Cycling myoblast\", classify_func = function(x) {x[CCNB2_id,] >= 1})\n% cth <- addCellType(cth, \"Myotube\", classify_func = function(x) {x[MYH3_id,] >= 1})\n%\n% @ %def\n%\n% Finally, order the cells based on these genes.\n% <<quick_start_cell_ordering_order_cells, eval = FALSE>>=\n% marker_diff <- markerDiffTable(HSMM_myo[expressed_genes,],\n%                                cth,\n%                                cores = detectCores())\n% semisup_clustering_genes <- row.names(subset(marker_diff, qval < 0.01))\n% HSMM_myo <- setOrderingFilter(HSMM_myo, semisup_clustering_genes)\n% @ %def\n%\n% <<include=FALSE, eval=TRUE>>=\n% set.seed(0)\n% @ %def\n%\n% \\item Reduce Dimensionality of Data\n%\n% <<quick_start_reduce_dimensionality, eval = FALSE>>=\n% HSMM_myo <- reduceDimension(HSMM_myo, max_components = 2)\n% @ %def\n%\n% \\item Order Cells in Pseudotime\n%\n% <<quick_start_order_cells, eval = FALSE>>=\n% HSMM_myo <- orderCells(HSMM_myo, reverse = FALSE)\n% @ %def\n%\n% \\item Plot Genes in Pseudotime\n% The first three lines are used to filter through the data so that only pseudotime is plotted for desired\n% genes. The last line with the function \"plot\\_genes\\_in\\_pseudotime()\" will actually plot the genes.\n% <<quick_start_plot_genes_in_pseudotime, eval = FALSE>>=\n% HSMM_filtered <- HSMM_myo[expressed_genes,]\n% my_genes <- row.names(subset(fData(HSMM_filtered),\n%                              gene_short_name %in% c(\"CDK1\", \"MEF2C\", \"MYOG\")))\n% cds_subset <- HSMM_filtered[my_genes,]\n% plot_genes_in_pseudotime(cds_subset, color_by = \"Hours\")\n% @ %def\n%\n% \\item Determine Root of Branched Trajectory\n% Monocle cannot tell which side of the cell trajectory is the beginning, however it contains methods for each scenario to make sure that the trajectory is lined up correctly with the axis.\n%\n% If the trajectory DOES NOT contain multiple outcomes, this is easily solved by re-ordering the cells and setting the \"reverse\" parameter in the orderCells() function to TRUE as the example below demonstrates\n% <<quick_start_reverse_order_trajectory, eval = FALSE>>=\n% HSMM_myo <- orderCells(HSMM_myo, reverse = TRUE)\n% @ %def\n%\n% If the trajectory DOES contain multiple outcomes you can check to see if Monocle chose the correct branch as the start by generating two cell trajectories, one that colors by time and the other by pseudotime. If the branch that contains time 0, in the cell trajectory colored by time, is in the same position as the the branch that contains pseudotime 0, in the cell trajectory colored by pseudotime, then Monocle chose the correct starting point. Otherwise you will have to manually change it.\n% <<quick_start_find_root, eval = FALSE>>=\n% lung <- load_lung()\n%\n% plot_cell_trajectory(lung, color_by = \"Time\")\n% plot_cell_trajectory(lung, color_by = \"Pseudotime\")\n% @ %def\n%\n% In order to change the root we must first call plot trajectory coloring the cells by \"State\" to see what our options are for where we can set the root. State is Monocle's jargon for different portions of the tree. When this plot is created it will assign each branch a number\n% <<quick_start_change_root_locate_opts, eval = FALSE>>=\n% plot_cell_trajectory(lung, color_by = \"State\")\n% @ %def\n%\n% When you have determined which branch to set as the root, call orderCells() again and set the \"root\\_state\" parameter as the number associated with the branch you want as the root.\n% <<quick_start_change_root_make_change, eval = FALSE>>=\n% lung <- orderCells(lung, root_state = 3)\n% @ %def\n%\n% \\item Basic Differential Analysis\n% In the myoblast data, the cells in the beginning of the experiment were cultured in \"growth medium\" to prevent differentiation and later switched to \"differentiation medium\" to promote it. The following example describes how to show which genes are affected by the switch.\n% <<quick_start_basic_diff_analysis_table, eval = FALSE>>=\n% diff_test_res <- differentialGeneTest(HSMM_myo, fullModelFormulaStr = \"~Media\")\n% sig_genes <- subset(diff_test_res, qval < 0.1)\n% sig_genes[, c(\"gene_short_name\", \"pval\", \"qval\")]\n% @ %def\n%\n% Monocle also has tools that allow you to display your data with graphs to emphasize the differences revealed by the tests above. One type of plot is the \"jitter\" plot as shown in the below example.\n% <<quick_start_basic_diff_analysis_jitter, eval = FALSE>>=\n% MYOG_ID1 <- HSMM_myo[row.names(subset(fData(HSMM_myo),\n%                                       gene_short_name %in% c(\"MYOG\", \"CCNB2\"))),]\n% plot_genes_jitter(MYOG_ID1, grouping = \"Media\", ncol = 2)\n% @ %def\n%\n% \\item Find Genes that Distinguish Cell Type or State\n% To test the effects of CellType on gene expression, call differentialGeneTest() on the selected genes. In order to do so you must specify a model formula, a parameter of diff\\_test\\_res, that indicates we are looking for genes with expression levels that depend on CellType. We do not need to specify the reduced model because\n% the default value, 1, is what we want here.\n% <<quick_start_find_genes_ID_cell_type, eval = FALSE>>=\n% to_be_tested <- row.names(subset(fData(HSMM),\n%                                  gene_short_name %in% c(\"UBC\", \"NCAM1\", \"ANPEP\")))\n% cds_subset <- HSMM[to_be_tested,]\n% diff_test_res <- differentialGeneTest(cds_subset, fullModelFormulaStr = \"~CellType\")\n% diff_test_res[,c(\"gene_short_name\", \"pval\", \"qval\")]\n%\n% @ %def\n%\n% In order to see which genes are myoblast-specific we can again use a jitter plot to see.\n% <<quick_start_find_genes_ID_graph, eval = FALSE>>=\n%\n% plot_genes_jitter(cds_subset, grouping = \"~CellType\",\n%                   nrow = 1, ncol = NULL, plot_trend = TRUE)\n% @ %def\n%\n% \\item Find Genes That Are a Function of Pseudotime\n% Once Monocle is able to put cells in order of a biological process, you can analyze the cells to find genes that change as the cells make progress.\n% <<quick_start_find_genes_change_in_pseudotime_pick_genes, eval = FALSE>>=\n% to_be_tested <- row.names(subset(fData(HSMM),\n%                                  gene_short_name %in% c(\"MYH3\", \"MEF2C\", \"CCNB2\", \"TNNT1\")))\n% cds_subset <- HSMM[to_be_tested,]\n% @ % def\n%\n% We need to specify a model for differential analysis that indicates change across Pseudotime as the first line\n% below shows. The sm.ns in the model below indicates that Monocle should fit a natural spline through the expression values.\n% <<quick_start_find_genes_change_in_pseudotime_diff_analysis, eval = FALSE>>=\n% diff_test_res <- differentialGeneTest(cds_subset, fullModelFormulaStr = \"~sm.ns(Pseudotime)\")\n% diff_test_res[,c(\"gene_short_name\", \"pval\", \"qval\")]\n% @ %def\n%\n% We can plot the expression levels of these genes with the plot\\_genes\\_in\\_pseudotime() function.\n% <<quick_start_find_genes_change_in_pseudotime_graph, eval = FALSE>>=\n% plot_genes_in_pseudotime(cds_subset, color_by = \"Hours\")\n% @ %def\n%\n% \\item Analyzing Branches in Single-Cell Trajectories\n%\n% Monocle contains several tools for analyzing the branching events of trajectories with multiple outcomes.\n% To analyze how genes are expressed differently in a branch compared to its root, Monocle incorporates branched expression analysis modeling, or BEAM. BEAM takes a CellDataSet ordered by orderCells and the name of a branch point in the trajectory and returns a table of significance scores for each gene. Genes that score significant are branch-dependent in their expression.\n% <<quick_start_perform_BEAM, eval = FALSE>>=\n% lung <- load_lung()\n% BEAM_res <- BEAM(lung, branch_point = 1, cores = detectCores())\n% BEAM_res <- BEAM_res[order(BEAM_res$qval),]\n% BEAM_res <- BEAM_res[,c(\"gene_short_name\", \"pval\", \"qval\")]\n% @ %def\n%\n% <<include=FALSE, eval=TRUE>>=\n% set.seed(0)\n% @ %def\n%\n% You can visualize changes for all genes that are significantly branch-dependent with a special type of\n% heatmap. This heatmap will show both lineages simultaneously. This heatmap requires you to enter a specifc branch point. The start of the branch point is represented by the middle of the heatmap, going from the middle to the left is one branch and going from the middle to the right is the other branch.\n% <<quick_start_analyze_branches_single_cell_trajectory_heat, eval = FALSE>>=\n% plot_genes_branched_heatmap(lung[row.names(subset(BEAM_res, qval < 1e-4)),],\n%                             branch_point = 1,\n%                             num_clusters = 4,\n%                             cores = detectCores(),\n%                             use_gene_short_name = T,\n%                             show_rownames = T)\n% @ %def\n%\n% <<include=FALSE, eval=TRUE>>=\n% set.seed(0)\n% @ %def\n%\n% We can also plot these genes in pseudotime using plot\\_genes\\_branched\\_pseudotime() which is quite similar to plot\\_genes\\_in\\_pseudotime except that shows two kinetic trends, one for each lineage, instead of one.\n% <<quick_start_analayze_branches_single_cell_trajectory_heat, eval = FALSE>>=\n% lung_genes <- row.names(subset(fData(lung), gene_short_name %in% c(\"Ccnd2\", \"Sftpb\", \"Pdpn\")))\n% plot_genes_branched_pseudotime(lung[lung_genes,],\n%                                branch_point = 1,\n%                                color_by = \"Time\",\n%                                ncol = 1)\n% @ %def\n%\n\n \\section{The Scribe object}\n\n The \\Rpackage{monocle} package takes a matrix of gene expression values as calculated by Cufflinks\\cite{Trapnell:2012kp} or another gene expression estimation program. Monocle can work with relative expression values (e.g. FPKM or TPM units) or absolute transcript counts (e.g. from UMI experiments). Monocle also works ``out-of-the-box'' with the transcript count matrices produced by \\href{https://support.10xgenomics.com/single-cell/software/overview/welcome}{CellRanger}, the software pipeline for analyzing experiments from the 10X Genomics Chromium instrument. Monocle also works well with data from other RNA-Seq workflows such as \\href{http://biorxiv.org/content/early/2017/02/02/104844}{sci-RNA-Seq} and instruments like the Biorad ddSEQ. Although Monocle can be used with raw read counts, these are not directly proportional to expression values unless you normalize them by length, so some Monocle functions could produce nonsense results. If you don't have UMI counts, We recommend you load up FPKM or TPM values instead of raw read counts.\n\n \\subsection{The Scribe class: need to discuss}\n\n \\Rpackage{Scribe} holds single cell expression data in objects of the \\Rclass{CellDataSet} class. The class is derived from the Bioconductor \\Rclass{ExpressionSet} class, which provides a common interface familiar to those who have analyzed microarray experiments with Bioconductor. The class requires three input files:\n \\begin{enumerate}\n \\item \\Robject{exprs}, a numeric matrix of expression values, where rows are genes, and columns are cells\n \\item \\Robject{phenoData}, an \\Rpackage{AnnotatedDataFrame} object, where rows are cells, and columns are cell attributes (such as cell type, culture condition, day captured, etc.)\n \\item \\Robject{featureData}, an \\Rpackage{AnnotatedDataFrame} object, where rows are features (e.g. genes), and columns are gene attributes, such as biotype, gc content, etc.\n \\end{enumerate}\n\n The expression value matrix \\emph{must} have the same number of columns as the \\Robject{phenoData} has rows, and it must have the same number of rows as the \\Robject{featureData} data frame has rows. Row names of the \\Robject{phenoData} object should match the column names of the expression matrix. Row names of the \\Robject{featureData} object should match row names of the expression matrix. Also, one of the columns of the\n \\Robject{featureData} must be named \"gene\\_short\\_name\".\n\n You can create a new \\Rclass{CellDataSet} object as follows:\n\nThis will create a CellDataSet object with expression values measured in FPKM, a measure of relative expression reported by Cufflinks. By default, Monocle assumes that your expression data is in units of transcript counts and uses a negative binomial model to test for differential expression in downstream steps. However, if you're using relative expression values such as TPM or FPKM data, see below for how to tell Monocle how to model it in downstream steps.\n\n\\textbf{NOTE:} if you do have UMI data, you should \\emph{not} normalize it yourself prior to creating your \\Robject{CellDataSet}. You should also \\emph{not} try to convert the UMI counts to relative abundances (by converting it to FPKM/TPM data). You should \\emph{not} use \\Rfunction{relative2abs()} as discussed below in section \\ref{conv_rel2abs}. Monocle will do all needed normalization steps internally. Normalizing it yourself risks breaking some of Monocle's key steps.\n\n %\\section{Tips and tricks}\n\n\\section{Relationship between Scribe and Monocle 2 as well as other relevant packages}\n\\Rpackage{Scribe} relies on \\Rpackage{Monocle 2} for reconstructing the single-cell trajectory before inferring causal network. We extended \\Rpackage{Monocle 2} in a few aspects to account for the specific requirement for \\Rpackage{Scribe}. For example, in order to avoid the over-crowded nature of the cells at the terminal regions of the trajectory, we applied a simple strategy to first run Monocle 2 using DDRTree to get the trajectory with complex branches and then reorder the trajectory for each branch (from the source state to the terminal state) using principal curve (simplePPT) with the low dimension space obtained from the diffusion map dimension reduction technique. \\Rpackage{Scribe} provides various methods for infering the regulatory relationship, mutual information, Granger causality and CCM. We used the implementation from parmigene, vars and rEDM respectively. To intuitively visualize the casual regulation between pairs of genes, we generalized the DREVI approach (\\cite{}). The network visualization relies on the igraph, netbiov, arcdiagram as well as the HiveR packages.\n\nWe are preparing a manuscript describing \\Rpackage{Scribe} for reconstructing causal regulatory network.\n\n\\section{Theory behind Scribe}\\label{theory}\n\n\\subsection{Restricted direct information}\\label{RDI}\nA very well-known measure of interdependence of two random variables $X$ and $Y$ was first proposed by [cite] called mutual information, is defined as:\n\\begin{equation}\nI(X;Y)=\\sum_{x,y} p_{XY}(x,y) \\log\\frac{p_{XY}(x,y)}{p_X(x)p_Y(y)}\n\\end{equation}\n\nThe mutual information between $X$ and $Y$is equal to zero if and only if $X$ and $Y$ are independent. The mutual information of two variables given a third random variable $Z$ is defined as:\n\n\\begin{equation}\nI(X;Y|Z)=\\sum_{x,y,z} p_{XYZ}(x,y,z) \\log\\frac{p_{XY|Z}(x,y|z)}{p_{X|Z}(x|z)p_{Y|Z}(y|z)}\n\\end{equation}\n\nSimilarly, the mutual information between $X$ and $Y$ given $Z$ is equal to zero if and only if $X$ and $Y$ are independent given $Z$.\nIn general, $X$, $Y$ and $Z$ can be multi-dimensional random variables with arbitrary dimensions, such as in the case that the variables are time-series $\\underline{X}^t$, $\\underline{Y}^t$ and $\\underline{Z}^t$. So the mutual information between the time-series can be defined similarly as $ I(\\underline{X}^t,\\underline{Y}^t,\\underline{Z}^t) $.\nNow the question we might ask ourselves is is it possible to define a measure for the amount of information the past state(s) of $X$ provide about the current state of the variable $Z$ denoted by $Z(t-1)$? [cite: DI paper] provides such a measure called Directed Information, sometimes referred to as \"Transfer Entropy\" [cite: T. Schreiber, Measuring information transfer,\" Physical review letters, vol. 85, no. 2, p. 461, 2000]. The directed information from the time-series $\\underline{X}^T$ to $\\underline{Y}^T$ is defined as:\n\n\\begin{equation}\nDI(X\\rightarrow Y)=\\sum_{t=1}^T I(\\underline{X}^{t-1}; Y(t)|\\underline{Y}^{t-1})\n\\end{equation}\n\n\nThe conditioned version of it also can be defined similarly:\n\n\\begin{equation}\nDI(X\\rightarrow Y|Z)=\\sum_{t=1}^T I(\\underline{X}^{t-11}; Y(t)|\\underline{Y}^{t-1},\\underline{Z}^{t-1})\n\\end{equation}\n\n(Mention the theorem for DI) [Cite DI paper]\n\nIn [Cite DI paper] it is shown that if the system is not purely deterministic, then the directed information graph (DIG) and the causality graph (CG) are identical. However, they have shown that if the relationship in the dynamic system is purely deterministic, then the algorithm is unable to return the correct causality graph. It is contrary to CCM method which only deals with the deterministic systems and is unable to perceive the graph in a stochastic (noisy) system.\nThus in the case of the first-order Markov systems we introduce an alternate version of DI which employs only the immediate past of the system instead of the whole past samples:\n\n\\begin{equation}\nDI(X\\rightarrow Y)= I \\left( X(t-1); Y(t)|Y(t-1) \\right)\n\\end{equation}\n\nand the conditioned version of it can be expressed as:\n\n\\begin{equation}\nDI(X\\rightarrow Y|Z)= I \\left( X(t-1); Y(t)|Y(t-1),Z(t-1) \\right)\n\\end{equation}\n\nIn [Cite: Our Allerton paper] it's shown that this method works in many stochastic or deterministic cases and under some mild assumptions it's capable of inferring the correct graph.\n\n\\subsection{Network sparsifier}\n%\n% \\section{Using Monocle with other data types}\n%\n% This section is yet to be written.\n\n \\section{Citation}\\ref{citations}\n If you use \\Rpackage{Scribe} to analyze your experiments, please cite:\n<<citation, eval=TRUE>>=\ncitation(\"Scribe\")\n@ %def\n\n \\section{Acknowledgements}\n\nScribe was written by Xiaojie Qiu which is based on the python package originally developed by Arman Rahimzamani, with substantial design input Cole Trapnell and Sreeram Kannan. The core of Scribe on estimating restricted direction information (RDI) is written in Rcpp for speed accerlationp. We are grateful to all members from Trapnell and Kannan lab, especially XXX for technical assistance, and Andysheh Mohajeri, Jonanthan Packer, XXX etc. for helpful discussions. This work was supported by  US National Institutes of Health (NIH) grants DP2 HD088158 (C.T.) and U54 DK107979 (C.T.), XXXXXX; C.T. is partly supported by a Dale. F. Frey Award for Breakthrough Scientists and an Alfred P. Sloan Foundation Research Fellowship.\n\nThis vignette was created from Wolfgang Huber's Bioconductor vignette style document, and patterned after the vignette for \\Rpackage{DESeq}, by Simon Anders and Wolfgang Huber.\n\n\\section{Session Info}\n<<sessi>>=\nsessionInfo()\n@\n\n\\bibliographystyle{unsrt}\n\\bibliography{Scribe_alg}\n\n\\end{document}",
    "created" : 1507049951277.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "590191954",
    "id" : "90EDCAA5",
    "lastKnownWriteTime" : 1507188066,
    "last_content_update" : 1507188066757,
    "path" : "~/Dropbox (Personal)/Projects/Causal_network/causal_network/Cpp/Real_deal/Scribe/Scribe/vignettes/Scribe-vignette.Rnw",
    "project_path" : "vignettes/Scribe-vignette.Rnw",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "sweave"
}
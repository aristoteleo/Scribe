{
    "collab_server" : "",
    "contents" : "#test InformationEstimator\n\nmessage('test vd')\nlibrary(Scribe)\nvd(10)\n\n# 0.9361576864649548\n\nmessage('test get_NN_2Set')\nlibrary(Scribe)\nload('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/XYZ.txt')\nXYZ <- t(XYZ)\ndimensioon <- 3; ND <- 100000; NQ <- 100000; k <- 5; eps <- 0; searchtypeInt <- 1; tree_type <- 1; radius <- 0; \nnn.idx <- 1L; dists <- 0.1;\nres <- get_NN_2Set(XYZ[, ], XYZ[, ], 3L, 100000L, 100000L, 5L, as.double(0.0), 1L, 0L, as.double(0.0), dists, T)\n\ndata_nmslib <- read.table(\"/Users/xqiu/Dropbox (Personal)/Projects/Genes_Inference_in_Cell_Differentiation_Process/notebook/data_nmslib.txt\", sep = '\\t')\nres <- get_NN_2Set(XYZ[, ], XYZ[, ], 3L, 100000L, 100000L, 5L, as.double(0.0), 1L, 0L, as.double(0.0), dists, T)\na <- Sys.time(); res <- Neighbour(data_nmslib, data_nmslib, 1000, cores = 1); b <- Sys.time()\n# \n\nmessage('test entropy')\nlibrary(Scribe)\nentropy(as.matrix(XYZ[, 1]), 5)\n\n# 1.1298735949169973\n\nmessage('test mi')\nlibrary(Scribe)\na <- Sys.time()\nmi(as.matrix(XYZ[, 1]), as.matrix(XYZ[, 2]), 5, normalize = 0)\nmi(as.matrix(XYZ[, 1]), as.matrix(XYZ[, 3]), 5, normalize = 0)\nmi(as.matrix(XYZ[, 2]), as.matrix(XYZ[, 3]), 5, normalize = 0)\nmi(as.matrix(XYZ[, 1]), as.matrix(XYZ[, 1]), 5, normalize = 0)\nmi(as.matrix(XYZ[, 3]), as.matrix(XYZ[, 3]), 5, normalize = 0)\nmi(as.matrix(XYZ[, 2]), as.matrix(XYZ[, 2]), 5, normalize = 0)\nb <- Sys.time()\nb - a \n\n# 1.88421442831\n# 1.4081763245\n# 1.82672752049\n# 10.0068027965\n# 10.0068027965\n# 10.0068027965\n\n# Time difference of 16.8602 secs\n\nmessage('test cmi')\nlibrary(Scribe)\na <- Sys.time()\ncmi(as.matrix(XYZ[, 1]), as.matrix(XYZ[, 2]), as.matrix(XYZ[, 3]), 5, normalize = 0)$cmi_res;\ncmi(as.matrix(XYZ[, 1]), as.matrix(XYZ[, 3]), as.matrix(XYZ[, 2]), 5, normalize = 0)$cmi_res;\ncmi(as.matrix(XYZ[, 2]), as.matrix(XYZ[, 3]), as.matrix(XYZ[, 1]), 5, normalize = 0)$cmi_res;\nb <- Sys.time()\nb - a \n\n# 0.47189332607\n# 0.00569163896183\n# 0.411085051308\n\n# Time difference of 35.11695 secs\n\nrun_vec <- rep(1, ncol(XYZ))\ntmp <- expand.grid(1:ncol(XYZ), 1:ncol(XYZ), stringsAsFactors = F)\nsuper_graph <- tmp[tmp[, 1] != tmp[, 2], ] - 1 # convert to C++ index\nsuper_graph <- super_graph[, c(2, 1)]\n\nrdi_list <- calculate_rdi_cpp_wrap(XYZ, delay = c(1), as.matrix(super_graph), method = 1, turning_points = 0)\ncrdi_list <- calculate_conditioned_rdi(XYZ, as.matrix(super_graph), rdi_list, 1)\n\n\nrun_vec <- rep(1, 401)\nrun_vec <- rep(1, ncol(neuron_sim_cds))\ntmp <- expand.grid(1:ncol(neuron_sim_cds), 1:ncol(neuron_sim_cds), stringsAsFactors = F)\nsuper_graph <- tmp[tmp[, 1] != tmp[, 2], ] - 1 # convert to C++ index\nsuper_graph <- super_graph[, c(2, 1)]\n\nres <- read.csv(\"/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Python_code/simulation_expr_mat_nonlinear_n_4_step_400_N_end_400\", sep = '\\t', row.names = 1)\ndata <- res\nneuron_rdi_list2 <- calculate_rdi_multiple_run_cpp(t(data), delay = c(1), run_vec - 1, as.matrix(super_graph), method = 1, turning_points = 0) #* 100 + noise\n\nneuron_rdi_list <- calculate_rdi_cpp_wrap(t(data), delay = c(1), as.matrix(super_graph), method = 1, turning_points = 0) #* 100 + noise\n\nnoise <- matrix(rnorm(ncol(data) * 2, sd = 0), ncol = 2)\nmi(matrix(as.numeric(data['Pax6', ]), ncol = 1), matrix(as.numeric(data['Mash1', ]), ncol = 1), k = 5, normalize = 0)\nmi(matrix(as.numeric(data['Brn2', ]) + noise[, 1], ncol = 1), matrix(as.numeric(data['Aldh1L', ]) + noise[, 1], ncol = 1), k = 5, normalize = 0)\nmi(matrix(as.numeric(data['Brn2', ]), ncol = 1), matrix(as.numeric(data['Hes5', ]), ncol = 1), k = 5, normalize = 0)\n\nres <- read.csv(\"/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Python_code/test_data.txt\", sep = '\\t')\n\ntest <- t(data[c('Brn2', 'Aldh1L'), ]) \ntest <- unique(test)\n\nmi(matrix(test[, 1], ncol = 1), matrix(test[, 2], ncol = 1), k = 5, normalize = 0)\n\ntest_res <- RANN::nn2(test, k = 6)\ndists <- 0.1\n\n# get_NN_2Set_cpp(const NumericMatrix& data, const NumericMatrix& query_data, int& D, int& ND, int& NQ, int& K, double& EPS,\n#                 int& SEARCHTYPE, int& USEBDTREE, double& SQRAD, NumericVector& distances) // const NumericVector& query,  IntegerVector& nn_index, \n\nres <- get_NN_2Set(test, test, 2L, 402, 402, 5L, as.double(0.0), 1L, 0L, as.double(0.0), dists, T)\nget_points_in_radius_cpp(test, test, 2L, 402, 402, 5L, as.double(0.0), 1L, 0L, as.double(0.0), res$distances, T)\ntest_res <- RANN::nn2(test, k = 6)\n\n################################################################################################################################################################################\n# test the relationship between cmi value and the pseudotime \n################################################################################################################################################################################\n\n################################################################################################################################################################################\n# real data \n################################################################################################################################################################################\nlung <- load_lung()\nlung_AT1 <- lung[, pData(lung)$State %in% c(2, 3)]\nlung_AT1 <- lung_AT1[, order(pData(lung_AT1)$Pseudotime)]\ndelay <- 5\nx <- exprs(lung_AT1[2, 5:(ncol(lung_AT1) - 1)])\ny <- exprs(lung_AT1[45, 6:(ncol(lung_AT1))])\nz <- exprs(lung_AT1[45, 5:(ncol(lung_AT1) - 1)])\ncmi_res <- cmi(t(as.matrix(x)), t(as.matrix(y)), t(as.matrix(z)), k = 5)\nqplot(1:length(cmi_res$information_samples), cmi_res$information_samples)\n\ngene_num <- nrow(lung)\npseudotime_cmi_res_df <- matrix(nrow = gene_num * (gene_num - 1), ncol = length(cmi_res$information_samples))\ncnt <- 1\n\n################################################################################################################################################################################\n# make a heatmap for all pairwise relationship\n################################################################################################################################################################################\nfor(i in 1:nrow(lung)) {\n  message('current i is ', i)\n  for(j in 1:nrow(lung)) {\n    if(i == j)\n      next; \n    x <- exprs(lung_AT1[i, delay:(ncol(lung_AT1) - 1)])\n    y <- exprs(lung_AT1[j, (delay + 1):(ncol(lung_AT1))])\n    z <- exprs(lung_AT1[j, delay:(ncol(lung_AT1) - 1)])\n    cmi_res <- cmi(t(as.matrix(x)), t(as.matrix(y)), t(as.matrix(z)), k = 5)\n    pseudotime_cmi_res_df[cnt, ] <- cmi_res$information_samples\n    cnt <- cnt + 1\n  }\n}\n\n# make smooth curves for the temporal variation of the information samples \n# only check for the positive gene-pairs\nmean_cmi <- rowMeans(pseudotime_cmi_res_df)\ntest <- di::smooth_genes(t(pseudotime_cmi_res_df[which(mean_cmi > 0), ]), window_size = 20)\npheatmap::pheatmap(t(test), cluster_cols = F)\n\n################################################################################################################################################################################\n# simulation data \n################################################################################################################################################################################\nload('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/RData/neuron_network')\ngene_name_vec <- c('Pax6', 'Mash1', 'Brn2', 'Zic1', 'Tuj1', 'Hes5', 'Scl', 'Olig2', 'Stat3', 'Myt1L', 'Aldh1L', 'Sox8', 'Mature')\n\ncell_simulate <- readMat('/Users/xqiu/Dropbox (Personal)/Projects/DDRTree_fstree/DDRTree_fstree/mat_data/cell_simulate.mat')\nall_cell_simulation <- cell_simulate$cell.simulate[, 1:400, ] #time 0-20 are the period two branches appear\nexample_data <- all_cell_simulation[, , 1]\n\ntmp <- expand.grid(1:ncol(t(example_data)), 1:ncol(t(example_data)), stringsAsFactors = F)\nsuper_graph <- tmp[tmp[, 1] != tmp[, 2], ] - 1 # convert to C++ index\nsuper_graph <- super_graph[, c(2, 1)]\n\ndelay <- 1\nx <- example_data[1, delay:(ncol(example_data) - 1)]\ny <- example_data[2, (delay + 1):(ncol(example_data))]\nz <- example_data[2, (delay):(ncol(example_data) - 1)]\ncmi_res <- cmi(matrix(x, ncol = 1), matrix(y, ncol = 1), matrix(z, ncol = 1), k = 5)\nqplot(1:length(cmi_res$information_samples), cmi_res$information_samples)\ncmi_res$information_samples\n\n# simulation data (when n = 1)\ndata_ori <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Python_code/simulation_expr_mat_n_equal_1.txt', sep = '\\t', skip = 1)\nx3d <- array(dim = c(13, 101, 20))\n\ndata_ori_gene_unique <- unique(data_ori$V1)\n\ndata_ori$V2\nfor(i in 1:dim(x3d)[1]) {\n  for(j in 1:dim(x3d)[3]) {\n    x3d[i, , j] <- as.numeric(data_ori[data_ori$V1 == data_ori_gene_unique[i] & data_ori$V2 == paste0(\"R\", j), -c(1:2)]) # make sure data_ori$V2 has R#\n  }\n}\n\ndim(x3d)  \nexample_data <- x3d[, , 1]\n################################################################################################################################################################################\n# show the gene expression \n################################################################################################################################################################################\n\n# make a heatmap for all pairwise relationship\n# real data \ngene_num <- nrow(example_data)\npseudotime_cmi_res_df <- matrix(nrow = gene_num * (gene_num - 1), ncol = length(cmi_res$information_samples))\ncnt <- 1\n\ncmi_res_df <- matrix(0, nrow = 13, ncol = 13)\nfor(i in 1:nrow(example_data)) {\n  message(\"current i is \", i)\n  for(j in 1:nrow(example_data)) {\n    if(i == j)\n      next; \n    x <- example_data[i, delay:(ncol(example_data) - 1)]\n    y <- example_data[j, (delay + 1):(ncol(example_data))]\n    z <- example_data[j, (delay):(ncol(example_data) - 1)]\n    cmi_res <- cmi(matrix(x, ncol = 1), matrix(y, ncol = 1), matrix(z, ncol = 1), k = 5)\n    pseudotime_cmi_res_df[cnt, ] <- cmi_res$information_samples\n    cnt <- cnt + 1\n    \n    cmi_res_df[i, j] <- cmi_res$cmi_res\n  }\n}\n\n# only check for the positive gene-pairs\nmean_cmi <- rowMeans(pseudotime_cmi_res_df)\ntest <- di::smooth_genes(t(pseudotime_cmi_res_df[which(mean_cmi > 0), ]), window_size = 20)\n# set the name for the gene pair below: \ngene_uniq <- unique(c(as.character(neuron_network[, 1]), as.character(neuron_network[, 2])))\nall_cmbns <- expand.grid(gene_name_vec, gene_name_vec)\nvalid_all_cmbns <- all_cmbns[all_cmbns$Var1 != all_cmbns$Var2, ]\nvalid_all_cmbns_df <- data.frame(pair = paste(tolower(valid_all_cmbns$Var2), tolower(valid_all_cmbns$Var1), sep = '_'), pval = 0)\nrow.names(valid_all_cmbns_df) <- valid_all_cmbns_df$pair\nvalid_all_cmbns_df[paste(tolower(neuron_network$V1), tolower(neuron_network$V2), sep = '_'), 2] <- 1\n\ntest <- t(test)\nrow.names(test) <- valid_all_cmbns_df$pair[which(mean_cmi > 0)]\n\npheatmap::pheatmap(test[, ], cluster_cols = F, cluster_rows = F, annotation_names_row = T)\n\nrow.names(pseudotime_cmi_res_df) <- valid_all_cmbns_df$pair\npheatmap::pheatmap(pseudotime_cmi_res_df, cluster_cols = F, cluster_rows = F, annotation_names_row = T)\n\n################################################################################################################################################################################\n# show the result for cRDI \n################################################################################################################################################################################\n\n# calculate rdi values\nrun_vec <- rep(1, ncol(example_data))\na <- Sys.time()\nrdi_list <- calculate_rdi_multiple_run_cpp(t(example_data), delay = 1, run_vec - 1, as.matrix(super_graph), method = 1) #calculate_rdi(data_noise, delay, method = 1)\nb <- Sys.time()\nrdi_time <- b - a\n\ntop_k_list <- extract_top_incoming_nodes_delays(rdi_list$max_rdi_value, rdi_list$max_rdi_delays, 1)\ncon_pseudotime_cmi_res_df <- matrix(nrow = gene_num * (gene_num - 1), ncol = length(cmi_res$information_samples))\n\n# di::di_single_run_conditioned\n# function (x, y, z, n = 10) \n# {\n#   if (is.numeric(x)) \n#     x <- as.matrix(x)\n#     if (is.numeric(y)) \n#       y <- as.matrix(y)\n#       if (is.numeric(z)) \n#         z <- as.matrix(z)\n#         if (ncol(x) != ncol(y)) \n#           stop(\"The number of time samples has to be the same for X and Y\")\n#           if (nrow(x) != nrow(z)) \n#             stop(\"The number of time samples has to be the same for X and all Zs\")\n#             tau <- n\n#             tot_len <- nrow(x) - tau\n#             x_past <- x[(tau):(tau - 1 + tot_len), ]\n#           yz_past <- y[(tau):(tau - 1 + tot_len), ]\n#           for (i in 1:n) {\n#             if (i > 1) {\n#               x_past <- cbind(x[(tau - i + 1):(tau - i + tot_len), \n#               ], x_past)\n#               yz_past <- cbind(y[(tau - i + 1):(tau - i + tot_len), \n#               ], yz_past)\n#             }\n#             for (j in 1:ncol(z)) {\n#               yz_past <- cbind(z[(tau - i + 1):(tau - i + tot_len), \n#                                j], yz_past)\n#             }\n#           }\n#           return(cmi(x_past, y[(tau + 1):(tau + tot_len), ], yz_past))\n# }\n\n\ncnt <- 1\ncmi_res_df <- matrix(0, nrow = 13, ncol = 13)\nfor(i in 1:nrow(example_data)) {\n  message(\"current i is \", i)\n  for(j in 1:nrow(example_data)) {\n    if(i == j)\n      next; \n    \n    z_top_k_ind <- top_k_list$top_incoming_nodes[j, 1] + 1\n    if(z_top_k_ind == i)\n      z_top_k_ind <- top_k_list$top_incoming_nodes[j, 2] + 1\n    x_past <- example_data[i, delay:(ncol(example_data) - 1)]\n    yz_past <- example_data[j, (delay):(ncol(example_data) - 1)]\n    yz_past <- rbind(example_data[z_top_k_ind, delay:(ncol(example_data) - 1)], yz_past)\n    y_past <- example_data[j, (delay + 1):(ncol(example_data))]\n    \n    cmi_res <- cmi(matrix(x_past, ncol = 1), matrix(y_past, ncol = 1), t(yz_past), k = 5)\n    con_pseudotime_cmi_res_df[cnt, ] <- cmi_res$information_samples\n    cnt <- cnt + 1\n    cmi_res_df[i, j] <- cmi_res$cmi_res\n  }\n}\n\ncon_rdi_res_test <- calculate_multiple_run_conditioned_rdi_wrap(t(example_data), as.matrix(super_graph), as.matrix(rdi_list$max_rdi_value), as.matrix(rdi_list$max_rdi_delays), run_vec - 1, 1)\n\ncmi_res_df - con_rdi_res_test\na <- Sys.time()\nrdi_list <- calculate_rdi_multiple_run_cpp(t(example_data), delay = c(1), run_vec - 1, as.matrix(super_graph), method = 1) #* 100 + noise\n# rdi_list <- calculate_rdi_multiple_run_cpp(data_rem_dup, delay = c(1), run_vec[!duplicated(data)] - 1, as.matrix(super_graph_remove_dup), method = 1) # + noise_remove_dup\nb <- Sys.time()\nrdi_time <- b - a\n\ndimnames(rdi_list$max_rdi_value) <- list(uniq_gene, uniq_gene)\ncon_rdi_res_test <- calculate_multiple_run_conditioned_rdi_wrap(t(example_data), as.matrix(super_graph), as.matrix(rdi_list$max_rdi_value), as.matrix(rdi_list$max_rdi_delays), run_vec - 1, 1)\ndimnames(con_rdi_res_test) <- list(uniq_gene, uniq_gene)\n\nrow.names(con_pseudotime_cmi_res_df) <- valid_all_cmbns_df$pair\npheatmap::pheatmap(con_pseudotime_cmi_res_df, cluster_cols = F, cluster_rows = F, annotation_names_row = T)\n\n\n# # test the comprehensive dataset and show the result :\n\n# # read the file and then calculate the RDI values for each pair of genes \n# neuronsame_cell_two_stage_dropout_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/neuronsame_cell_two_stage_dropout_pseudotime.txt', sep = '\\t')\n# # calculate AUC and then make the boxplot: \n# run_ids <- unique(neuronsame_cell_two_stage_dropout_pseudotime$V2)\n\n# for(id in run_ids) {\n#   subset_exprs_mat <- as.matrix(subset(neuronsame_cell_two_stage_dropout_pseudotime, V2 == 'R145')[, -c(1:3)])\n#   noise = matrix(rnorm(mean = 0, sd = 1e-10, nrow(subset_exprs_mat) * ncol(subset_exprs_mat)), nrow = nrow(subset_exprs_mat))\n\n#   subset_exprs_mat_noise <- subset_exprs_mat + noise\n#   subset_exprs_mat_noise <- subset_exprs_mat_noise - min(subset_exprs_mat_noise)\n\n#   a <- Sys.time()\n#   RDI_parallel_res <- calculate_rdi(t(subset_exprs_mat_noise), delays = c(1, 2, 3))\n#   b <- Sys.time()\n\n#   a <- Sys.time()\n#   cRDI_parallel_res <- calculate_conditioned_rdi(t(subset_exprs_mat) + noise, rdi_list = RDI_parallel_res)\n#   b <- Sys.time()\n\n# }\n# \n# \n# library(InformationEstimator)\n# library(monocle)\n# library(destiny)\n# \n# a <- Sys.time()\n# res <- wired(Olsson_monocyte_cds, TF_vec_id, informative_genes)\n# b <- Sys.time()\n# # # cluster of genes \n# # match(c(\"Irf8\", \"Gfi1\"), names(sort(apply(RDI_parallel_res$RDI[TF_vec_id, paste0(\"cluster_\", 1:6)], 1, function(x) sum(x[x > 0]) ))))\n# # \n# # mlt_smooth_avg_clust_exp <- melt(smooth_avg_clust_exp)\n# # mlt_smooth_avg_clust_exp$Time <- rep(1:199, times = 6)\n# # \n# # qplot(Time, value, data = mlt_smooth_avg_clust_exp, color = variable)\n# # \n# # # a table between TFs to the clusters (make a heatmap)\n# # sum_rdi_res <- matrix(0, nrow = length(TF_vec_id), ncol = 6)\n# # cluster_avg_sum_rdi_res <- matrix(0, nrow = length(TF_vec_id), ncol = 6)\n# # \n# # for(i in 1:6)\n# # {\n# #   for(j in 1:length(TF_vec_id))\n# #   {\n# #     #sum_rdi_res[j, i] <- mean(mono_RDI_10[TF_vec_id[j], row.names(subset(annotation_row, Cluster == i))], na.rm = T)\n# #     cluster_avg_sum_rdi_res[j, i] <- mean(RDI_parallel_res$RDI[TF_vec_id[j], paste0('cluster_', i)], na.rm = T)\n# #   }\n# # }\n# # \n# # dimnames(sum_rdi_res) <- list(TF_vec_id, paste0('cluster_', 1:6))\n# # pheatmap::pheatmap(sum_rdi_res, cluster_rows = F, cluster_cols = F)\n# # \n# # dimnames(cluster_avg_sum_rdi_res) <- list(TF_vec_id, paste0('cluster_', 1:6))\n# # pheatmap::pheatmap(cluster_avg_sum_rdi_res, cluster_rows = F, cluster_cols = F)\n# # \n# # ################################################################################################################################################\n# # # run RDI from all genes to the six categories: \n# # ################################################################################################################################################\n# # TF_exprs_data <- scale(t(exprs(cds)[, ]))\n# # TF_cluster_exprs_data <- cbind(smooth_avg_clust_exp, TF_exprs_data)\n# # \n# # TF_target_pair <- expand.grid(row.names(cds), paste0(\"cluster_\", 1:6), stringsAsFactors = F)\n# # tmp <- rbind(TF_pair, TF_target_pair)\n# # \n# # tmp[, 1] <- match(tmp[, 1], colnames(TF_cluster_exprs_data))\n# # tmp[, 2] <- match(tmp[, 2], colnames(TF_cluster_exprs_data))\n# # \n# # a <- Sys.time()\n# # RDI_parallel_res <- calculate_rdi(TF_cluster_exprs_data, delays = 10, super_graph = TF_target_pair, method = 1) # + noise c(5, 10, 15)\n# # b <- Sys.time()\n# # \n# # # run it \n\n# #################################################################################################################################################\n# # test the errors generated during the real tests\n# #################################################################################################################################################\n# library(R.matlab)\n# library(monocle)\n# library(InformationEstimator)\n# library(destiny)\n# library(diffusionMap)\n# library(xacHelper)\n# library(reshape2)\n# library(stringr)\n\n# source(\"/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Scripts/function.R\", echo = T)\n# oligodendrocytedifferent_cell_pseudotime <- calStatistics(oligodendrocytedifferent_cell_pseudotime, reference_network_pvals) # this one crashes at R11 \n\n# subset_exprs_mat <- as.matrix(subset(oligodendrocytedifferent_cell_pseudotime, V2 == \"R11\")[, -c(1:2)]) # remove first two columns: gene_name / run \n# noise = matrix(rnorm(mean = 0, sd = 1e-10, nrow(subset_exprs_mat) * ncol(subset_exprs_mat)), nrow = nrow(subset_exprs_mat)) # add noise to break tie \n\n# subset_exprs_mat_noise <- subset_exprs_mat + noise \n# subset_exprs_mat_noise <- subset_exprs_mat_noise - min(subset_exprs_mat_noise)\n\n# a <- Sys.time() # calculate RDI \n# RDI_parallel_res <- calculate_rdi(t(subset_exprs_mat_noise), delays = c(1, 2, 3))\n# b <- Sys.time()\n\n# a <- Sys.time() # calculate cRDI \n# cRDI_parallel_res <- calculate_conditioned_rdi(t(subset_exprs_mat_noise), rdi_list = RDI_parallel_res)\n# b <- Sys.time()\n\n# RDI_parallel_res_list <- list()\n# cRDI_parallel_res_list <- list() \n# subset(oligodendrocytedifferent_cell_pseudotime, V2 == 'R11')\n\n# oligodendrocytedifferent_cell_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/oligodendrocytedifferent_cell_pseudotime.txt', sep = '\\t')\n\n# source(\"/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Scripts/analysis_sparsity_network.R\", echo = T)\n# set.seed(2017)\n# oligodendrocytedifferent_cell_pseudotime <- calStatistics(oligodendrocytedifferent_cell_pseudotime, reference_network_pvals)\n\n# astrocytedifferent_cell_realtime_zero_forcing <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/astrocytedifferent_cell_realtime_zero_forcing.txt', sep = '\\t')\n# set.seed(2017)\n# astrocytedifferent_cell_realtime_zero_forcing <- calStatistics(astrocytedifferent_cell_realtime_zero_forcing, reference_network_pvals) # crash at run 22\n\n# ######################################################################################################################################################################################################\n# # a. same cell but with Pseudotime\n# neurondifferent_cell_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/neurondifferent_cell_pseudotime.txt', sep = '\\t')\n# astrocytedifferent_cell_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/astrocytedifferent_cell_pseudotime.txt', sep = '\\t')\n# oligodendrocytedifferent_cell_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/oligodendrocytedifferent_cell_pseudotime.txt', sep = '\\t')\n\n# # b. different cell real time but with zero-forcing\n# neurondifferent_cell_realtime_zero_forcing <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/neurondifferent_cell_realtime_zero_forcing.txt', sep = '\\t')\n# astrocytedifferent_cell_realtime_zero_forcing <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/astrocytedifferent_cell_realtime_zero_forcing.txt', sep = '\\t')\n# oligodendrocytedifferent_cell_realtime_zero_forcing <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/oligodendrocytedifferent_cell_realtime_zero_forcing.txt', sep = '\\t')\n\n# # c. different cell but with time sampled from a Guassian distribution\n# neurondifferent_cell_gaussian_time <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/neurondifferent_cell_gaussian_time.txt', sep = '\\t')\n# astrocytedifferent_cell_gaussian_time <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/astrocytedifferent_cell_gaussian_time.txt', sep = '\\t')\n# oligodendrocytedifferent_cell_gaussian_time <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/oligodendrocytedifferent_cell_gaussian_time.txt', sep = '\\t')\n\n# # d. different cell but with time sampled from a Guassian distribution\n# neurondifferent_cell_gaussian_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/neurondifferent_cell_gaussian_pseudotime.txt', sep = '\\t')\n# astrocytedifferent_cell_gaussian_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/astrocytedifferent_cell_gaussian_pseudotime.txt', sep = '\\t')\n# oligodendrocytedifferent_cell_gaussian_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/oligodendrocytedifferent_cell_gaussian_pseudotime.txt', sep = '\\t')\n\n# # e. different cell but with cells with time sampled from a Guassian distribution; Pseudotime is used\n# neurondifferent_cell_gaussian_zero_time_forcing <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/neurondifferent_cell_gaussian_time_zero_forcing.txt', sep = '\\t')\n# astrocytedifferent_cell_gaussian_zero_time_forcing <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/astrocytedifferent_cell_gaussian_time_zero_forcing.txt', sep = '\\t')\n# oligodendrocytedifferent_cell_gaussian_zero_time_forcing <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/oligodendrocytedifferent_cell_gaussian_time_zero_forcing.txt', sep = '\\t')\n\n# # e. different cell but with cells with time sampled from a Guassian distribution; Pseudotime is used\n# neurondifferent_cell_gaussian_zero_forcing_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/neurondifferent_cell_gaussian_zero_forcing_pseudotime.txt', sep = '\\t')\n# astrocytedifferent_cell_gaussian_zero_forcing_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/astrocytedifferent_cell_gaussian_zero_forcing_pseudotime.txt', sep = '\\t')\n# oligodendrocytedifferent_cell_gaussian_zero_forcing_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/oligodendrocytedifferent_cell_gaussian_zero_forcing_pseudotime.txt', sep = '\\t')\n# ######################################################################################################################################################################################################\n# set.seed(2017)\n# neurondifferent_cell_pseudotime <- calStatistics(neurondifferent_cell_pseudotime, reference_network_pvals)\n# astrocytedifferent_cell_pseudotime <- calStatistics(astrocytedifferent_cell_pseudotime, reference_network_pvals)\n# oligodendrocytedifferent_cell_pseudotime <- calStatistics(oligodendrocytedifferent_cell_pseudotime, reference_network_pvals) # this one crashes at R11 \n\n# neurondifferent_cell_realtime_zero_forcing <- calStatistics(neurondifferent_cell_realtime_zero_forcing, reference_network_pvals)\n# astrocytedifferent_cell_realtime_zero_forcing <- calStatistics(astrocytedifferent_cell_realtime_zero_forcing, reference_network_pvals) # crash at run 22\n# oligodendrocytedifferent_cell_realtime_zero_forcing <- calStatistics(oligodendrocytedifferent_cell_realtime_zero_forcing, reference_network_pvals)\n\n# neurondifferent_cell_gaussian_time <- calStatistics(neurondifferent_cell_gaussian_time, reference_network_pvals)\n# astrocytedifferent_cell_gaussian_time <- calStatistics(astrocytedifferent_cell_gaussian_time, reference_network_pvals)\n# oligodendrocytedifferent_cell_gaussian_time <- calStatistics(oligodendrocytedifferent_cell_gaussian_time, reference_network_pvals)\n\n# neurondifferent_cell_gaussian_pseudotime <- calStatistics(neurondifferent_cell_gaussian_pseudotime, reference_network_pvals)\n# astrocytedifferent_cell_gaussian_pseudotime <- calStatistics(astrocytedifferent_cell_gaussian_pseudotime, reference_network_pvals)\n# oligodendrocytedifferent_cell_gaussian_pseudotime <- calStatistics(oligodendrocytedifferent_cell_gaussian_pseudotime, reference_network_pvals)\n\n# neurondifferent_cell_gaussian_zero_time_forcing <- calStatistics(neurondifferent_cell_gaussian_zero_time_forcing, reference_network_pvals)\n# astrocytedifferent_cell_gaussian_zero_time_forcing <- calStatistics(astrocytedifferent_cell_gaussian_zero_time_forcing, reference_network_pvals)\n# oligodendrocytedifferent_cell_gaussian_zero_time_forcing <- calStatistics(oligodendrocytedifferent_cell_gaussian_zero_time_forcing, reference_network_pvals)\n\n# neurondifferent_cell_gaussian_zero_forcing_pseudotime <- calStatistics(neurondifferent_cell_gaussian_zero_forcing_pseudotime, reference_network_pvals)\n# astrocytedifferent_cell_gaussian_zero_forcing_pseudotime <- calStatistics(astrocytedifferent_cell_gaussian_zero_forcing_pseudotime, reference_network_pvals)\n# oligodendrocytedifferent_cell_gaussian_zero_forcing_pseudotime <- calStatistics(oligodendrocytedifferent_cell_gaussian_zero_forcing_pseudotime, reference_network_pvals)\n\n# ######################################################################################################################################################################################################\n# # a. same cell but with Pseudotime\n# neuronsame_cell_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/neuronsame_cell_pseudotime.txt', sep = '\\t')\n# astrocytesame_cell_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/astrocytesame_cell_pseudotime.txt', sep = '\\t')\n# oligodendrocytesame_cell_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/oligodendrocytesame_cell_pseudotime.txt', sep = '\\t')\n\n# # b. same cell real time but with zero-forcing\n# neuronsame_cell_realtime_zero_forcing <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/neuronsame_cell_realtime_zero_forcing.txt', sep = '\\t')\n# astrocytesame_cell_realtime_zero_forcing <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/astrocytesame_cell_realtime_zero_forcing.txt', sep = '\\t')\n# oligodendrocytesame_cell_realtime_zero_forcing <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/oligodendrocytesame_cell_realtime_zero_forcing.txt', sep = '\\t')\n\n# # c. same cell but with time sampled from a Guassian distribution\n# neuronsame_cell_gaussian_time <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/neuronsame_cell_gaussian_time.txt', sep = '\\t')\n# astrocytesame_cell_gaussian_time <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/astrocytesame_cell_gaussian_time.txt', sep = '\\t')\n# oligodendrocytesame_cell_gaussian_time <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/oligodendrocytesame_cell_gaussian_time.txt', sep = '\\t')\n\n# # d. same cell but with time sampled from a Guassian distribution\n# neuronsame_cell_gaussian_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/neuronsame_cell_gaussian_pseudotime.txt', sep = '\\t')\n# astrocytesame_cell_gaussian_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/astrocytesame_cell_gaussian_pseudotime.txt', sep = '\\t')\n# oligodendrocytesame_cell_gaussian_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/oligodendrocytesame_cell_gaussian_pseudotime.txt', sep = '\\t')\n\n# # e. same cell but with cells with time sampled from a Guassian distribution; Pseudotime is used\n# neuronsame_cell_gaussian_zero_time_forcing <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/neuronsame_cell_gaussian_zero_time_forcing.txt', sep = '\\t')\n# astrocytesame_cell_gaussian_zero_time_forcing <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/astrocytesame_cell_gaussian_zero_time_forcing.txt', sep = '\\t')\n# oligodendrocytesame_cell_gaussian_zero_time_forcing <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/oligodendrocytesame_cell_gaussian_zero_time_forcing.txt', sep = '\\t')\n\n# # e. same cell but with cells with time sampled from a Guassian distribution; Pseudotime is used\n# neuronsame_cell_gaussian_zero_forcing_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/neuronsame_cell_gaussian_zero_forcing_pseudotime.txt', sep = '\\t')\n# astrocytesame_cell_gaussian_zero_forcing_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/astrocytesame_cell_gaussian_zero_forcing_pseudotime.txt', sep = '\\t')\n# oligodendrocytesame_cell_gaussian_zero_forcing_pseudotime <- read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/oligodendrocytesame_cell_gaussian_zero_forcing_pseudotime.txt', sep = '\\t')\n# ######################################################################################################################################################################################################\n# set.seed(2017)\n# neuronsame_cell_pseudotime <- calStatistics(neuronsame_cell_pseudotime, reference_network_pvals)\n# astrocytesame_cell_pseudotime <- calStatistics(astrocytesame_cell_pseudotime, reference_network_pvals)\n# oligodendrocytesame_cell_pseudotime <- calStatistics(oligodendrocytesame_cell_pseudotime, reference_network_pvals)\n\n# neuronsame_cell_realtime_zero_forcing <- calStatistics(neuronsame_cell_realtime_zero_forcing, reference_network_pvals)\n# astrocytesame_cell_realtime_zero_forcing <- calStatistics(astrocytesame_cell_realtime_zero_forcing, reference_network_pvals)\n# oligodendrocytesame_cell_realtime_zero_forcing <- calStatistics(oligodendrocytesame_cell_realtime_zero_forcing, reference_network_pvals)\n\n# neuronsame_cell_gaussian_time <- calStatistics(neuronsame_cell_gaussian_time, reference_network_pvals)\n# astrocytesame_cell_gaussian_time <- calStatistics(astrocytesame_cell_gaussian_time, reference_network_pvals)\n# oligodendrocytesame_cell_gaussian_time <- calStatistics(oligodendrocytesame_cell_gaussian_time, reference_network_pvals)\n\n# neuronsame_cell_gaussian_pseudotime <- calStatistics(neuronsame_cell_gaussian_pseudotime, reference_network_pvals)\n# astrocytesame_cell_gaussian_pseudotime <- calStatistics(astrocytesame_cell_gaussian_pseudotime, reference_network_pvals)\n# oligodendrocytesame_cell_gaussian_pseudotime <- calStatistics(oligodendrocytesame_cell_gaussian_pseudotime, reference_network_pvals)\n\n# neuronsame_cell_gaussian_zero_time_forcing <- calStatistics(neuronsame_cell_gaussian_zero_time_forcing, reference_network_pvals)\n# astrocytesame_cell_gaussian_zero_time_forcing <- calStatistics(astrocytesame_cell_gaussian_zero_time_forcing, reference_network_pvals)\n# oligodendrocytesame_cell_gaussian_zero_time_forcing <- calStatistics(oligodendrocytesame_cell_gaussian_zero_time_forcing, reference_network_pvals)\n\n# neuronsame_cell_gaussian_zero_forcing_pseudotime <- calStatistics(neuronsame_cell_gaussian_zero_forcing_pseudotime, reference_network_pvals)\n# astrocytesame_cell_gaussian_zero_forcing_pseudotime <- calStatistics(astrocytesame_cell_gaussian_zero_forcing_pseudotime, reference_network_pvals)\n# oligodendrocytesame_cell_gaussian_zero_forcing_pseudotime <- calStatistics(oligodendrocytesame_cell_gaussian_zero_forcing_pseudotime, reference_network_pvals)\n\n# ######################################################################################################################################################################################################\n\n# colnames(RDI_parallel_res$RDI) <- colnames(exprs_data)\n# match(c(\"Irf8\", \"Gfi1\"), names(sort(apply(RDI_parallel_res$RDI[TF_vec_id, paste0(\"cluster_\", 1:6)], 1, function(x) sum(x[x > 0], na.rm = T) ))))\n# match(TF_vec_id, names(sort(apply(RDI_parallel_res$RDI[, ], 1, function(x) sum(x[x > 0], na.rm = T) ))))\n# \n# names(sort(apply(RDI_parallel_res$RDI[, ], 1, function(x) sum(x[x > 0], na.rm = T) )))[sort(match(TF_vec_id, \n#       names(sort(apply(RDI_parallel_res$RDI[, ], 1, function(x) sum(x[x > 0], na.rm = T) )))))]\n# # \n# qplot(sort(match(TF_vec_id, names(sort(apply(RDI_parallel_res$RDI[, ], 1, function(x) sum(x[x > 0], na.rm = T) ))))))\n# \n# # a <- Sys.time()\n# # RDI_parallel_res <- calculate_rdi(TF_cluster_exprs_data, delays = 10, super_graph = all_pairwise_gene, method = 1) # + noise c(5, 10, 15)\n# # b <- Sys.time()\n# # \n# # RDI_parallel_res <- calculate_rdi(exprs_data[1:5, 1:5] + noise[1:5, 1:5], delays = 5, method = 1)\n# # \n# # a <- Sys.time()\n# # RDI_parallel_res <- calculate_rdi(exprs_data + noise, delays = 10, method = 1)\n# # b <- Sys.time()\n# \n# # 5. gene ranking by sum up all outgoing weights\n# sum_outgoing_edges <- apply(RDI, 1, sum) #\n# \n# # 6. post-processing the network (use CLR or other methods to make the network sparse)\n# clr(RDI) # clr(cRDI)\n# \n# # other method\n# \n# # 6. visualize the network:\n# g <- igraph::graph_from_adjacency_matrix(RDI, mode = 'directed', weighted = T)\n# plot(g, layout = layout.fruchterman.reingold(g), vertex.size=2, vertex.label.size=4)\n\nlibrary(Scribe)\nlibrary(destiny)\nlibrary(monocle)\n\nload('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/XYZ.txt')\nXYZ <- t(XYZ)\ndimensioon <- 3; ND <- 100000; NQ <- 100000; k <- 5; eps <- 0; searchtypeInt <- 1; tree_type <- 1; radius <- 0; \n\nlibrary(InformationEstimator)\nN <- 10000\na <- Sys.time()\ntmp <- expand.grid(1:ncol(XYZ), 1:ncol(XYZ), stringsAsFactors = F)\nsuper_graph <- tmp[tmp[, 1] != tmp[, 2], ] - 1 # convert to C++ index\nsuper_graph <- super_graph[, c(2, 1)]\ncalculate_rdi_cpp_wrap(as.matrix(XYZ[1:N, ]), delays = 1L, super_graph = as.matrix(super_graph), turning_points = 0, method = 1)\nb <- Sys.time()\n# \n# # entropy_cpp(XYZ[, 1], k = 5, N = 100000)\n# # vd_cpp(10)\n# nn.idx = 1L; dists = 1.0;\n# \n# # res <- get_NN_2Set(as.double(XYZ[, 1]), as.double(XYZ[, 1]), 1L, 100000L, 100000L, 5L, as.double(0.0), 1L, 0L, as.double(0.0), nn.idx, dists, T)\n# \n# \n# res <- get_NN_2Set(XYZ[, ], XYZ[, ], 3L, 100000L, 100000L, 5L, as.double(0.0), 1L, 0L, as.double(0.0), nn.idx, dists, T)\n\na <- Sys.time(); res <- get_NN_2Set(XYZ[, ], XYZ[, ], 3L, 100000L, 100000L, 1000L, as.double(0.0), 1L, 0L, as.double(0.0), nn.idx, dists); b <- Sys.time()\na <- Sys.time(); res <- Neighbour(XYZ, XYZ, 1000, cores = 8); b <- Sys.time()\n\nnr <- 1000\nnc <- 10\np <- LshParameterSetter$new(nr, nc)\nX <- matrix(rnorm(nr * nc), nr, nc)\ntab <- LshNnTable$new(t(X), p)\ntab$find_nearest_neighbor(as.vector(X[1, ]))\n\n",
    "created" : 1507065326976.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "938757575",
    "id" : "BA09F235",
    "lastKnownWriteTime" : 1507065332,
    "last_content_update" : 1507065332906,
    "path" : "~/Dropbox (Personal)/Projects/Causal_network/causal_network/Cpp/Real_deal/Scribe/Scribe/tests/testthat/test.R",
    "project_path" : "tests/testthat/test.R",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
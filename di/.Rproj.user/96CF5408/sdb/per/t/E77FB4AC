{
    "collab_server" : "",
    "contents" : "#' Methods for the CellDataSet class\n#' @name CellDataSet-methods\n#' @docType methods\n#' @rdname CellDataSet-methods\n#' @param object The CellDataSet object\nsetValidity( \"CellDataSet\", function( object ) {\n#   if( any( counts(object) < 0 ) )\n#     return( \"the count data contains negative values\" )\n  TRUE\n} )\n\n#' @rdname CellDataSet-methods\n#' @aliases CellDataSet,ANY,ANY-method\nsetMethod(\"sizeFactors\", signature(object=\"CellDataSet\"), function(object) {\n  sf <- pData(object)$Size_Factor\n  names( sf ) <- colnames( exprs(object) )\n  sf})   \n\n#' @rdname CellDataSet-methods\n#' @aliases CellDataSet,ANY,ANY-method\n#' @param value A vector of size factors, with length equal to the cells in object\nsetReplaceMethod(\"sizeFactors\", signature(object=\"CellDataSet\", value=\"numeric\"), setSizeFactors <- function(object, value) {\n  pData(object)$Size_Factor <- value\n  validObject( object )\n  object\n})   \n\n\n#' @rdname CellDataSet-methods\n#' @param locfunc A function applied to the geometric-mean-scaled expression values to derive the size factor.\n#' @param ... Additional arguments to be passed to estimateSizeFactorsForMatrix\n#' @importFrom BiocGenerics sizeFactors<-\n#' @importFrom BiocGenerics estimateSizeFactors\n#' @aliases CellDataSet,ANY,ANY-method\nsetMethod(\"estimateSizeFactors\", \n          signature(object=\"CellDataSet\"),\nfunction( object, locfunc=median, ... ) \n{\n  sizeFactors(object) <- estimateSizeFactorsForMatrix(exprs(object), locfunc=locfunc, ...)\n  object\n})\n\n#' @rdname CellDataSet-methods\n#' @param modelFormulaStr A model formula, passed as a string, specifying how to group the cells prior to estimated dispersion. \n#' The default groups all cells together. \n#' @param relative_expr Whether to transform expression into relative values\n#' @param min_cells_detected Only include genes detected above lowerDetectionLimit in at least this many cells in the dispersion calculation\n#' @param remove_outliers Whether to remove outliers (using Cook's distance) when estimating dispersions\n#' @param cores The number of cores to use for computing dispersions\n#' @aliases CellDataSet,ANY,ANY-method\n#' @importFrom BiocGenerics sizeFactors\n#' @importFrom BiocGenerics estimateDispersions\nsetMethod(\"estimateDispersions\", \n          signature(object=\"CellDataSet\"), \nfunction(object, modelFormulaStr=\"~ 1\", relative_expr=TRUE, min_cells_detected=1, remove_outliers=TRUE, cores=1,...)\n{\n  dispModelName=\"blind\"\n  stopifnot( is( object, \"CellDataSet\" ) )\n  if( any( is.na( sizeFactors(object) ) ) )\n    stop( \"NAs found in size factors. Have you called 'estimateSizeFactors'?\" )\n  \n  if( length(list(...)) != 0 )\n    warning( \"in estimateDispersions: Ignoring extra argument(s).\" )\n  \n  # Remove results from previous fits\n  object@dispFitInfo = new.env( hash=TRUE )\n  \n  # if (isSparseMatrix(exprs(object))){\n  #   sp_mat <- asSlamMatrix(exprs(object))\n  #   nzGenes <- rowapply_simple_triplet_matrix(sp_mat, function(x) { sum(round(as.vector(x)) > object@lowerDetectionLimit) })\n  # }else{\n  #   nzGenes <- apply(exprs(object), 1, function(x) { sum(round(as.vector(x)) > object@lowerDetectionLimit) \n  #   \n  # }\n\n  dfi <- estimateDispersionsForCellDataSet(object, \n                                           modelFormulaStr, \n                                           relative_expr, \n                                           min_cells_detected,\n                                           remove_outliers,\n                                           cores)\n  object@dispFitInfo[[dispModelName]] <- dfi\n  \n  validObject( object )\n  object\n})\n\n###################\n\n#' @importFrom BiocGenerics sizeFactors\ncheckSizeFactors <- function(cds)\n{\n  if (cds@expressionFamily@vfamily %in% c(\"negbinomial\", \"negbinomial.size\"))\n  {\n    if (is.null(sizeFactors(cds))){\n      stop(\"Error: you must call estimateSizeFactors() before calling this function.\")\n    }\n    if (sum(is.na(sizeFactors(cds))) > 0){\n      stop(\"Error: one or more cells has a size factor of NA.\")\n    }\n  }\n}\n\n#' Retrieves the coordinates of each cell in the reduced-dimensionality space generated by calls to \n#' reduceDimension.\n#'\n#' Reducing the dimensionality of the expression data is a core step in the Monocle \n#' workflow. After you call reduceDimension(), this function will return the new\n#' coordinates of your cells in the reduced space. \n#' @param cds A CellDataSet object.\n#' @return A matrix, where rows are cell coordinates and columns correspond to dimensions of the \n#' reduced space.\n#' @export\n#' @examples\n#' \\dontrun{\n#' S <- reducedDimS(HSMM)\n#' }\nreducedDimS <- function( cds ) {\n  stopifnot( is( cds, \"CellDataSet\" ) )\n  cds@reducedDimS\n}   \n\n#' Set embedding coordinates of each cell in a CellDataSet.  \n#' \n#' This function sets the coordinates of each cell in a new\n#' (reduced-dimensionality) space. Not intended to be called directly.\n#'\n#' @param cds A CellDataSet object.\n#' @param value A matrix of coordinates specifying each cell's position in the reduced-dimensionality space.\n#' @return An update CellDataSet object\n#' @examples\n#' \\dontrun{\n#' cds <- reducedDimS(S)\n#' }\n`reducedDimS<-` <- function( cds, value ) {\n  stopifnot( is( cds, \"CellDataSet\" ) )\n  cds@reducedDimS <- value\n  validObject( cds )\n  cds\n}   \n\n#' Get the whitened expression values for a CellDataSet. \n#' \n#' Retrieves the expression values for each cell (as a matrix) after whitening \n#' during dimensionality reduction.\n#'\n#' @param cds A CellDataSet object.\n#' @return A matrix, where each row is a set of whitened expression values for a feature and columns are cells.\n#' @export\n#' @examples\n#' \\dontrun{\n#' W <- reducedDimW(HSMM)\n#' }\nreducedDimW <- function( cds ) {\n  stopifnot( is( cds, \"CellDataSet\" ) )\n  cds@reducedDimW\n}   \n\n#' Sets the the whitening matrix during independent component analysis.\n#'\n#' @param cds A CellDataSet object.\n#' @param value a numeric matrix\n#' @return A matrix, where each row is a set of whitened expression values for a feature and columns are cells.\n#' @docType methods\n#' @examples\n#' \\dontrun{\n#' cds <- reducedDimK(K)\n#' }\n`reducedDimK<-` <- function( cds, value ) {\n  stopifnot( is( cds, \"CellDataSet\" ) )\n  cds@reducedDimK <- value\n  validObject( cds )\n  cds\n}   \n\n#' Retrieves the the whitening matrix during independent component analysis.\n#'\n#' @param cds A CellDataSet object.\n#' @return A matrix, where each row is a set of whitened expression values for a feature and columns are cells.\n#' @docType methods\n#' @export\n#' @examples\n#' \\dontrun{\n#' K <- reducedDimW(HSMM)\n#' }\nreducedDimK <- function( cds ) {\n  stopifnot( is( cds, \"CellDataSet\" ) )\n  cds@reducedDimK\n}   \n\n#' Sets the whitened expression values for each cell prior to independent component analysis. Not intended to be called directly.\n#'\n#' @param cds A CellDataSet object.\n#' @param value A whitened expression data matrix\n#' @return An updated CellDataSet object\n#' @examples\n#' \\dontrun{\n#' #' cds <- reducedDimA(A)\n#' }\n`reducedDimW<-` <- function( cds, value ) {\n  stopifnot( is( cds, \"CellDataSet\" ) )\n  cds@reducedDimW <- value\n  validObject( cds )\n  cds\n}   \n\n#' Get the weights needed to lift cells back to high dimensional expression space.\n#' \n#' Retrieves the weights that transform the cells' coordinates in the reduced \n#' dimension space back to the full (whitened) space.\n#'\n#' @param cds A CellDataSet object.\n#' @return A matrix that when multiplied by a reduced-dimension set of coordinates for the CellDataSet, \n#' recovers a matrix in the full (whitened) space\n#' @export\n#' @examples\n#' \\dontrun{\n#' A <- reducedDimA(HSMM)\n#' }\nreducedDimA <- function( cds ) {\n  stopifnot( is( cds, \"CellDataSet\" ) )\n  cds@reducedDimA\n}   \n\n#' Get the weights needed to lift cells back to high dimensional expression space.\n#' \n#' Sets the weights transform the cells' coordinates in the reduced dimension \n#' space back to the full (whitened) space.\n#'\n#' @param cds A CellDataSet object.\n#' @param value A whitened expression data matrix\n#' @return An updated CellDataSet object\n#' @export\n#' @examples\n#' \\dontrun{\n#' cds <- reducedDimA(A)\n#' }\n`reducedDimA<-` <- function( cds, value ) {\n  stopifnot( is( cds, \"CellDataSet\" ) )\n  cds@reducedDimA <- value\n  validObject( cds )\n  cds\n}   \n\n#' Retrieves the minimum spanning tree generated by Monocle during cell ordering.\n#'\n#' Retrieves the minimum spanning tree (MST) that Monocle constructs during orderCells().\n#' This MST is mostly used in plot_spanning_tree to help assess the accuracy \n#' of Monocle\\'s ordering.\n#' @param cds expression data matrix for an experiment\n#' @return An igraph object representing the CellDataSet's minimum spanning tree.\n#' @export\n#' @examples\n#' \\dontrun{\n#' T <- minSpanningTree(HSMM)\n#' }\nminSpanningTree <- function( cds ) {\n  stopifnot( is( cds, \"CellDataSet\" ) )\n  cds@minSpanningTree\n}   \n\n#' Set the minimum spanning tree generated by Monocle during cell ordering.\n#' \n#' Sets the minimum spanning tree used by Monocle during cell ordering. Not intended to be called directly.\n#'\n#' @param cds A CellDataSet object.\n#' @param value an igraph object describing the minimum spanning tree.\n#' @return An updated CellDataSet object\n#' @export\n#' @examples\n#' \\dontrun{\n#' cds <- minSpanningTree(T)\n#' }\n`minSpanningTree<-` <- function( cds, value ) {\n  stopifnot( is( cds, \"CellDataSet\" ) )\n  cds@minSpanningTree <- value\n  validObject( cds )\n  cds\n}   \n\n#' Get the matrix of pairwise distances between cells\n#' \n#' Retrieves a matrix capturing distances between each cell used during cell ordering.\n#'\n#' @param cds expression data matrix for an experiment\n#' @return A square, symmetric matrix containing the distances between each cell in the reduced-dimensionality space.\n#' @docType methods\n#' @export\n#' @examples\n#' \\dontrun{\n#' D <- cellPairwiseDistances(HSMM)\n#' }\ncellPairwiseDistances <- function( cds ) {\n  stopifnot( is( cds, \"CellDataSet\" ) )\n  cds@cellPairwiseDistances\n}   \n\n#' Sets the matrix containing distances between each pair of cells used by Monocle during cell ordering. Not intended to be called directly.\n#'\n#' @param cds A CellDataSet object.\n#' @param value a square, symmetric matrix containing pairwise distances between cells.\n#' @return An updated CellDataSet object\n#' @export\n#' @examples\n#' \\dontrun{\n#' cds <- cellPairwiseDistances(D)\n#' }\n`cellPairwiseDistances<-` <- function( cds, value ) {\n  stopifnot( is( cds, \"CellDataSet\" ) )\n  cds@cellPairwiseDistances <- value\n  validObject( cds )\n  cds\n}   \n\n\n",
    "created" : 1489686428705.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3752470369",
    "id" : "E77FB4AC",
    "lastKnownWriteTime" : 1485629007,
    "last_content_update" : 1485629007,
    "path" : "~/Dropbox (Personal)/Projects/monocle-dev/R/methods-CellDataSet.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
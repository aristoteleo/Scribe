{
    "collab_server" : "",
    "contents" : "library(testthat)\nlibrary(di)\nlibrary(netbiov)\nlibrary(reshape2)\nlibrary(pscl)\nlibrary(boot)\n\ntest_check(\"di\")\n\nvd(100)\n\nhbp_exprs = read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Test_dataset/hbp_mat.txt',\n                        sep = '\\t', header = T, row.names = 1)\n\nx <- hbp_exprs[1:20, 1:20]\nentropy(x, k = 2)\n\ny <- hbp_exprs[21:40, 21:40]\nmi(x, y)\n\nz <- hbp_exprs[41:60, 41:60]\ncmi(x, y, z)\n\ndi_single_run(x, y)\ndi_single_run(x[1:15, 1:15], y[1:15, 1:15], n = 3)\n\nrdi_single_run(x, y) #test this\nrdi_single_run(t(scale(t(x + 1))), t(scale(t(y + 1)))) #test this\n\nrdi_single_run(x[, 1], y[, 1])\nrdi_single_run(scale(x[, 1]), scale(y[, 1]))\n\nrdi_single_run(scale(x, scale = F)[, 1], scale(y, scale = F)[, 1])\nrdi_single_run(scale(x, center = F)[, 1], scale(y, center = F)[, 1])\nrdi_single_run(scale_0_1_range(x)[, 1], scale_0_1_range(y)[, 1])\nrdi_single_run(exp(x), exp(y))\nrdi_single_run((x)/c(1:10), (y)/c(1:10))\n\nz <- cbind(x[, 1], y[, 1])\nz[, 1] <- c(-0.10586709, 0.02310539, 0.97479104, 0.84491918, 0.11360705, -1.22814749, -1.9416257 , -0.94071219, -0.31573972, -0.78625982, 1.44150499, 0.59099037, 0.9799445 , -0.88648595, 0.88125935, 0.16234335, -1.25395129, -1.88845447, -0.44738441, -0.37723717)\nz[, 2] <- c(0.59876415, -0.21560821, -0.06456355, 0.56697927, 0.94749493, -0.17139318, -1.4249324 , -1.94804793, -0.20550459, -0.02151109, -1.30797509, 1.96236729, 0.57850622, 1.30707304, -1.1497937 , 1.0829491 , 0.30927887, -1.84287659, -1.75129567, 0.19247962)\n\nrdi_single_run_conditioned(x, y, z, c(2, 1), d=1)\n\ndi::di_single_run_conditioned(x, y, z, n=1)\n\n#debug the following:\nrdi_many_runs(x, y)\n\norder_lung_mat <- exprs(lung)[, order(pData(lung)$Pseudotime)] + 1\norder_lung_mat <- order_lung_mat[apply(order_lung_mat, 1, function(x) sum(x > 1)> 150), ]\norder_lung_mat <- order_lung_mat[!(row.names(order_lung_mat) %in%  c('ENSMUSG00000032489.11', 'ENSMUSG00000071415.6')), ] #order_lung_mat[, ]\n\nlung_subset <- lung[row.names(order_lung_mat)[1:5], ]\npd <- pData(lung_subset[, colnames(order_lung_mat)]) #\nfd <- fData(lung_subset[rownames(order_lung_mat)[1:5] , ]) #fData(lung[, ])\n\nwrite.table(file = '/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Test_dataset//lung_order_mat.txt', order_lung_mat[1:5, ], col.names = T, sep = '\\t', row.names = T, quote = F)\nwrite.table(file = '/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Test_dataset/lung_gene_feature.txt', fd, col.names = T, sep = '\\t', row.names = T, quote = F)\nwrite.table(file = '/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/Test_dataset/lung_cell_feature.txt',  pd, col.names = T, sep = '\\t', row.names = T, quote = F)\n\n##############################################################################################################################################################################\n# smooth the data:\n##############################################################################################################################################################################\ntest_smooth <- smooth_genes(t(exprs(lung_subset)[, order(pData(lung_subset)$Pseudotime)]), window_size = 20)\nt(exprs(lung))[order(pData(lung)$Pseudotime), toupper('ensmusg00000054766.7')]\ntest_smooth[, toupper('ensmusg00000054766.7')]\n\n##############################################################################################################################################################################\n# test on the CMI, RDI on the dataset:\n##############################################################################################################################################################################\n# test on rdi:\n# test on just single run:\ncalculate_rdi_corr(toupper('ensmusg00000015452.8'), toupper('ensmusg00000025283.9'),\n                   test_smooth[1:165, toupper('ensmusg00000015452.8')] + 1, test_smooth[1:165, toupper('ensmusg00000025283.9')] + 1,\n                   c(1, 21, 41), nrow(test_smooth) * (nrow(test_smooth) - 1))\n#test on multiple run for the UN-conditioned RDI:\n\n#test on conditioned rdi:\ncalculate_conditioned_rdi(toupper('ensmusg00000015452.8'), toupper('ensmusg00000025283.9'),\n                   test_smooth[1:165, ] + 1, 20, c('ENSMUSG00000015452.8' = 1),\n                   nrow(test_smooth[1:165, ]) * (nrow(test_smooth[1:165, ]) - 1))\n\n#test on multiple run for the conditioned rdi:\n\n#test on parallel verision for UN-conditioned RDI:\nrdi_res <- calculate_and_write_pairwise_dmi(test_smooth[1:165, 1:5], delays = c(1, 21, 41), cores = 1, verbose = T)\n\n#test on parallel verision for conditioned RDI:\n\ncalculate_conditioned_rdi(gene_pair[[1]], gene_pair[[2]], test_smooth, delays_max[index_name], top_k_incoming_id_list[[gene_pair[[2]]]], N_operations)\ncon_rdi_res <- calculate_and_write_pairwise_dmi_conditioned(test_smooth[1:165, unique(rdi_res$id_1)], rdi_res, cores = 1, k = 1, verbose = T)\n\n##############################################################################################################################################################################\n# benchmark with python implementation:\n##############################################################################################################################################################################\npython_rdi <- read.table(\"/Users/xqiu/Dropbox (Personal)/Projects/Genes_Inference_in_Cell_Differentiation_Process/notebook/output\\\\output_RDI.txt\", header = T)\npython_rdi_conditioned <- read.table(\"/Users/xqiu/Dropbox (Personal)/Projects/Genes_Inference_in_Cell_Differentiation_Process/notebook/output\\\\output_RDI_conditioned.txt\", header = T)\n\npython_rdi[order(python_rdi$CORRELATION), ]\npython_rdi_conditioned[order(python_rdi_conditioned$RDI), ]\n\nrow.names(python_rdi) <- paste(toupper(python_rdi$Gene_1_ID), toupper(python_rdi$Gene_2_ID), sep = '_')\n\nqplot(rdi_res[sort(row.names(python_rdi)), 3], python_rdi[sort(row.names(python_rdi)), 5]) + xlab('python') + ylab('R')\nqplot(rdi_res[sort(row.names(python_rdi)), 4], python_rdi[sort(row.names(python_rdi)), 6])\nqplot(rdi_res[sort(row.names(python_rdi)), 5], python_rdi[sort(row.names(python_rdi)), 7])\nqplot(rdi_res[sort(row.names(python_rdi)), 6], python_rdi[sort(row.names(python_rdi)), 9])\n\nrow.names(python_rdi_conditioned) <- paste(toupper(python_rdi_conditioned$Gene_1_ID), toupper(python_rdi_conditioned$Gene_2_ID), sep = '_')\n\nqplot(as.numeric(con_rdi_res[sort(row.names(python_rdi_conditioned)), 3]), python_rdi_conditioned[sort(row.names(python_rdi_conditioned)), 6]) + xlab('python') + ylab('R')\nqplot(as.numeric(con_rdi_res[sort(row.names(python_rdi_conditioned)), 3]), python_rdi_conditioned[sort(row.names(python_rdi_conditioned)), 6]) + geom_text(label = sort(row.names(python_rdi_conditioned)))\nqplot(as.numeric(con_rdi_res[sort(row.names(python_rdi_conditioned)), 4]), python_rdi_conditioned[sort(row.names(python_rdi_conditioned)), 5])\n\n# different delay max pairs: (numerical issues)\ndifferent_delay_pair <- which(as.numeric(con_rdi_res[sort(row.names(python_rdi_conditioned)), 4]) != python_rdi_conditioned[sort(row.names(python_rdi_conditioned)), 5])\npair_id <- con_rdi_res[sort(row.names(python_rdi_conditioned)), ][different_delay_pair, ]\nrdi_res[pair_id, ]\npython_rdi[pair_id, ]\n\n##############################################################################################################################################################################\n# New things we can do: (test on the lung dataset)\n##############################################################################################################################################################################\n# 1. AUC\n#test on parallel verision for UN-conditioned RDI:\ntest_smooth <- smooth_genes(t(exprs(lung)[, order(pData(lung)$Pseudotime)]), window_size = 20)\ntest_smooth <- test_smooth[1:165, 1:10]\n\n#s\nscale_0_1_range <- function(x) {\n (x - min(x)) / (max(x) - min(x))\n}\n\ntest_smooth_0_1 <- apply(test_smooth, 2, function(x) scale_0_1_range(x))\n\ntest_smooth_center <- apply(test_smooth, 2, function(x) scale(x, scale = F))\n\nrdi_res <- calculate_and_write_pairwise_dmi(test_smooth, delays = c(1, 21, 41), cores = 2, verbose = T)\nrdi_res_0_1 <- calculate_and_write_pairwise_dmi(test_smooth_0_1, delays = c(1, 21, 41), cores = 2, verbose = T)\n\n#test on parallel verision for conditioned RDI:\ncon_rdi_res <- calculate_and_write_pairwise_dmi_conditioned(test_smooth[, unique(rdi_res$id_1)], rdi_res, cores = 2, k = 1, verbose = T)\nscale_con_rdi_res <- calculate_and_write_pairwise_dmi_conditioned(test_smooth[, unique(rdi_res$id_1)], rdi_res, cores = 2, k = 1, verbose = T)\n\n# 2. Make a network plot\n#a. heatmap\ncon_rdi_res$conditioned_rdi <- as.numeric(con_rdi_res$conditioned_rdi)\ncon_rdi_res$delay_max <- as.numeric(con_rdi_res$delay_max)\n\nrdi_res_mat <- dcast(con_rdi_res[, 1:3], id_1 ~ id_2)\n\nrow.names(rdi_res_mat) <- rdi_res_mat$id_1\nrdi_res_mat <- rdi_res_mat[, -1]\n\nrdi_res_mat[!is.finite(as.matrix(rdi_res_mat))] <- 0\ndiag(rdi_res_mat) <- 0\n\n#pdf('lung_rdi.pdf', width = 30, height = 30)\npheatmap(rdi_res_mat[, ], useRaster = T, cluster_cols = T, cluster_rows = T) #, annotation_col = F, annotation_row = F\n#dev.off()\n\n#b. network\n# create a graph:\ng1 <- graph_from_adjacency_matrix(as.matrix(rdi_res_mat), mode = \"directed\", weighted = T)\nplot(g1, layout = layout_nicely(g1))\n\nres <- level.plot(g1)\n\n# 3. rank the genes by the cRDI values\n#calculate the sum of incoming cRDI values and the sum of outgoing cRDI values:\n#row: targets of the row.name gene; column: source of the colname gene\noutgoing_rdi_sum <- apply(rdi_res_mat, 1, sum)\nincoming_rdi_sum <- apply(rdi_res_mat, 2, sum)\n\nsort(outgoing_rdi_sum)\nsort(incoming_rdi_sum)\n\n# 4. calculate the fixed size for the negative binomial distribution\n#see the code:\n\n# 5. use pscl package for fitting the moving everage data\nhurdle_res <- hurdle(ENSMUSG00000004044.9 ~ 1, data = round(data.frame(test_smooth)))\nzeroinfl_res <- zeroinfl(ENSMUSG00000004044.9 ~ pData(lung)$Pseudotime[1:166], data = round(data.frame(test_smooth)))\n\nqplot(pData(lung)$Pseudotime[1:166], zeroinfl_res$fitted.values) #the resulting data is very smooth\n\n#use the moving average with the hurdle/zeroinfl model for data fitting:\npscl_smooth_genes <- function(exprs, window_size = 40) {\n  win_range <- nrow(exprs) - window_size\n  exprs_smooth <- exprs[-c(1:window_size), ]\n\n  res <- apply(exprs, 2, function(x) {\n    tmp <- rep(NA, win_range)\n    for(i in 0:(win_range)){\n      df <- data.frame(expression = round(x[i + c(1:window_size)]))\n      # print(x)\n      tryCatch({\n        tmp[i + 1] <- zeroinfl(expression ~ 1, data = df)$fitted.values\n        tmp\n      },\n      #warning = function(w) { FM_fit },\n      error = function(e) {\n        # tmp[i + 1] <- glm.nb(expression ~ 1, data = df)$fitted.values\n        # tmp\n      })\n      if(is.na(tmp[i + 1]))\n        tmp[i + 1] <- glm.nb(expression ~ 1, data = df)$fitted.values\n    }\n    return(tmp)\n  })\n\n  return(res)\n}\n\nraw_data <- t(exprs(lung_subset)[, order(pData(lung_subset)$Pseudotime)])\npscl_res <- pscl_smooth_genes(raw_data, window_size = 20)\n\nmoving_avg_res <- smooth_genes(raw_data, window_size = 20)\n\nind <- 1\np0 <- qplot(1:nrow(raw_data), raw_data[, ind]) + ggtitle('raw data')\np1 <- qplot(1:nrow(pscl_res), pscl_res[, ind]) + ggtitle('pscl')\np2 <- qplot(1:nrow(moving_avg_res), moving_avg_res[, ind]) + ggtitle('moving avg')\np3 <- qplot(pscl_res[, ind], moving_avg_res[, ind]) + ggtitle('pscl vs. moving avg')\n\nxacHelper::multiplot(plotlist = list(p0, p1, p2, p3))\n\nind <- 2\np0 <- qplot(1:nrow(raw_data), raw_data[, ind]) + ggtitle('raw data')\np1 <- qplot(1:nrow(pscl_res), pscl_res[, ind]) + ggtitle('pscl')\np2 <- qplot(1:nrow(moving_avg_res), moving_avg_res[, ind]) + ggtitle('moving avg')\np3 <- qplot(pscl_res[, ind], moving_avg_res[, ind]) + ggtitle('pscl vs. moving avg')\n\nind <- 3\np0 <- qplot(1:nrow(raw_data), raw_data[, ind]) + ggtitle('raw data')\np1 <- qplot(1:nrow(pscl_res), pscl_res[, ind]) + ggtitle('pscl')\np2 <- qplot(1:nrow(moving_avg_res), moving_avg_res[, ind]) + ggtitle('moving avg')\np3 <- qplot(pscl_res[, ind], moving_avg_res[, ind]) + ggtitle('pscl vs. moving avg')\n\nxacHelper::multiplot(plotlist = list(p0, p1, p2, p3))\n\nind <- 4\np0 <- qplot(1:nrow(raw_data), raw_data[, ind]) + ggtitle('raw data')\np1 <- qplot(1:nrow(pscl_res), pscl_res[, ind]) + ggtitle('pscl')\np2 <- qplot(1:nrow(moving_avg_res), moving_avg_res[, ind]) + ggtitle('moving avg')\np3 <- qplot(pscl_res[, ind], moving_avg_res[, ind]) + ggtitle('pscl vs. moving avg')\n\nxacHelper::multiplot(plotlist = list(p0, p1, p2, p3))\n\nind <- 5\np0 <- qplot(1:nrow(raw_data), raw_data[, ind]) + ggtitle('raw data')\np1 <- qplot(1:nrow(pscl_res), pscl_res[, ind]) + ggtitle('pscl')\np2 <- qplot(1:nrow(moving_avg_res), moving_avg_res[, ind]) + ggtitle('moving avg')\np3 <- qplot(pscl_res[, ind], moving_avg_res[, ind]) + ggtitle('pscl vs. moving avg')\n\nxacHelper::multiplot(plotlist = list(p0, p1, p2, p3))\n\ngene_expression_cell_num <- esApply(lung, 1, function(x) sum(x > 0))\nlung_raw_data <- t(exprs(lung)[, order(pData(lung_subset)$Pseudotime)])\nlung_pscl_res <- pscl_smooth_genes(lung_raw_data, window_size = 20)\nlung_moving_avg_res <- smooth_genes(lung_raw_data, window_size = 20)\n\nind <- 'ENSMUSG00000078202.2'\nind <- 10\n\np0 <- qplot(1:nrow(lung_raw_data), lung_raw_data[, ind]) + ggtitle('raw data')\np1 <- qplot(1:nrow(lung_pscl_res), lung_pscl_res[, ind]) + ggtitle('pscl')\np2 <- qplot(1:nrow(lung_moving_avg_res), lung_moving_avg_res[, ind]) + ggtitle('moving avg')\np3 <- qplot(lung_pscl_res[, ind], lung_moving_avg_res[, ind]) + ggtitle('pscl vs. moving avg')\n\nxacHelper::multiplot(plotlist = list(p0, p1, p2, p3))\n\n# 6. implment the bootstrapping algorithm for obtaining the more robust results\nlibrary(boot)\n\n# boot(data, statistic, R, sim = \"ordinary\", stype = c(\"i\", \"f\", \"w\"),\n#      strata = rep(1,n), L = NULL, m = 0, weights = NULL,\n#      ran.gen = function(d, p) d, mle = NULL, simple = FALSE, ...,\n#      parallel = c(\"no\", \"multicore\", \"snow\"),\n#      ncpus = getOption(\"boot.ncpus\", 1L), cl = NULL)\n\n#random sample the data but still preserve the ordering of the column\n\ncalculate_and_write_pairwise_dmi_wraper <- function(d, i, delays = c(1,2,5,10,15,20,25), supergraph = NULL, cores = 1, verbose = F) {\n  print(i)\n  data <- d[i, ]\n  # print('before RDI')\n  res <- calculate_and_write_pairwise_dmi(data, delays = delays, supergraph = supergraph, cores = cores, verbose = verbose)\n  # print('after RDI')\n\n  res_colnames <- colnames(res)\n  rdi_res <- c(); for(index in 1:length(res_colnames)){\n    names <- res_colnames[index]\n\n    if(index > 2)\n      rdi_res <- c(rdi_res, as.numeric(res[, names]))\n    else\n      rdi_res <- c(rdi_res, as.numeric(res[, names]))\n  }\n  return(rdi_res)\n}\n\nboot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 199, stype = 'i')\nboot_all_runs <- rbind(boot_res$t0, boot_res$t)\n\nqplot(boot_all_runs[, 41]) # show the result\n\n#bootstrapping result:\nrdi_res <- calculate_and_write_pairwise_dmi(test_smooth, delays = c(1, 21, 41), cores = 2, verbose = T)\n\n##############################################################################################################################################################################\n# analyze the monocle 2 on the Lee's data:\n##############################################################################################################################################################################\ncardio_exprs = read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/PNAS_sui/log_exp_all_data.txt',\n                       sep = '\\t', header = T, row.names = 1)\n\npd_df <- cardio_exprs[1:3, ]\nfd_df <- data.frame(gene_short_name = row.names(cardio_exprs)[-(1:3)], row.names = row.names(cardio_exprs)[-(1:3)])\ncardio_exprs <- as.matrix(cardio_exprs[-c(1:3), ])\nvalid_cardio_exprs <- t(apply(cardio_exprs, 1, function(x) as.numeric(x)))\ncolnames(valid_cardio_exprs) <- colnames(cardio_exprs)\n\npd <- new(\"AnnotatedDataFrame\", data = as.data.frame(t(pd_df)))\nfd <- new(\"AnnotatedDataFrame\", data = fd_df)\ncardio_cds <-  newCellDataSet(as(as.matrix(valid_cardio_exprs)[row.names(fd_df), colnames(pd_df)], 'sparseMatrix'),\n                                        phenoData = pd,\n                                        featureData = fd,\n                                        expressionFamily=gaussian(),\n                                        lowerDetectionLimit=1)\ncardio_cds <- estimateSizeFactors(cardio_cds)\n\nplot_pc_variance_explained(cardio_cds, norm_method = 'none', pseudo_expr = 1) #4 dimension\n\n#reduce to 4 dimension\ncardio_cds <- reduceDimension(cardio_cds, max_components = 4, norm_method = 'none', pseudo_expr = 1, verbose = T, maxIter = 100)\ncardio_cds <- orderCells(cardio_cds)\n\nplot_cell_trajectory(cardio_cds, color_by = 'CollectionTime') + facet_wrap(~CollectionTime)\nplot_cell_trajectory(cardio_cds, color_by = 'Consensus Cluster')\nplot_cell_trajectory(cardio_cds, color_by = 'Phenotype.FACS')\nplot_cell_trajectory(cardio_cds, color_by = 'CollectionTime')\n\n#reduce to 10 dimension\ncardio_cds_10 <- reduceDimension(cardio_cds, max_components = 10, norm_method = 'none', pseudo_expr = 1, verbose = T, maxIter = 100)\ncardio_cds_10 <- orderCells(cardio_cds_10)\n\nplot_cell_trajectory(cardio_cds, color_by = 'CollectionTime') + facet_wrap(~CollectionTime)\nplot_cell_trajectory(cardio_cds, color_by = 'Consensus.Cluster')\nplot_cell_trajectory(cardio_cds, color_by = 'Phenotype.FACS')\nplot_cell_trajectory(cardio_cds, color_by = 'CollectionTime')\nplot_cell_trajectory(cardio_cds, color_by = 'Pseudotime')\nplot_cell_trajectory(cardio_cds, color_by = 'State') + facet_wrap(~State)\n\ncardio_cds <- orderCells(cardio_cds, root_state = 7)\n\n#save the data:\ncardio_mat <- as.matrix(exprs(cardio_cds)[, order(pData(cardio_cds)$Pseudotime)])\nfd <- fData(cardio_cds[, ])\npd <- pData(cardio_cds[, ])\n\ncardio_mat_end_state6 <- cardio_mat[, pData(cardio_cds)$State %in% c(7, 6, 5, 3)]\ncardio_mat_end_state1 <- cardio_mat[, pData(cardio_cds)$State %in% c(7, 1:3)]\n\nwrite.table(file = '/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/cardio_mat_end_state6.txt',  cardio_mat_end_state6, col.names = T, sep = '\\t', row.names = T, quote = F)\nwrite.table(file = '/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/cardio_mat_end_state1.txt', cardio_mat_end_state1, col.names = T, sep = '\\t', row.names = T, quote = F)\nwrite.table(file = '/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/cardio_fd.txt',  fd, col.names = T, sep = '\\t', row.names = T, quote = F)\nwrite.table(file = '/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/cardio_fd.txt',  pd, col.names = T, sep = '\\t', row.names = T, quote = F)\n\ncardio_mat_end_state6_smooth <- smooth_genes(t(cardio_mat_end_state6), window_size = 20)\nrdi_res <- calculate_and_write_pairwise_dmi(cardio_mat_end_state6_smooth, delays = c(1, 21, 41), cores = 3, verbose = T)\n# save the result:\nwrite.table(file = 'cardio_rdi_res.txt', rdi_res, col.names = T, sep = '\\t', quote = F, row.names = T)\n\ncon_rdi_res <- calculate_and_write_pairwise_dmi_conditioned(t(single_run_simulation)[, unique(rdi_res$id_1)], rdi_res, cores = 3, k = 1, verbose = T)\nwrite.table(file = 'cardio_con_rdi_res.txt', con_rdi_res, col.names = T, sep = '\\t', quote = F, row.names = T)\n\n",
    "created" : 1488916404384.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2041394994",
    "id" : "27B624EB",
    "lastKnownWriteTime" : 1489708023,
    "last_content_update" : 1489708023973,
    "path" : "~/Dropbox (Personal)/Projects/Genes_Inference_in_Cell_Differentiation_Process/R_package/di/tests/testthat.R",
    "project_path" : "tests/testthat.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
}
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 999, stype = 'i')
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 999, stype = 'i')
?prcomp
getwd()
dim(test_smooth)
test_smooth[1:5, ]
scale(test_smooth[1:5, ])
scale(test_smooth[1:5, ], center = T, scale = T)
apply(test_smooth[1:5, ], 1, function(x) scale)
apply(test_smooth[1:5, ], 1, function(x) scale(x))
apply(test_smooth[1:5, ], 1, function(x) scale(x, center = T, scale = T))
?scale
colSums(apply(test_smooth[1:5, ], 1, function(x) scale(x, center = T, scale = T)))
colSums(apply(test_smooth[1:5, ], 1, function(x) scale(x, center = T)))
#(apply(test_smooth[1:5, ], 1, function(x) scale(x, center = T, scale = T)))
scale(test_smooth[1, ])
sd(scale(test_smooth[1, ]))
scale_0_1_range <- function(x) {
x - min(x) / (max(x) - min(x))
}
dim(test_smooth)
apply(test_smooth, 2, function(x) scale_0_1_range(x))
scale_0_1_range <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
apply(test_smooth, 2, function(x) scale_0_1_range(x))
test_smooth_0_1 <- apply(test_smooth, 2, function(x) scale_0_1_range(x))
rdi_res <- calculate_and_write_pairwise_dmi(test_smooth, delays = c(1, 21, 41), cores = 2, verbose = T)
rdi_res <- calculate_and_write_pairwise_dmi(test_smooth_0_1, delays = c(1, 21, 41), cores = 2, verbose = T)
rdi_res <- calculate_and_write_pairwise_dmi(test_smooth, delays = c(1, 21, 41), cores = 2, verbose = T)
rdi_res_0_1 <- calculate_and_write_pairwise_dmi(test_smooth_0_1, delays = c(1, 21, 41), cores = 2, verbose = T)
rdi_res_0_1
rdi_res
rdi_single_run_conditioned(x, y, z, c(2, 1), d=1)
x <- hbp_exprs[1:20, 1:20]
entropy(x, k = 2)
y <- hbp_exprs[21:40, 21:40]
mi(x, y)
z <- hbp_exprs[41:60, 41:60]
cmi(x, y, z)
di_single_run(x, y)
di_single_run(x[1:15, 1:15], y[1:15, 1:15], n = 3)
rdi_single_run(x, y)
rdi_single_run(x, y)
rdi_single_run(scale_0_1_range(x), scale_0_1_range(y))
rdi_single_run(scale(x), scale(y))
rdi_single_run(exp(x), exp(y))
rdi_single_run(x, y)
rdi_single_run(exp(x), exp(y))
rdi_single_run(scale(x, scale = F), scale(y, scale = F))
rdi_single_run(x, y)
rdi_single_run(scale(x), scale(y))
rdi_single_run(scale_0_1_range(x), scale_0_1_range(y))
rdi_single_run(exp(x), exp(y))
cbind(x[, 1], y[, 1])
rdi_single_run(exp(x), exp(y))
rdi_single_run(2*(x), 2*(y))
rdi_single_run((x)/2, (y)/2)
rdi_single_run((x)/c(1:10), (y)/c(1:10))
rdi_single_run(log(x + 1), log(y + 1))
rdi_single_run(scale(x, scale = F), scale(y, scale = F))
rdi_single_run(x, y)
rdi_single_run(scale(x, center = F), scale(y, center = F))
rdi_single_run(scale(x, scale = F), scale(y, scale = F))
rdi_single_run(scale(x, center = F), scale(y, center = F))
rdi_single_run(x, y)
rdi_single_run(scale(x, scale = F), scale(y, scale = F))
rdi_single_run(scale(x, center = F), scale(y, center = F))
rdi_single_run(exp(x), exp(y))
x
y
dim(y)
rdi_res
rdi_single_run(x[1, ], y[1, ])
rdi_single_run(x[, 1], y[, 1])
x
scale(x[1:5, 1:5])
scale(x, scale = F)
rowmean(scale(x, scale = F))
rowMean(scale(x, scale = F))
rowMeans(scale(x, scale = F))
colMeans(scale(x, scale = F))
apply(scale(x, scale = F), 2, sd)
apply(scale(x, scale = F), 1, sd)
apply(scale(x, scale = T), 1, sd)
apply(scale(x, scale = T), 2, sd)
rdi_single_run(x[, 1], y[, 1])
rdi_single_run(scale(x, scale = F)[, 1], scale(y, scale = F)[, 1])
rdi_single_run(scale(x, center = F)[, 1], scale(y, center = F)[, 1])
rdi_single_run(scale_0_1_range(x)[, 1], scale_0_1_range(y)[, 1])
rdi_single_run(exp(x), exp(y))
rdi_single_run((x)/c(1:10), (y)/c(1:10))
di_single_run(x, y)
di_single_run(x[1:15, 1:15], y[1:15, 1:15], n = 3)
ls()
di_single_run(x[1:15, 1:15], y[1:15, 1:15], n = 3)
rdi_single_run((x)/c(1:10), (y)/c(1:10))
rdi_single_run(x, y)
rdi_single_run(scale(x), scale(y)) #test this
x
rowMeans(scale(x))
rdi_single_run(t(scale(t(x))), t(scale(t(y)))) #test this
t(scale(t(y)))
rowMeans(scale(x))
rowMeans(t(scale(t(x))))
rdi_single_run(t(scale(t(x + 1))), t(scale(t(y + 1)))) #test this
rowMeans(t(scale(t(x))))
t(scale(t(y + 1)))
rdi_single_run(x[, 1], y[, 1])
scale(y[, 1])
mean(scale(y[, 1]))
sd(scale(y[, 1]))
rdi_single_run(scale(x[, 1]), scale(y[, 1]))
rdi_single_run(x[, 1], y[, 1])
rdi_single_run(scale(x[, 1]), scale(y[, 1]))
getwd()
system('open .')
?grangertest
??grangertest
dim(test_smooth)
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 9, stype = 'i')
calculate_and_write_pairwise_dmi_wraper <- function(d, i, delays = c(1,2,5,10,15,20,25), supergraph = NULL, cores = 1, verbose = F) {
data <- d[i, ]
calculate_and_write_pairwise_dmi(data, delays = delays, supergraph = supergraph, cores = cores, verbose = verbose)
}
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 9, stype = 'i')
calculate_and_write_pairwise_dmi_wraper <- function(d, i, delays = c(1,2,5,10,15,20,25), supergraph = NULL, cores = 1, verbose = F) {
print(i)
data <- d[i, ]
calculate_and_write_pairwise_dmi(data, delays = delays, supergraph = supergraph, cores = cores, verbose = verbose)
}
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 9, stype = 'i')
source('~/Dropbox (Personal)/Projects/Genes_Inference_in_Cell_Differentiation_Process/R_package/di/tests/testthat.R', echo=TRUE)
source('~/Dropbox (Personal)/Projects/Genes_Inference_in_Cell_Differentiation_Process/R_package/di/tests/testthat.R', echo=TRUE)
source('~/Dropbox (Personal)/Projects/Genes_Inference_in_Cell_Differentiation_Process/R_package/di/R/accessary_code.R', echo=TRUE)
source('~/Dropbox (Personal)/Projects/Genes_Inference_in_Cell_Differentiation_Process/R_package/di/R/function.R', echo=TRUE)
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 9, stype = 'i')
debug(calculate_and_write_pairwise_dmi_wraper)
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 9, stype = 'i')
calculate_and_write_pairwise_dmi_wraper <- function(d, i, delays = c(1,2,5,10,15,20,25), supergraph = NULL, cores = 1, verbose = F) {
print(i)
data <- d[i, ]
print('before RDI')
calculate_and_write_pairwise_dmi(data, delays = delays, supergraph = supergraph, cores = cores, verbose = verbose)
print('after RDI')
}
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 9, stype = 'i')
boot_res
boot_res$t0
boot_res$t
calculate_and_write_pairwise_dmi_wraper <- function(d, i, delays = c(1,2,5,10,15,20,25), supergraph = NULL, cores = 1, verbose = F) {
print(i)
data <- d[i, ]
print('before RDI')
res <- calculate_and_write_pairwise_dmi(data, delays = delays, supergraph = supergraph, cores = cores, verbose = verbose)
print('after RDI')
return(res)
}
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 9, stype = 'i')
debug(calculate_and_write_pairwise_dmi_wraper)
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 9, stype = 'i')
res
c(res)
calculate_and_write_pairwise_dmi_wraper <- function(d, i, delays = c(1,2,5,10,15,20,25), supergraph = NULL, cores = 1, verbose = F) {
print(i)
data <- d[i, ]
print('before RDI')
res <- calculate_and_write_pairwise_dmi(data, delays = delays, supergraph = supergraph, cores = cores, verbose = verbose)
print('after RDI')
return(c(res))
}
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 9, stype = 'i')
debug(calculate_and_write_pairwise_dmi_wraper)
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 9, stype = 'i')
class(c(res))
#class(c(res))
res
as.vector(res)
reshape(res)
res
#c(res$id_1, res$id_2)
?reshape
res_colnames <- colnames(res)
test <- c(); for(names in res_colnames) test <- c(test, res[, names])
test
calculate_and_write_pairwise_dmi_wraper <- function(d, i, delays = c(1,2,5,10,15,20,25), supergraph = NULL, cores = 1, verbose = F) {
print(i)
data <- d[i, ]
print('before RDI')
res <- calculate_and_write_pairwise_dmi(data, delays = delays, supergraph = supergraph, cores = cores, verbose = verbose)
print('after RDI')
res_colnames <- colnames(res)
test_res <- c(); for(names in res_colnames) test_res <- c(test_res, res[, names])
return(c(res))
}
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 9, stype = 'i')
#boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 9, stype = 'i')
calculate_and_write_pairwise_dmi_wraper <- function(d, i, delays = c(1,2,5,10,15,20,25), supergraph = NULL, cores = 1, verbose = F) {
print(i)
data <- d[i, ]
print('before RDI')
res <- calculate_and_write_pairwise_dmi(data, delays = delays, supergraph = supergraph, cores = cores, verbose = verbose)
print('after RDI')
res_colnames <- colnames(res)
rdi_res <- c(); for(names in res_colnames) rdi_res <- c(rdi_res, res[, names])
return(rdi_res)
}
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 9, stype = 'i')
boot_res
boot_res$t0
boot_res$t
dim(boot_res$t)
boot_res[, 1:10]
boot_res$t[, 1:10]
boot_res$t0
rbind(boot_res$t0, boot_res$t)
rdi_res
rdi_res$`delays 1`
class(rdi_res$`delays 1`)
calculate_and_write_pairwise_dmi(test_smooth, delays = c(1, 21, 41), cores = 2, verbose = T)
rdi_res <- calculate_and_write_pairwise_dmi(test_smooth, delays = c(1, 21, 41), cores = 2, verbose = T)
rdi_res$`delays 1`
class(rdi_res$`delays 1`)
calculate_and_write_pairwise_dmi_wraper <- function(d, i, delays = c(1,2,5,10,15,20,25), supergraph = NULL, cores = 1, verbose = F) {
print(i)
data <- d[i, ]
print('before RDI')
res <- calculate_and_write_pairwise_dmi(data, delays = delays, supergraph = supergraph, cores = cores, verbose = verbose)
print('after RDI')
res_colnames <- colnames(res)
rdi_res <- c(); for(index in res_colnames) {
names <- res_colnames[index]
if(index > 2)
rdi_res <- c(rdi_res, as.numeric(res[, names]))
else
rdi_res <- c(rdi_res, as.numeric(res[, names]))
}
return(rdi_res)
}
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 9, stype = 'i')
calculate_and_write_pairwise_dmi_wraper <- function(d, i, delays = c(1,2,5,10,15,20,25), supergraph = NULL, cores = 1, verbose = F) {
print(i)
data <- d[i, ]
print('before RDI')
res <- calculate_and_write_pairwise_dmi(data, delays = delays, supergraph = supergraph, cores = cores, verbose = verbose)
print('after RDI')
res_colnames <- colnames(res)
rdi_res <- c(); for(index in 1:length(res_colnames)){
names <- res_colnames[index]
if(index > 2)
rdi_res <- c(rdi_res, as.numeric(res[, names]))
else
rdi_res <- c(rdi_res, as.numeric(res[, names]))
}
return(rdi_res)
}
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 9, stype = 'i')
boot_res
boot_res$t0
boot_res$t
test_smooth
rdi_res
boot_all_runs <- rbind(boot_res$t0, boot_res$t)
boot_all_runs
rdi_res
boot_all_runs
qplot(boot_all_runs[, 1])
qplot(boot_all_runs[, 41])
qplot(boot_all_runs[, 42])
rdi_res
dim(rdi_res)
boot_res <- boot(test_smooth, calculate_and_write_pairwise_dmi_wraper, R = 199, stype = 'i')
qplot(boot_all_runs[, 41]) # show the result
boot_all_runs <- rbind(boot_res$t0, boot_res$t)
qplot(boot_all_runs[, 41]) # show the result
qplot(boot_all_runs[, 45]) # show the result
qplot(boot_all_runs[, 105]) # show the result
dpt
library(destiny)
dp
dpt
DiffusionMap
DPT
dummy_dpt
destiny:::dummy_dpt
moving_avg_res
smooth_genes
hbp_exprs = read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/PNAS_sui/log_exp_all_data.txt',
sep = '\t', header = T, row.names = 1)
pd <- new("AnnotatedDataFrame", data = pData(all_wt_GSE72857_cds))
hbp_exprs[1:5, ]
hbp_exprs[1:5, 1:5]
hbp_exprs[1:15, 1:5]
cardio_exprs = read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/PNAS_sui/log_exp_all_data.txt',
sep = '\t', header = T, row.names = 1)
pd_df <- cardio_exprs[1:3, ]
fd_df <- data.frame(gene_short_name = row.names(cardio_exprs)[-(1:3)])
cardio_exprs <- cardio_exprs[-c(1:3)]
row.names(cardio_exprs)[-(1:3)]
fd_df <- data.frame(gene_short_name = row.names(cardio_exprs)[-(1:3)], row.names = row.names(cardio_exprs)[-(1:3)])
pd <- new("AnnotatedDataFrame", data = pd_df)
fd <- new("AnnotatedDataFrame", data = fd_df)
pd <- new("AnnotatedDataFrame", data = pd_df)
fd <- new("AnnotatedDataFrame", data = fd_df)
cardio_cds <-  newCellDataSet(as(as.matrix(cardio_exprs), 'sparseMatrix'),
phenoData = pd,
featureData = fd,
expressionFamily=negbinomial.size(),
lowerDetectionLimit=1)
class(cardio_exprs)
cardio_exprs$Cell112
cardio_exprs = read.table('/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/PNAS_sui/log_exp_all_data.txt',
sep = '\t', header = T, row.names = 1)
pd_df <- cardio_exprs[1:3, ]
fd_df <- data.frame(gene_short_name = row.names(cardio_exprs)[-(1:3)], row.names = row.names(cardio_exprs)[-(1:3)])
cardio_exprs <- as.matrix(cardio_exprs[-c(1:3), ])
as.matrix(cardio_exprs[-c(1:3), ])
as.matrix(cardio_exprs[-c(1:3), ])[1, ]
test <- apply(cardio_exprs, 1, function(x) as.numeric(x))
test[1:5, 1:5]
test[, 1]
test[, 1] > 0
test[1:5, 1:5]
cardio_exprs[1:5, 1:5]
valid_cardio_exprs <- apply(cardio_exprs, 1, function(x) as.numeric(x))
pd <- new("AnnotatedDataFrame", data = pd_df)
fd <- new("AnnotatedDataFrame", data = fd_df)
cardio_cds <-  newCellDataSet(as(as.matrix(cardio_exprs), 'sparseMatrix'),
phenoData = pd,
featureData = fd,
expressionFamily=negbinomial.size(),
lowerDetectionLimit=1)
cardio_cds <-  newCellDataSet(as(as.matrix(valid_cardio_exprs), 'sparseMatrix'),
phenoData = pd,
featureData = fd,
expressionFamily=negbinomial.size(),
lowerDetectionLimit=1)
colnames(valid_cardio_exprs)
valid_cardio_exprs[1:5, 1:5]
colnames(cardio_exprs)
colnames(valid_cardio_exprs) <- colnames(cardio_exprs)
valid_cardio_exprs <- t(apply(cardio_exprs, 1, function(x) as.numeric(x)))
colnames(valid_cardio_exprs) <- colnames(cardio_exprs)
pd <- new("AnnotatedDataFrame", data = pd_df)
fd <- new("AnnotatedDataFrame", data = fd_df)
cardio_cds <-  newCellDataSet(as(as.matrix(valid_cardio_exprs), 'sparseMatrix'),
phenoData = pd,
featureData = fd,
expressionFamily=negbinomial.size(),
lowerDetectionLimit=1)
valid_cardio_exprs[1:5, 1:5]
as(as.matrix(valid_cardio_exprs)[row.names(fd_df), row.names(pd_df)], 'sparseMatrix')
row.names(fd_df)
row.names(pd_df)
colnames(pd_df)
pd <- new("AnnotatedDataFrame", data = t(pd_df))
fd <- new("AnnotatedDataFrame", data = fd_df)
t(pd_df)
t(pd_df)[1:5, ]
pd <- new("AnnotatedDataFrame", data = t(pd_df))
pd <- new("AnnotatedDataFrame", data = as.data.frame(t(pd_df)))
fd <- new("AnnotatedDataFrame", data = fd_df)
cardio_cds <-  newCellDataSet(as(as.matrix(valid_cardio_exprs)[row.names(fd_df), row.names(pd_df)], 'sparseMatrix'),
phenoData = pd,
featureData = fd,
expressionFamily=negbinomial.size(),
lowerDetectionLimit=1)
cardio_cds <-  newCellDataSet(as(as.matrix(valid_cardio_exprs)[row.names(fd_df), colnames(pd_df)], 'sparseMatrix'),
phenoData = pd,
featureData = fd,
expressionFamily=negbinomial.size(),
lowerDetectionLimit=1)
qplot(cardio_exprs[1, ])
cardio_exprs[1, ]
qplot(valid_cardio_exprs[1, ])
cardio_cds <- reduceDimension(cardio_cds, norm_method = 'nonoe', pseudo_expr = 1)
cardio_cds <- reduceDimension(cardio_cds, norm_method = 'none', pseudo_expr = 1)
cardio_cds <-  newCellDataSet(as(as.matrix(valid_cardio_exprs)[row.names(fd_df), colnames(pd_df)], 'sparseMatrix'),
phenoData = pd,
featureData = fd,
expressionFamily=gaussian(),
lowerDetectionLimit=1)
cardio_cds <- reduceDimension(cardio_cds, norm_method = 'none', pseudo_expr = 1)
cardio_cds <- estimateSizeFactors(cardio_cds)
cardio_cds <- reduceDimension(cardio_cds, norm_method = 'none', pseudo_expr = 1)
cardio_cds <- orderCells(cardio_cds)
plot_cell_trajectory(cardio_cds)
pData(cardio_cds)[1:5, ]
plot_cell_trajectory(cardio_cds, color_by = 'CollectionTime')
plot_cell_trajectory(cardio_cds, color_by = 'CollectionTime') + facet_wrap(~CollectionTime)
cardio_cds <- reduceDimension(cardio_cds, max_components = 3, norm_method = 'none', pseudo_expr = 1)
cardio_cds <- reduceDimension(cardio_cds, max_components = 3, norm_method = 'none', pseudo_expr = 1, verbose = T)
cardio_cds <- orderCells(cardio_cds)
plot_cell_trajectory(cardio_cds, color_by = 'CollectionTime') + facet_wrap(~CollectionTime)
cardio_cds <- reduceDimension(cardio_cds, max_components = 4, norm_method = 'none', pseudo_expr = 1, verbose = T)
cardio_cds <- orderCells(cardio_cds)
plot_cell_trajectory(cardio_cds, color_by = 'CollectionTime') + facet_wrap(~CollectionTime)
plot_cell_trajectory(cardio_cds, color_by = 'Consensus Cluster')
plot_cell_trajectory(cardio_cds, color_by = 'Phenotype.FACS')
cardio_cds <- reduceDimension(cardio_cds, max_components = 20, norm_method = 'none', pseudo_expr = 1, verbose = T)
cardio_cds <- reduceDimension(cardio_cds, max_components = 20, norm_method = 'none', pseudo_expr = 1, verbose = T, maxIter = 100)
DDRTree
cardio_cds <- orderCells(cardio_cds)
plot_cell_trajectory(cardio_cds, color_by = 'CollectionTime') + facet_wrap(~CollectionTime)
cardio_cds <- reduceDimension(cardio_cds, max_components = 3, norm_method = 'none', pseudo_expr = 1, verbose = T, maxIter = 100)
cardio_cds <- orderCells(cardio_cds)
plot_cell_trajectory(cardio_cds, color_by = 'CollectionTime') + facet_wrap(~CollectionTime)
cardio_cds <- reduceDimension(cardio_cds, max_components = 5, norm_method = 'none', pseudo_expr = 1, verbose = T, maxIter = 100)
plot_pc_variance_explained(cardio_cds)
plot_pc_variance_explained(cardio_cds, norm_method = 'none', pseudo_expr = 1)
cardio_cds <- reduceDimension(cardio_cds, max_components = 4, norm_method = 'none', pseudo_expr = 1, verbose = T, maxIter = 100)
cardio_cds <- orderCells(cardio_cds)
plot_cell_trajectory(cardio_cds, color_by = 'CollectionTime') + facet_wrap(~CollectionTime)
cardio_cds_10 <- reduceDimension(cardio_cds, max_components = 10, norm_method = 'none', pseudo_expr = 1, verbose = T, maxIter = 100)
plot_cell_clusters(cardio_cds_10)
plot_cell_trajectory(cardio_cds_10)
cardio_cds_10 <- orderCells(cardio_cds_10)
plot_cell_trajectory(cardio_cds, color_by = 'CollectionTime') + facet_wrap(~CollectionTime)
plot_cell_trajectory(cardio_cds, color_by = 'Phenotype.FACS')
pData(cardio_cds)[1:5, ]
colnames(pData(cardio_cds))
colnames(pData(cardio_cds))[2] <- "Consensus.Cluster"
plot_cell_trajectory(cardio_cds, color_by = 'Consensus.Cluster')
plot_cell_trajectory(cardio_cds, color_by = 'CollectionTime')
plot_cell_trajectory(cardio_cds, color_by = 'CollectionTime') + facet_wrap(~CollectionTime)
getwd()
?zeroinfl
data("bioChemists", package = "pscl")
## without inflation
## ("art ~ ." is "art ~ fem + mar + kid5 + phd + ment")
fm_pois <- glm(art ~ ., data = bioChemists, family = poisson)
fm_qpois <- glm(art ~ ., data = bioChemists, family = quasipoisson)
fm_nb <- glm.nb(art ~ ., data = bioChemists)
fm_zip2 <- zeroinfl(art ~ . | ., data = bioChemists)
fm_zinb2 <- zeroinfl(art ~ . | ., data = bioChemists, dist = "negbin")
fm_zinb2$optim
bioChemists
fm_zinb2 <- zeroinfl(ment ~ 1, data = bioChemists, dist = "negbin")
fm_zinb2
fm_zinb2$coefficients
fm_zinb2$optim
fm_zinb2$method
fm_zinb2
lapply(fm_zinb2, print)
fm_zinb2$weights
fm_zinb2$offset
fm_zinb2$n
fm_zinb2$terms
fm_zinb2$terms$count
fm_zinb2$linkinv()
fm_zinb2$contrasts
fm_zinb2$model
fm_zinb2$optim
?vglm
version(VGAM)
?pospoisson
cjdata <- data.frame(y = 1:6, freq = c(1486, 694, 195, 37, 10, 1))
fit <- vglm(y ~ 1, pospoisson, data = cjdata, weights = freq)
Coef(fit)
summary(fit)
fitted(fit)
fit@extra
fit@predictors
fit@dispersion
fit@coefficients
plot_cell_trajectory(cardio_cds, color_by = 'CollectionTime')
plot_cell_trajectory(cardio_cds, color_by = 'CollectionTime') + facet_wrap(~CollectionTime)
dev.off()
dev.off()
dev.off()
plot_cell_trajectory(cardio_cds, color_by = 'CollectionTime') + facet_wrap(~CollectionTime)
save(file = './RData/cardio_cds', cardio_cds)
getwd()
save(file = '/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/RData/cardio_cds.RData', cardio_cds)
plot_cell_trajectory(cardio_cds, color_by = 'Pseudotime')
plot_cell_trajectory(cardio_cds, color_by = 'State') + facet_wrap(~State)
cardio_cds <- orderCells(cardio_cds, root_state = 7)
plot_cell_trajectory(cardio_cds, color_by = 'Pseudotime')
plot_cell_trajectory(cardio_cds, color_by = 'State') + facet_wrap(~State)
pData(cardio_cds)$State
table(pData(cardio_cds)$State)
cardio_mat_end_state6 <- cardio_mat[, pData(cardio_cds)$State %in% c(7, 6, 5, 3)]
cardio_mat_end_state1 <- cardio_mat[, pData(cardio_cds)$State %in% c(7, 1:3)]
cardio_mat <- as.matrix(exprs(cardio_cds)[, order(pData(cardio_cds)$Pseudotime)])
fd <- fData(cardio_cds[, ])
cardio_mat_end_state6 <- cardio_mat[, pData(cardio_cds)$State %in% c(7, 6, 5, 3)]
cardio_mat_end_state1 <- cardio_mat[, pData(cardio_cds)$State %in% c(7, 1:3)]
pd <- pData(cardio_cds[, ])
pd
fd
pd
write.table(file = '/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/cardio_mat_end_state6.txt',  cardio_mat_end_state6, col.names = T, sep = '\t', row.names = T, quote = F)
write.table(file = '/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/cardio_mat_end_state1.txt', cardio_mat_end_state1, col.names = T, sep = '\t', row.names = T, quote = F)
write.table(file = '/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/cardio_fd.txt',  fd, col.names = T, sep = '\t', row.names = T, quote = F)
write.table(file = '/Users/xqiu/Dropbox (Personal)/Projects/Causal_network/causal_network/csv_data/cardio_fd.txt',  pd, col.names = T, sep = '\t', row.names = T, quote = F)
cardio_cds
dim(cardio_mat_end_state6)
smooth_genes
plot_genes_branched_pseudotime(cardio_cds[c('BMP4', 'GSC'), ])
plot_genes_branched_pseudotime(cardio_cds[c('BMP4', 'GSC'), ], branch_point = 2)
cardio_cds[c('BMP4', 'GSC'), ]
cardio_cds
dim(cardio_mat_end_state6)
cardio_mat_end_state6_smooth <- smooth_genes(cardio_mat_end_state6, window_size = 20)
#dim(cardio_mat_end_state6)
dim(cardio_mat_end_state6_smooth)
cardio_mat_end_state6_smooth <- smooth_genes(t(cardio_mat_end_state6), window_size = 20)
rdi_res <- calculate_and_write_pairwise_dmi(cardio_mat_end_state6_smooth, delays = c(1, 21, 41), cores = 3, verbose = T)
con_rdi_res <- calculate_and_write_pairwise_dmi_conditioned(t(single_run_simulation)[, unique(rdi_res$id_1)], rdi_res, cores = 3, k = 1, verbose = T)
q()
q()
